})
suppressMessages(plot_grid(plotlist = pl,
nrow = 2))
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05) %>%
mutate_at(vars(c("sample", "gs_name")), as.factor) %>%
mutate_if(is.numeric, sprintf, fmt = '%#.4f') %>%
mutate(Direction = ifelse(Estimate < 0, "Inhibited", "Activation")) %>%
dplyr::select(
Comparison, `Perturbation Score` = Estimate, Direction,
`Gene-set name` = gs_name,
`P-value` = pvalue,
FDR
) %>%
datatable(
filter = "top",
options = list(
columnDefs = list(list(targets = "Direction", visible = FALSE))
)) %>%
formatStyle(
'Perturbation Score', 'Direction',
backgroundColor = styleEqual(c("Inhibited", "Activation"), c('lightblue', 'indianred'))
)
normalisedScores
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05) %>%
mutate_at(vars(c("sample", "gs_name")), as.factor) %>%
mutate_if(is.numeric, sprintf, fmt = '%#.4f') %>%
mutate(Direction = ifelse(Estimate < 0, "Inhibited", "Activation")) %>%
dplyr::select(
Comparison, `Perturbation Score` = Estimate, Direction,
`Gene-set name` = gs_name,
`P-value` = pvalue,
FDR
) %>%
datatable(
filter = "top",
options = list(
columnDefs = list(list(targets = "Direction", visible = FALSE))
)) %>%
formatStyle(
'Perturbation Score', 'Direction',
backgroundColor = styleEqual(c("Inhibited", "Activation"), c('lightblue', 'indianred'))
)
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05)
load_all()
test <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 1, gsTopology = gsTopology, weight = weightedFC$weight)
250 + 750 + 82 + 200 + 112 + 45 + 60 + 207 + 40 + 145 + 145
load_all()
permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 8, seed = 123)
permutedFC[[1]]
library(microbenchmark)
test2 <- permutedPertScore_RCPP_alt(gsTopology$`Glycolysis / Gluconeogenesis`, pathwayG = rownames(gsTopology$`Glycolysis / Gluconeogenesis`),
rownames(permutedFC[[1]]),permutedFC = permutedFC, ncols(permutedFC[[1]]))
ncols(permutedFC[[1]])
test2 <- permutedPertScore_RCPP_alt(gsTopology$`Glycolysis / Gluconeogenesis`, pathwayG = rownames(gsTopology$`Glycolysis / Gluconeogenesis`),
rownames(permutedFC[[1]]),permutedFC = permutedFC, ncol(permutedFC[[1]]))
test2
test2 <- permutedPertScore_RCPP_alt(gsTopology$`Estrogen signaling pathway`, pathwayG = rownames(gsTopology$`Estrogen signaling pathway`),
rownames(permutedFC[[1]]),permutedFC = permutedFC, ncol(permutedFC[[1]]))
test2
microbenchmark(
"A" =  {test1 <- permutedPertScore_RCPP_indiPathway(gsTopology$`Estrogen signaling pathway`, pathwayG = rownames(gsTopology$`Estrogen signaling pathway`),
rownames(permutedFC[[1]]),permutedFC = permutedFC, ncol(permutedFC[[1]]))},
"B" =  {test2 <- permutedPertScore_RCPP_alt(gsTopology$`Estrogen signaling pathway`, pathwayG = rownames(gsTopology$`Estrogen signaling pathway`),
rownames(permutedFC[[1]]),permutedFC = permutedFC, ncol(permutedFC[[1]]))},
times = 2
)
load_all()
test1 <- permutedPertScore_RCPP_indiPathway(gsTopology$`Estrogen signaling pathway`, pathwayG = rownames(gsTopology$`Estrogen signaling pathway`),
#                                                 rownames(permutedFC[[1]]),permutedFC = permutedFC, ncol(permutedFC[[1]]))
)
test1 <- permutedPertScore_RCPP_indiPathway(gsTopology$`Estrogen signaling pathway`, pathwayG = rownames(gsTopology$`Estrogen signaling pathway`),
rownames(permutedFC[[1]]),permutedFC = permutedFC, ncol(permutedFC[[1]]))
test1
expressedG <- rownames(permutedFC[[1]])
head(expressedG)
gsTopology$`Glycolysis / Gluconeogenesis`
system.time(index <- lapply(gsTopology, function(x)match(rownames(x), expressedG)))
index$`Glycolysis / Gluconeogenesis`
lapply(gsTopology, function(x)abs(det(x)) < 1e-7)
gsTopology[lapply(gsTopology, function(x)abs(det(x)) < 1e-7)]
gsTopology[Sapply(gsTopology, function(x)abs(det(x)) < 1e-7)]
gsTopology[sapply(gsTopology, function(x)abs(det(x)) < 1e-7)]
names(gsTopology[sapply(gsTopology, function(x)abs(det(x)) < 1e-7)])
adjMatrix  <- gsTopology$`Herpes simplex virus 1 infection`
x <- permutedFC[[1]][rownames(adjMatrix), ]
apply(x, 2, function(y)sum(.Internal(La_solve(adjMatrix, -y, tol)) - y))
tol = 1e-7
apply(x, 2, function(y)sum(.Internal(La_solve(adjMatrix, -y, tol)) - y))
?solve.qr
apply(x, 2, function(y)sum(.Internal(La_solve_cmplx(adjMatrix, -y, tol)) - y))
apply(x, 2, function(y)sum(.Internal(La_solve_cmplx(adjMatrix, -y)) - y))
is.qr(adjMatrix)
load_all()
microbenchmark(
"A" =  {test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 8, tol = 1e-7)},
"B" =  {test2 <- permutedScore_PARALLEL_mapply(permutedFC, gsTopology, ncores = 8, tol = 1e-7)},
times = 2
)
load_all()
microbenchmark(
"A" =  {test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 8, tol = 1e-7)},
"B" =  {test2 <- permutedScore_PARALLEL_mapply(permutedFC, gsTopology, ncores = 8, tol = 1e-7)},
times = 2
)
!sapply(gsTopology, function(x)abs(det(x)) < tol)
length(gsTopology)
length(gsTopology[!sapply(gsTopology, function(x)abs(det(x)) < tol)])
load_all()
load_all()
microbenchmark(
"A" =  {test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 8, tol = 1e-7)},
"B" =  {test2 <- permutedScore_PARALLEL_mapply(permutedFC, gsTopology, ncores = 8, tol = 1e-7)},
times = 2
)
expressedG <- rownames(permutedFC[[1]])
gsTopology <- gsTopology[sapply(gsTopology, function(x)abs(det(x)) < tol)]
BPPARAM <- BiocParallel::registered()[[1]]
BPPARAM$workers <- ncores
BiocParallel::bplapply(gsTopology, function(x){
as.vector(sapply(permutedFC, function(y){.ssPertScore(x, y)}))
}, BPPARAM = BPPARAM)
load_all()
microbenchmark(
"A" =  {test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 8, tol = 1e-7)},
"B" =  {test2 <- permutedScore_PARALLEL_mapply(permutedFC, gsTopology, ncores = 8, tol = 1e-7)},
times = 2
)
test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 8, tol = 1e-7)
test1
permutedFC[[1]]
BPPARAM <- BiocParallel::registered()[[1]]
BPPARAM$workers <- ncores
BiocParallel::bpmapply(gsTopology, function(x){
as.vector(sapply(permutedFC, function(y){.ssPertScore(x, y)}))
}, BPPARAM = BPPARAM)
?bpmapply
BiocParallel::bplapply(gsTopology, function(x){
as.vector(sapply(permutedFC, function(y){.ssPertScore(x, y)}))
}, BPPARAM = BPPARAM)
gsTopology <- gsTopology[!sapply(gsTopology, function(x)abs(det(x)) < tol)]
BiocParallel::bplapply(gsTopology, function(x){
as.vector(sapply(permutedFC, function(y){.ssPertScore(x, y)}))
}, BPPARAM = BPPARAM)
load_all()
load_all()
weightedFC$logFC
# Rcpp functions takes on average 5 secs, R takes 11 while the BiocParallel one takes 9
microbenchmark::microbenchmark(
Rcpp = perturbationScore(weightedFC$logFC, gsTopology),
R = perturbationScore_R(weightedFC$logFC, gsTopology),
Rcpp_alt = perturbationScore_alt(weightedFC$logFC, gsTopology),
times = 5
)
head(weightedFC$logFC)
# Rcpp functions takes on average 5 secs, R takes 11 while the BiocParallel one takes 9
microbenchmark::microbenchmark(
Rcpp = perturbationScore(weightedFC$logFC, gsTopology),
R = perturbationScore_R(weightedFC$logFC, gsTopology),
Rcpp_alt = perturbationScore_alt(weightedFC$logFC, gsTopology),
times = 5
)
# Rcpp functions takes on average 5 secs, R takes 11 while the BiocParallel one takes 9
microbenchmark::microbenchmark(
Rcpp = perturbationScore(weightedFC$logFC, gsTopology),
R = perturbationScore_R(weightedFC$logFC, gsTopology),
Rcpp_alt = perturbationScore_alt(weightedFC$logFC, gsTopology),
times = 5
)
length(intersect(rownames(weightedFC$logFC), unlist(unname(lapply(gsTopology, rownames)))))
rownames(weightedFC$logFC)
lapply(gsTopology, rownames)
gsTopology[[1]]
load(system.file("extdata", "gsTopology.rda", package = "SSPT"))
# Rcpp functions takes on average 5 secs, R takes 11 while the BiocParallel one takes 9
microbenchmark::microbenchmark(
Rcpp = perturbationScore(weightedFC$logFC, gsTopology),
R = perturbationScore_R(weightedFC$logFC, gsTopology),
Rcpp_alt = perturbationScore_alt(weightedFC$logFC, gsTopology),
times = 5
)
match(rownames(gsTopology$`Glycolysis / Gluconeogenesis`), rownames(weightedFC$logFC))
match(rownames(gsTopology$`Glycolysis / Gluconeogenesis`), rownames(weightedFC$logFC))-1
load_all()
# Rcpp functions takes on average 5 secs, R takes 11 while the BiocParallel one takes 9
microbenchmark::microbenchmark(
Rcpp = perturbationScore(weightedFC$logFC, gsTopology),
R = perturbationScore_R(weightedFC$logFC, gsTopology),
Rcpp_alt = perturbationScore_alt(weightedFC$logFC, gsTopology),
times = 5
)
load_all()
# Rcpp functions takes on average 5 secs, R takes 11 while the BiocParallel one takes 9
microbenchmark::microbenchmark(
Rcpp = perturbationScore(weightedFC$logFC, gsTopology),
R = perturbationScore_R(weightedFC$logFC, gsTopology),
Rcpp_alt = perturbationScore_alt(weightedFC$logFC, gsTopology),
times = 5
)
nSample <- ncol(logCPM_example)
numOfTreat <- 3
numP <- nSample/numOfTreat
index <- seq(1, nSample, numP)
index
index <- seq(1, numP, nSample)
index
index <- seq(1, nSample, by = numP)
index
index <- seq(1, nSample, by = numOfTreat)
index
seq_len(index)
seq_along(index)
y <- 1
seq(index[[y]]+1, index[[y]]+numOfTreat-1)
y <- 2
seq(index[[y]]+1, index[[y]]+numOfTreat-1)
logCPM <- logCPM_example
NB <- 2
# permute sample labels to get permuted logCPM
colnames(logCPM) <- sample(colnames(logCPM), nSample)
sapply(seq_along(index), function(y){
logCPM[,seq(index[[y]]+1, index[[y]]+numOfTreat-1)] - logCPM[,index[[y]]]
})
load_all()
.generate_permutedFC(logCPM_example, numOfTreat = 3, NB = 10, weightedFC$weight)
load_all()
.generate_permutedFC(logCPM_example, numOfTreat = 3, NB = 10, weightedFC$weight)
microbenchmark(
"R" = {permutedFC <- .generate_permutedFC(logCPM_example, numOfTreat = 3, weight =  weightedFC$weight)},
"Rcpp" = {test2 <- permutedFC_RCPP(logCPM_example, 1000, 3, weightedFC$weight)},
times = 100
)
length(permutedFC)
?bplapply
bpparam()
library(BiocParallel)
bpparam()
registered()
?bpparam
?BiocParallel::bpmapply
load_all()
load_all()
system.time(test <- generate_PermutedScore(logCPM_example, 3, 10, gsTopology = gsTopology, weightedFC$weight))
system.time(test <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 10, gsTopology = gsTopology, weight = weightedFC$weight))
load_all()
system.time(test <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 10, gsTopology = gsTopology, weight = weightedFC$weight))
1700/60
test <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 10, gsTopology = gsTopology, weight = weightedFC$weight, BPPARAM = random)
test <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 10, gsTopology = gsTopology, weight = weightedFC$weight, BPPARAM = "random")
test
length(test)
test$`Glycolysis / Gluconeogenesis`
dim(logCPM_example)
document()
library(covr)
install.packages("covr")
library(covr)
?package_coverage
test_file(here::here("tests/testthat/test-normaliseByPermutation.R"))
test_file(here::here("tests/testthat/test-normaliseByPermutation.R"))
test_file(here::here("tests/testthat/test-normaliseByPermutation.R"))
test_file(here::here("tests/testthat/test-normaliseByPermutation.R"))
y <- matrix(c(c(1:5, 2:6, 3:7), c(1:5, 2:6, 3:7)+ 0.2), 5, 6)
rownames(y) <- c("7105","8813","57147","55732","2268" )
colnames(y) <- c("patient1_control", "patient1_treat1", "patient1_treat2", "patient2_control", "patient2_treat1", "patient2_treat2")
sample <- colnames(y) %>%
as.data.frame()
colnames(sample) <- c("sample")
sample <- sample %>%
dplyr::mutate(
treatment = vapply(.$sample, function(x){
stringr::str_split(x, "_")[[1]][2]
}, character(1)),
patient = vapply(.$sample, function(x){
stringr::str_split(x, "_")[[1]][1]
}, character(1)))
ssFC <- weight_ssFC(y, sample, "patient", "control")
pathwayDir <- system.file("testdata", "test_BminsI.rda", package = "SSPT")
load(pathwayDir)
# the number of pathways with at least one of those five genes in it
interesectName <- names(BminsI[lapply(BminsI, function(x){length(intersect(rownames(ssFC$logFC),rownames(x)))}) != 0])
results <- generate_PermutedScore(y, numOfTreat = 3, NB = 10,gsTopology =  BminsI, weight = ssFC$weight)
ssPertScore <- perturbationScore(ssFC$logFC, BminsI)
output <- normaliseByPermutation(results, ssPertScore)
output
results
# the number of pathways with at least one of those five genes in it
interesectName <- names(BminsI[lapply(BminsI, function(x){length(intersect(rownames(ssFC$logFC),rownames(x)))}) != 0])
interesectName
y
ssPertScore
perS <- list(
"Chemokine signaling pathway"= rnorm(40, mean = 1, sd = 0.3)
)
perS
output <- normaliseByPermutation(results, ssPertScore)
output
output <- normaliseByPermutation(perS, ssPertScore)
output
test_file(here::here("tests/testthat/test-normaliseByPermutation.R"))
y
results <- generate_PermutedScore(y, numOfTreat = 3, NB = 10, gsTopology = BminsI, weight = ssFC$weight)
length(results[[1]])
ssFC$logFC
.generate_permutedFC(y, 3, 2, ssFC$weight, 123)
#' Permute sample labels to generate permuted logFCs
.generate_permutedFC <- function(logCPM, numOfTreat,
NB = 1000, weight, seed){
nSample <- ncol(logCPM)
index <- seq(1, nSample, by = numOfTreat)
set.seed(seed)
browser()
# BPPARAM <- BiocParallel::registered()[[1]]
# BPPARAM$workers <- ncores
sapply(1:NB, function(x){
# permute sample labels to get permuted logCPM
colnames(logCPM) <- sample(colnames(logCPM), nSample)
sapply(seq_along(index), function(y){
(logCPM[,seq(index[[y]]+1, index[[y]]+numOfTreat-1)] - logCPM[,index[[y]]]) * weight
})
}, simplify = FALSE)
}
.generate_permutedFC(y, 3, 2, ssFC$weight, 123)
nSample
index
# permute sample labels to get permuted logCPM
colnames(logCPM) <- sample(colnames(logCPM), nSample)
sapply(seq_along(index), function(y){
(logCPM[,seq(index[[y]]+1, index[[y]]+numOfTreat-1)] - logCPM[,index[[y]]]) * weight
})
sapply(seq_along(index), function(y){
logCPM[,seq(index[[y]]+1, index[[y]]+numOfTreat-1)] - logCPM[,index[[y]]]
})
seq_along(index)
y <- 1
(logCPM[,seq(index[[y]]+1, index[[y]]+numOfTreat-1)] - logCPM[,index[[y]]]) * weight
y
logCPM
sapply(seq_along(index), function(y){
(logCPM[,seq(index[[y]]+1, index[[y]]+numOfTreat-1)] - logCPM[,index[[y]]]) * weight
}, simplify = FALSE)
sapply(seq_along(index), function(y){
logCPM[,seq(index[[y]]+1, index[[y]]+numOfTreat-1)] - logCPM[,index[[y]]]
}=)
sapply(seq_along(index), function(y){
logCPM[,seq(index[[y]]+1, index[[y]]+numOfTreat-1)] - logCPM[,index[[y]]]
})
index
logCPM
index
index <- c(1,4)
logCPM <- y
weight <- ssFC$weight
apply(seq_along(index), function(y){
(logCPM[,seq(index[[y]]+1, index[[y]]+numOfTreat-1)] - logCPM[,index[[y]]]) * weight
})
test <- sapply(seq_along(index), function(y){
(logCPM[,seq(index[[y]]+1, index[[y]]+numOfTreat-1)] - logCPM[,index[[y]]]) * weight
}, simplify = FALSE)
do.call(cbind, test)
load_all()
rm(list = c(".generate_permutedFC"))
test_file(here::here("tests/testthat/test-normaliseByPermutation.R"))
load_all()
test_file(here::here("tests/testthat/test-normaliseByPermutation.R"))
?package_coverage
package_coverage()
725 - 471
?covr
file_coverage("R/normaliseByPermutation.R", "tests/testthat/test-normaliseByPermutation.R")
covr <- file_coverage("R/normaliseByPermutation.R", "tests/testthat/test-normaliseByPermutation.R")
report(covr)
length(permutedScore)
length(permutedScore$`Glycolysis / Gluconeogenesis`)
save(permutedScore, file = "permutedScore.rda")
getwd()
logCPM <- readRDS("/Users/wenjunliu/GSE800098/output/logCPM.rds")
metadata <- readRD("/Users/wenjunliu/GSE800098/output/mergedSamples.rds")
logCPM
metadata
metadata <- readRD("/Users/wenjunliu/GSE800098/output/mergedSamples.rds")
metadata <- readRDS("/Users/wenjunliu/GSE800098/output/mergedSamples.rds")
metadata
metadata %>%
dplyr::filter(treatment == "R5020")
metadata
sam2Keep <- metadata %>%
dplyr::filter(treatment %in% c("R5020", "Vehicle") )
sam2Keep <- metadata %>%
dplyr::filter(treatment %in% c("R5020", "Vehicle") ) %>%
pull(name)
logCPM_example <- logCPM[, sam2Keep]
logCPM_example
metadata_example <- metadata %>%
dplyr::filter(name %in% sam2Keep) %>%
dplyr::rename(sample = name)
metadata_example
if (!requireNamespace("AnnotationHub", quietly=TRUE))BiocManager::install("AnnotationHub")
if (!requireNamespace("ensembldb", quietly=TRUE))BiocManager::install("ensembldb")
ah <- AnnotationHub::AnnotationHub()
ah <- AnnotationHub::subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM_example) <- ensembldb::mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
head(logCPM_example)
#compute weighted single sample logFCs
weightedFC <- weight_ssFC(logCPM_example, metadata = metadata_example,
factor = "patient", control = "Vehicle")
perSample_FC <- sapply(unique(metadata_example$patient), function(x){
temp <- logCPM_example[1:1000,str_detect(colnames(logCPM_example), x)]
ratio <- temp[, str_detect(colnames(temp), "E2")] - temp[, str_detect(colnames(temp), "Vehicle")]
ratio %>%
enframe(name = "gene_id",
value = x)
}, simplify = FALSE) %>%
Reduce(left_join,.)
aveCPM <- logCPM_example[1:1000,] %>%
rowMeans() %>%
enframe(name = "gene_id",
value = "aveCPM")
p1 <- perSample_FC %>%
pivot_longer(cols = -gene_id,
names_to = "name",
values_to = "logFC") %>%
left_join(aveCPM) %>%
ggplot(aes(aveCPM, logFC)) +
geom_point() +
labs(y = "sslogFC",
x = "Average logCPM") +
theme(
panel.background = element_blank()
)
p2 <- data.frame(
gene_id = perSample_FC$gene_id,
variance = perSample_FC[,-1] %>%
apply(1,var)) %>%
left_join(aveCPM) %>%
ggplot(aes(aveCPM, variance)) +
geom_point() +
geom_smooth(method = "loess") +
labs(y = "Variance in ssLogFCs",
x = "Average logCPM") +
theme(
panel.background = element_blank()
)
plot_grid(p1,
p2)
weightedFC
weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "gsTopology.rda")
load("gsTopology.rda")
ssPertScore <- perturbationScore(weightedFC$logFC, gsTopology)
ssPertScore
permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2, NB = 1000, gsTopology = gsTopology, weight = weightedFC$weight)
pl <- permutedScore %>%
keep(~all(.!=0)) %>%
.[sample(seq_along(.), 6)] %>%
lapply(function(x){
ggplot(mapping = aes(x)) +
geom_histogram() +
xlab("Perturbation Score")
})
suppressMessages(plot_grid(plotlist = pl,
nrow = 2))
dim(logCPM_example)
colnames(logCPM_example)
metadata
sam2Keep <- metadata %>%
dplyr::filter(treatment %in% c("R5020", "Vehicle", "E2+R5020"), time == 24) %>%
pull(name)
sam2Keep
logCPM_example <- logCPM[, sam2Keep]
metadata_example <- metadata %>%
dplyr::filter(name %in% sam2Keep) %>%
dplyr::rename(sample = name)
BPPARAM = BiocParallel:: bpparam()
BPPARAM
load_all()
head(logCPM)
head(logCPM_example)
dim(logCPM_example)
dim(metadata_example)
test <- readRDS("/Users/wenjunliu/20131906_HickeyT_JC_NormalBreast/output/logCPM_normal.rds")
test
rownames(test) <- ensembldb::mapIds(ensDb, rownames(test), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
test <- test[!is.na(rownames(test)),]
head(test)
metadata_test <- readRDS("/Users/wenjunliu/20131906_HickeyT_JC_NormalBreast/data/normal_sample.rds")
metadata_test
testFC <- weight_ssFC(test, metadata = metadata_test,
factor = "patient", control = "Veh")
metadata_test <- readRDS("/Users/wenjunliu/20131906_HickeyT_JC_NormalBreast/data/normal_sample.rds") %>%
dplyr::select(
sample = name,
patient, treatment = treatm
)
metadata_test <- readRDS("/Users/wenjunliu/20131906_HickeyT_JC_NormalBreast/data/normal_sample.rds") %>%
dplyr::select(
sample = name,
patient, treatment = treat
)
testFC <- weight_ssFC(test, metadata = metadata_test,
factor = "patient", control = "Veh")
metadata_test
head(testFC$logFC)
head(test)
dim(test)
