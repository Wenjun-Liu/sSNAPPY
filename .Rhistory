metadata %>%
dplyr::filter(sample %in% sam2keep) %>%
mutate(sample = vapply(sample, function(x){
stringr::str_remove(x, "_24|_48")
}, character(1)))
metadata_example  <- metadata %>%
dplyr::filter(sample %in% sam2keep) %>%
mutate(sample = vapply(sample, function(x){
stringr::str_remove(x, "_24|_48")
}, character(1)))
use_data(metadata_example , overwrite = TRUE)
rownames(logCPM_example) <- mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
#compute weighted single sample logFCs
ls <- weight_ssFC(logCPM_example, metadata = metadata_example,
factor = "patient", control = "Vehicle")
stringr::str_remove(colnames(logCPM_example), "_24|_48")
colnames(logCPM_example) <- stringr::str_remove(colnames(logCPM_example), "_24|_48")
use_data(logCPM_example, overwrite = TRUE)
rownames(logCPM_example) <- mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
#compute weighted single sample logFCs
ls <- weight_ssFC(logCPM_example, metadata = metadata_example,
factor = "patient", control = "Vehicle")
logCPM_example <- logCPM[, sam2keep]
colnames(logCPM_example) <- stringr::str_remove(colnames(logCPM_example), "_24|_48")
metadata_example  <- metadata %>%
dplyr::filter(sample %in% sam2keep) %>%
mutate(sample = vapply(sample, function(x){
stringr::str_remove(x, "_24|_48")
}, character(1)))
rownames(logCPM_example) <- mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
#compute weighted single sample logFCs
ls <- weight_ssFC(logCPM_example, metadata = metadata_example,
factor = "patient", control = "Vehicle")
ssPertScore <- perturbationScore(ls$logFC, gsTopology)
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
head(normalisedScores)
document
document()
?plot_gsNetwork
normScores_R5020_N1 <- dplyr::filter(normalisedScores, sample = "R5020_N1")[1:10,]
# Color network plot nodes by robust z-score
plot_gsNetwork(normScores_R5020_N1, gsTopology, colorBy = "robustZ", color_lg_title = "Robust Z-score")
normScores_R5020_N1 <- dplyr::filter(normalisedScores, sample == "R5020_N1")[1:10,]
# Color network plot nodes by robust z-score
plot_gsNetwork(normScores_R5020_N1, gsTopology, colorBy = "robustZ", color_lg_title = "Robust Z-score")
normScores_R5020_N1 <- dplyr::filter(normalisedScores, sample == "R5020_N1")[50:60,]
# Color network plot nodes by robust z-score
plot_gsNetwork(normScores_R5020_N1, gsTopology, colorBy = "robustZ", color_lg_title = "Robust Z-score")
plot_gsNetwork(normScores_R5020_N1, gsTopology, colorBy = "pvalue", color_lg_title = "P-value")
document()
plot_gsNetwork(normScores_R5020_N1, gsTopology, colorBy = "pvalue", color_lg_title = "P-value")
head(normalisedScores)
load_all()
library(devtools)
load_all()
head(logCPM_example)
logCPM_example[1:5, ]
logCPM <- readRDS("/Users/wenjunliu/GSE800098/output/logCPM.rds")
heda(logCPM)
head(logCPM)
metadata <- readRDS("/Users/wenjunliu/GSE800098/output/mergedSamples.rds") %>%
dplyr::rename(sample = name)
## prepare example data, take 8 patients and only keep the Vehicle & E2 treatment
sam2keep <- stringr::str_subset(colnames(logCPM), "Vehicle_N|R5020_N")
sam2keep
## prepare example data, take 8 patients and only keep the Vehicle & E2 treatment
sam2keep <- stringr::str_subset(colnames(logCPM), "Vehicle_P|E2_P")
sam2keep
logCPM_example <- logCPM[, sam2keep]
colnames(logCPM_example) <- stringr::str_remove(colnames(logCPM_example), "_24|_48")
logCPM_example
use_data(logCPM_example, overwrite = TRUE)
metadata_example  <- metadata %>%
dplyr::filter(sample %in% sam2keep) %>%
mutate(sample = vapply(sample, function(x){
stringr::str_remove(x, "_24|_48")
}, character(1)))
metadata_example
metadata_example <- dplyr::select(metadata_example, patient, treatment, time, sample)
use_data(metadata_example , overwrite = TRUE)
?
geom_edge_link
?scale_color_manual
use_package("ggplot2")
use_package("ggraph")
use_package(igraph)
use_package("igraph")
document()
use_package("reshape2")
document()
use_package("reshape2")
?plot_gsNetwork
require(AnnotationHub)
require(ensembldb)
# convert rownamews of logCPM from gene ids to gene entrez IDs through `AnnotationHub`
ah <- AnnotationHub()
ah <- subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM_example) <- mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
#compute weighted single sample logFCs
ls <- weight_ssFC(logCPM_example, metadata = metadata_example,
factor = "patient", control = "Vehicle")
# explore all species and databases supported by graphite
graphite::pathwayDatabases()
weightedAdjMatrix(species = "hsapiens",
database = "kegg",
outputDir = "gsTopology.rda")
load("gsTopology.rda")
# compute test perturbation scores
ssPertScore <- perturbationScore(ls$logFC, gsTopology)
# generate permuted perturbation scores
permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
NB = 100, gsTopology = gsTopology, weight = ls$weight)
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
# Extract results for R5020-treated patient-N1 samples, and randomly take 10 gene-sets as an example
normScores_R5020_N1 <- dplyr::filter(normalisedScores, sample == "R5020_N1")[50:60,]
# Color network plot nodes by robust z-score
plot_gsNetwork(normScores_R5020_N1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
normScores_R5020_N1
head(normalisedScores)
normalisedScores %>% dplyr::filter(adjPvalue < 0.05)
normScores_P1 <- dplyr::filter(normalisedScores, sample == "P1")[50:60,]
normScores_P1
document()
?plot_gsNetwork
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
document()
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
normScores_P1
g <- make_gsNetwork(normScores_P1, gsTopology, colorBy = "robustZ")
GS2Gene <- get_GSgenelist(gsTopology)
GS2Gene
GS2Gene <- left_join(normScores_P1, GS2Gene, by = "gs_name")
melt(gsTopology)
document()
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
document()
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
GS2Gene <- get_GSgenelist(gsTopology)
head(GS2Gene)
reshape2::melt(gsTopology)
gsTopology$`Glycolysis / Gluconeogenesis`
GStoGene <- lapply(gsTopology, rownames)
GStoGene <- reshape2::melt(GStoGene)
head(GStoGene)
document()
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
?E
document()
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
document()
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
?geom_node_point
document()
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
?ggraph
load_all()
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
?aes_
document()
load_all()
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
?graph.data.frame
document()
load_all()
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
document()
load_all()
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
load_all()
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
g
#' Create gene-set network plot object
#'
#' @param normalisedScores A dataframe as described in the details section
#' @param gsTopology List of pathway topology matrices generated using function `weightedAdjMatrix`
#' @param colorBy Choose to color nodes either by "robustZ" or "pvalue". A column must exist in the normalisedScores for the chosen parameter
#' @param foldGSname logical(1). Should long gene-set names be folded into two lines
#' @param foldafter The number of words after which gene-set names should be folded. Defaulted to 2
#'
#' @importFrom reshape2 melt
#' @importFrom igraph E V graph.data.frame set_edge_attr
make_gsNetwork <- function(normalisedScores, gsTopology,  colorBy = c("robustZ", "pvalue"), foldGSname = TRUE, foldafter = 2){
# create dummy variable to pass R CMD CHECK
from <- to <- E <- robustZ <- NULL
GS2Gene <- get_GSgenelist(gsTopology)
GS2Gene <- left_join(normalisedScores, GS2Gene, by = "gs_name")
GSlist <- split(GS2Gene[,c("gs_name", "gene_id")], f = GS2Gene$gs_name)
nGS <- length(GSlist)
GSname <- names(GSlist)
w <- sapply(seq_len(nGS-1), function(x){
sapply((x+1):nGS, function(y){
data.frame(from = GSname[x], to = GSname[y], weight = jacIdex_func(GSlist[[x]], GSlist[[y]]))
}, simplify = FALSE)
w <- bind_rows(lapply(w, bind_rows))
w <- filter(w, from != to)
g <- graph.data.frame(dplyr::select(w, from, to), directed = FALSE)
g <- set_edge_attr(g, "weight", value = w$weight)
# GSsize <- melt(lapply(GSlist, nrow))
# colnames(GSsize) <- c("size", "from")
# g <- set_edge_attr(g, "")
# # GSsize <- GSsize[match(V(g)$name, GSsize$from),]
# # V(g)$size <- GSsize$size
#
# if (colorBy == "robustZ"){
#     GScolor <- mutate(GS2Gene, colore <- ifelse(robustZ < 0, "Inhibited", "Activated"))
#     GScolor <- GScolor[match(V(g)$name, GScolor$gs_name), ]
#     V(g)$color <- GScolor$color
# }
#
# if (colorBy == "pvalue"){
#     GSpvalue <- unique(GS2Gene[,c("gs_name", "pvalue")])
#     GSpvalue <- GSpvalue[match(V(g)$name, GSpvalue$gs_name), ]
#     V(g)$color <- GSpvalue$pvalue
# }
#
# if(foldGSname){
#     V(g)$name <- vapply(V(g)$name, function(x){ifelse(length(strsplit(x, " ")[[1]]) > foldafter,
#                                                       str_replace_nth(x, " ", "\n", foldafter),
#                                                       x)}, character(1))
# }
g
}
g <- make_gsNetwork(normScores_P1, gsTopology = , colorBy = "robustZ")
g <- make_gsNetwork(normScores_P1, gsTopology  , colorBy = "robustZ")
V(g)
document()
rm(list = c("make_gsNetwork"))
document()
load_all()
?plot_gsNetwork
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
document()
load_all()
document()
load_all()
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
document()
?guide
??guide
load_all()
document()
load_all()
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "Robust Z-score")
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "robustZ", color_lg_title = "pvalue")
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "pvalue", color_lg_title = "pvalue")
g <- make_gsNetwork(normScores_P1, gsTopology, colorBy = "pvalue")
GS2Gene <- get_GSgenelist(gsTopology)
head(GS2Gene)
GS2Gene <- left_join(normScores_P1, GS2Gene, by = "gs_name")
head(GS2Gene)
unique(GS2Gene[,c("gs_name", "pvalue")])
dim(unique(GS2Gene[,c("gs_name", "pvalue")]))
g
V(g)
load_all()
plot_gsNetwork(normScores_P1, gsTopology,
colorBy = "pvalue", color_lg_title = "pvalue")
use_test("plot_GSnetwork")
head(normalisedScores)
pathwayDir <- system.file("testdata", "test_BminsI.rda", package = "SSPT")
load(pathwayDir)
runif(5, -1, 1)
runif(5)
Scores <- data.frame(
gs_name = sample(names(BminsI), 5),
robustZ = runif(5, -1, 1),
pvalue = runif(5)
)
Scores
expect_s3_class(g, "igraph")
tidygraph::activate(g, nodes)
?graph_data_frame
?graph.data.fram
?graph.data.frame
igraph::as_data_frame(g)
igraph::as_data_frame(g, "vertex")
igraph::as_data_frame(g, "vertices")
g <- make_gsNetwork(Scores, BminsI, colorBy = "robustZ")
g
V(g)
dim(igraph::as_data_frame(g, "vertices"))
expect_equal(dim(igraph::as_data_frame(g, "vertices")), c(5,3))
igraph::as_data_frame(g, "edges")
V(g)$color
4 + 3 + 2 + 1
V(g_Zscore)$pvalue
g_Zscore <- make_gsNetwork(Scores, BminsI, colorBy = "robustZ")
g_pvalue <- make_gsNetwork(Scores, BminsI, colorBy = "pvalue")
V(g_Zscore)$pvalue
V(g_Zscore)$color
V(g_Zscore)$color %>% str()
V(g_pvalue)$color %>% str()
expect_true(is.character(igraph::V(g_Zscore)))
GS <- Scores$gs_name
GS
V(g_Zscore)$name
source('~/SSPT/tests/testthat/test-plot_GSnetwork.R', echo=TRUE)
V(g_Zscore)$color
V(g_Zscore)$name
Scores
Scores <- data.frame(
gs_name = sample(names(BminsI), 5),
robustZ = runif(5, -1, 1),
pvalue = runif(5),
color_Z = ifelse(robustZ < 0, "Inhibited", "Activated")
)
Scores <- data.frame(
gs_name = sample(names(BminsI), 5),
robustZ = runif(5, -1, 1),
pvalue = runif(5)) %>%
mutate(color_Z = ifelse(robustZ < 0, "Inhibited", "Activated"))
Scores$color_Z
expect_equal(igraph::V(g_Zscore)$color, Scores[match(V(g_Zscore)$name, Scores$gs_name), ]$color_Z)
match(V(g_Zscore)$name, Scores$gs_name
)
V(g_Zscore)$name
Scores$gs_name
set.seed(123)
Scores <- data.frame(
gs_name = sample(names(BminsI), 5),
robustZ = runif(5, -1, 1),
pvalue = runif(5)) %>%
mutate(color_Z = ifelse(robustZ < 0, "Inhibited", "Activated"))
GS <- Scores$gs_name
g_Zscore <- make_gsNetwork(Scores, BminsI, colorBy = "robustZ")
g_pvalue <- make_gsNetwork(Scores, BminsI, colorBy = "pvalue")
expect_equal(igraph::V(g_Zscore)$color, Scores[match(V(g_Zscore)$name, Scores$gs_name), ]$color_Z)
Scores
g_Zscore
GS2Gene <- get_GSgenelist(BminsI)
GS2Gene <- left_join(Scores, GS2Gene, by = "gs_name")
GS2Gene
GSlist <- split(GS2Gene[,c("gs_name", "gene_id")], f = GS2Gene$gs_name)
nGS <- length(GSlist)
GSname <- names(GSlist)
w <- sapply(seq_len(nGS-1), function(x){
sapply((x+1):nGS, function(y){
data.frame(from = GSname[x], to = GSname[y], weight = jacIdex_func(GSlist[[x]], GSlist[[y]]))
}, simplify = FALSE)
w <- bind_rows(lapply(w, bind_rows))
w <- filter(w, from != to)
g <- graph.data.frame(dplyr::select(w, from, to), directed = FALSE)
g <- set_edge_attr(g, "weight", value = w$weight)
GSsize <- melt(lapply(GSlist, nrow))
colnames(GSsize) <- c("size", "from")
g <- set_vertex_attr(g, "size", index = GSsize$from, value = GSsize$size)
GScolor <- mutate(GS2Gene, colore <- ifelse(robustZ < 0, "Inhibited", "Activated"))
source('~/SSPT/R/plot_GSnetwork.R', echo=TRUE)
g <- set_vertex_attr(g, "color", index = GScolor$gs_name, value = GScolor$color)
GScolor <- mutate(GS2Gene, color <- ifelse(robustZ < 0, "Inhibited", "Activated"))
g <- set_vertex_attr(g, "color", index = GScolor$gs_name, value = GScolor$color)
GScolor
HEAD(GScolor)
head(GScolor)
GScolor <- mutate(GS2Gene, color =  ifelse(robustZ < 0, "Inhibited", "Activated"))
head(GScolor)
g <- set_vertex_attr(g, "color", index = GScolor$gs_name, value = GScolor$color)
load_all()
rm(list = c("get_GSgenelist", "jacIdex_func", "make_gsNetwork", "plot_gsNetwork", "str_replace_nth"))
load_all()
expect_equal(igraph::V(g_Zscore)$color, Scores[match(V(g_Zscore)$name, Scores$gs_name), ]$color_Z)
g_Zscore <- make_gsNetwork(Scores, BminsI, colorBy = "robustZ")
g_pvalue <- make_gsNetwork(Scores, BminsI, colorBy = "pvalue")
expect_equal(igraph::V(g_Zscore)$color, Scores[match(V(g_Zscore)$name, Scores$gs_name), ]$color_Z)
Scores <- data.frame(
gs_name = sample(names(BminsI), 5),
robustZ = runif(5, -1, 1),
pvalue = runif(5)) %>%
mutate(color_Z = ifelse(robustZ < 0, "Inhibited", "Activated"))
GS <- Scores$gs_name
g_Zscore <- make_gsNetwork(Scores, BminsI, colorBy = "robustZ")
g_pvalue <- make_gsNetwork(Scores, BminsI, colorBy = "pvalue")
expect_equal(igraph::V(g_Zscore)$color, Scores[match(V(g_Zscore)$name, Scores$gs_name), ]$color_Z)
match(V(g_Zscore)$name, Scores$gs_name)
V(g_Zscore)$name
Scores$gs_name
V(g_Zscore)$name
expect_equal(stringr::str_subset(V(g_Zscore)$name, "Histidine"), "Histidine metabolism")
g_Zscore_n3 <- make_gsNetwork(Scores, BminsI, colorBy = "robustZ", foldafter = 3)
expect_equal(stringr::str_subset(V(g_Zscore_n3)$name, "Ascorbate"), "Ascorbate and aldarate\nmetabolism")
expect_error(plot_gsNetwork(Scores[, -"robustZ"], BminsI, colorBy = "robustZ"))
plot_gsNetwork(Scores[, -"robustZ"], BminsI, colorBy = "robustZ")
plot_gsNetwork(Scores[, "gs_name"], BminsI, colorBy = "robustZ")
expect_error(plot_gsNetwork(Scores, colorBy = "random"))
plot_gsNetwork(Scores[1:2, ], BminsI, colorBy = "robustZ")
plot_gsNetwork(Scores[1, ], BminsI, colorBy = "robustZ")
expect_s3_class(plot_gsNetwork(Scores, BminsI, colorBy = "robustZ"), "ggraph")
covr <- file_coverage("R/plot_GSnetwork.R", "tests/testthat/test-plot_GSnetwork.R")
library(covr)
covr <- file_coverage("R/plot_GSnetwork.R", "tests/testthat/test-plot_GSnetwork.R")
GS
set.seed(123)
Scores <- data.frame(
gs_name = sample(names(BminsI), 5),
robustZ = runif(5, -1, 1),
pvalue = runif(5)) %>%
mutate(color_Z = ifelse(robustZ < 0, "Inhibited", "Activated"))
Scores$gs_name
covr <- file_coverage("R/plot_GSnetwork.R", "tests/testthat/test-plot_GSnetwork.R")
report(covr)
covr <- file_coverage("R/plot_GSnetwork.R", "tests/testthat/test-plot_GSnetwork.R")
report(covr)
g_noLegend <- plot_gsNetwork(Scores, BminsI, colorBy = "robustZ", color_lg = FALSE)
g_noLegend
get_legend(g_noLegend)
cowplot::::get_legend(g_noLegend)
cowplot::get_legend(g_noLegend)
is.null()
is.null(cowplot::get_legend(g_noLegend))
covr <- file_coverage("R/plot_GSnetwork.R", "tests/testthat/test-plot_GSnetwork.R")
report(covr)
library(devtools)
install.packages("devtools")
library(devtools)
load_all()
install.packages("Rcpp")
load_all()
install.packages(c(‘dplyr’, ‘plyr’, ‘BiocParallel’, ‘graphite’, ‘ggplot2’, ‘ggraph’, ‘igraph’, ‘reshape2’, ‘RcppArmadillo’))
install.packages("pacman")
p_load(dplyr,
magrittr,
rlang,
stats,
plyr,
purrr,
BiocParallel,
graphite,
Rcpp,
tibble,
ggplot2,
ggraph,
igraph,
reshape2)
pacman::p_load(dplyr,
magrittr,
rlang,
stats,
plyr,
purrr,
BiocParallel,
graphite,
Rcpp,
tibble,
ggplot2,
ggraph,
igraph,
reshape2)
install.packages("BiocManager")
BiocManager::install(c("BiocParallel", "graphite"))
load_all()
load_all()
library(devtools)
load_all()
load_all()
load_all()
load_all()
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("SSPT")
library(tidyverse)
library(ggplot2)
library(cowplot)
head(logCPM_example)
head(metadata_example)
# check if samples included in the logCPM matrix and metadata dataframe are identical
setequal(colnames(logCPM_example), metadata_example$sample)
if (!requireNamespace("AnnotationHub", quietly=TRUE))
install.packages("AnnotationHub")
if (!requireNamespace("ensembldb", quietly=TRUE))
install.packages("ensembldb")
ah <- AnnotationHub::AnnotationHub()
install.packages("AnnotationHub")
requireNamespace("ensembldb", quietly=TRUE)
!requireNamespace("ensembldb", quietly=TRUE)
if (!requireNamespace("ensembldb", quietly=TRUE))install.packages("ensembldb")
if (!requireNamespace("BiocManager", quietly=TRUE))install.packages("BiocManager")
BiocManager::install("SSPT")
if (!requireNamespace("AnnotationHub", quietly=TRUE))install.packages("AnnotationHub")
if (!requireNamespace("AnnotationHub", quietly=TRUE))BiocManager::install("AnnotationHub")
if (!requireNamespace("ensembldb", quietly=TRUE))BiocManager::install("ensembldb")
ah <- AnnotationHub::AnnotationHub()
ah <- AnnotationHub::subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
ensDb <- ah[[1]]
