if (is.null(factor)) stop("Factor defining matching samples has to be provided")
if (is.null(control)) stop("Control treatment has to be specified")
if (!"treatment" %in% colnames(metadata)) stop("Sample metadata has to contain a column named *treatment*")
if (!control %in% unique(metadata$treatment)) stop("Control level not detected in sample metadata")
stopifnot(factor %in% colnames(metadata))
stopifnot(ncol(logCPM) == nrow(metadata))
##
logCPM <- as.matrix(logCPM)
logCPM
pairs <- unique(metadata$factor)
factor
pairs <- unique(metadata[,factor])
pair
pairs
metadata[,factor]
pairs[1]
pairs <- unique(as.vector(metadata[,factor]))
pairs
metadata[,factor]
metadata %>%
dplyr::select(factor)
sym(factor)
library(rlang)
?!!
?
NABO
sym(factor)
metadata[,sym(factor)]
unique(metadata$sym(factor))
unique(metadata$"sym(factor)")
!!sym(factor)
metadata <- as.data.frame(metadata)
unique(metadatap[,sym(factor)])
unique(metadatap[,sym(factor)])
unique(metadata[,sym(factor)])
sym(factor)
unique(metadata[,!!sym(factor)])
metadata
pairs <- unique(metadata[,factor])
pairs
length(unqiue(metadata[,treatment] <2))
length(unique(metadata[,treatment] <2))
length(unique(metadata[,"treatment"] <2))
length(unique(metadata[,"treatment"])) <2
sapply(pairs, function(x){
contrSample <- metadata %>%
dplyr::filter(
treatment == control,
factor ==x
)
treatedSample <- metadata %>%
dplyr::filter(
T\treatment != control,
factor ==x
)
logCPM[, treatedSample] - logCPM[, contrSample]
})
sapply(pairs, function(x){
contrSample <- metadata %>%
dplyr::filter(
treatment == control,
factor ==x
)
treatedSample <- metadata %>%
dplyr::filter(
treatment != control,
factor ==x
)
logCPM[, treatedSample] - logCPM[, contrSample]
})
sapply(pairs, function(x){
contrSample <- metadata %>%
dplyr::filter(
treatment == control,
factor ==x
) %>%
pull(sample)
treatedSample <- metadata %>%
dplyr::filter(
treatment != control,
factor ==x
)
logCPM[, treatedSample] - logCPM[, contrSample]
})
library(dplyr)
sapply(pairs, function(x){
contrSample <- metadata %>%
dplyr::filter(
treatment == control,
factor ==x
) %>%
pull(sample)
treatedSample <- metadata %>%
dplyr::filter(
treatment != control,
factor ==x
)
logCPM[, treatedSample] - logCPM[, contrSample]
})
pairs
pairs[x]
x <- pairs[1]
x
etadata %>%
dplyr::filter(
treatment == control,
factor ==x
)
metadata %>%
dplyr::filter(
treatment == control,
factor ==x
)
control
metadata
metadata %>%
dplyr::filter(
treatment == control,
!!sym(factor) == x
)
colnames(logCPM)
x
metadata %>%
dplyr::filter(
treatment == control,
!!sym(factor) == x
)
sapply(pairs, function(x){
contrSample <- metadata %>%
dplyr::filter(
treatment == control,
!!sym(factor) == x
) %>%
pull(sample)
treatedSample <- metadata %>%
dplyr::filter(
treatment != control,
!!sym(factor) ==x
)
logCPM[, treatedSample] - logCPM[, contrSample]
})
seq_along(pairs)
sapply(seq_along(pairs), function(x){
contrSample <- metadata %>%
dplyr::filter(
treatment == control,
!!sym(factor) == pairs[[x]]
) %>%
pull(sample)
treatedSample <- metadata %>%
dplyr::filter(
treatment != control,
!!sym(factor) == pairs[[x]]
)
logCPM[, treatedSample] - logCPM[, contrSample]
})
seq_along(pairs)
x
sapply(pairs, function(x){
contrSample <- metadata %>%
dplyr::filter(
treatment == control,
!!sym(factor) == x
) %>%
pull(sample)
treatedSample <- metadata %>%
dplyr::filter(
treatment != control,
!!sym(factor) ==x
) %>%
pull(sample)
logCPM[, treatedSample] - logCPM[, contrSample]
})
contrSample <- metadata %>%
dplyr::filter(
treatment == control,
!!sym(factor) == x
) %>%
pull(sample)
contrSample
metadata %>%
dplyr::filter(
treatment == control,
!!sym(factor) == x
)
metadata <- metadata %>% dplyr::rename(sample =  name)
sapply(pairs, function(x){
contrSample <- metadata %>%
dplyr::filter(
treatment == control,
!!sym(factor) == x
) %>%
pull(sample)
treatedSample <- metadata %>%
dplyr::filter(
treatment != control,
!!sym(factor) ==x
) %>%
pull(sample)
logCPM[, treatedSample] - logCPM[, contrSample]
})
contrSample <- metadata %>%
dplyr::filter(
treatment == control,
!!sym(factor) == x
) %>%
pull(sample)
treatedSample <- metadata %>%
dplyr::filter(
treatment != control,
!!sym(factor) ==x
) %>%
pull(sample)
logCPM[, treatedSample] - logCPM[, contrSample]
sapply(pairs, function(x){
contrSample <- metadata %>%
dplyr::filter(
treatment == control,
!!sym(factor) == x
) %>%
pull(sample)
treatedSample <- metadata %>%
dplyr::filter(
treatment != control,
!!sym(factor) ==x
) %>%
pull(sample)
logCPM[, treatedSample] - logCPM[, contrSample]
}, simplify = FALSE) %>%
bind_cols()
sapply(pairs, function(x){
contrSample <- metadata %>%
dplyr::filter(
treatment == control,
!!sym(factor) == x
) %>%
pull(sample)
treatedSample <- metadata %>%
dplyr::filter(
treatment != control,
!!sym(factor) ==x
) %>%
pull(sample)
logCPM[, treatedSample] - logCPM[, contrSample]
}, simplify = FALSE) %>%
cbind()
sapply(pairs, function(x){
contrSample <- metadata %>%
dplyr::filter(
treatment == control,
!!sym(factor) == x
) %>%
pull(sample)
treatedSample <- metadata %>%
dplyr::filter(
treatment != control,
!!sym(factor) ==x
) %>%
pull(sample)
logCPM[, treatedSample] - logCPM[, contrSample]
}, simplify = FALSE)
logCPM[, treatedSample] - logCPM[, contrSample]
logCPM[, treatedSample] - logCPM[, contrSample] %>%
head()
sapply(pairs, function(x){
contrSample <- metadata %>%
dplyr::filter(
treatment == control,
!!sym(factor) == x
) %>%
pull(sample)
treatedSample <- metadata %>%
dplyr::filter(
treatment != control,
!!sym(factor) ==x
) %>%
pull(sample)
logCPM[, treatedSample] - logCPM[, contrSample] %>%
head()
}, simplify = FALSE) %>%
Reduce(., cbind)
sapply(pairs, function(x){
contrSample <- metadata %>%
dplyr::filter(
treatment == control,
!!sym(factor) == x
) %>%
pull(sample)
treatedSample <- metadata %>%
dplyr::filter(
treatment != control,
!!sym(factor) ==x
) %>%
pull(sample)
logCPM[, treatedSample] - logCPM[, contrSample] %>%
head()
}, simplify = FALSE) %>%
do.call(cbind,.)
model.matrix
install_github("steveped/spBioUtils")
library(spBioUtils)
?make_gs_network
devtools::load_all()
devtools::load_all()
compute_ssFC(logCPM, metadata, "patient", "Vehicle")
setequal(metadata[,"sample"], colnames(logCPM))
setequal(metadata[,"sample"], colnames(logCPM))
devtools::load_all()
compute_ssFC(logCPM, metadata, "patient", "Vehicle")
use_pipe()
warning()
warnings()
?use_package
use_package("dplyr")
?use_roxygen_md
devtools::install()
library(SSPT)
?devtools::document
devtools::document()
devtools::install()
library(SSPT)
devtools::check()
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
?glm.fit
devtools::install()
library(SSPT)
?SSPT::compute_ssFC
SSPT::compute_ssFC(logCPM, metadata, "patient", "Vehicle")
devtools::document()
devtools::install()
library(SSPT)
?SSPT::compute_ssFC
use_package("tidyverse")
check()
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools()
getOption("buildtools.check", NULL)
getOption("buildtools.check", NULL)("Building R package from source")
devtools::test()
library(devtools)
library(usethis)
library(testthat)
check()
install.packages('covr')
library(covr)
use_test(
"test_ssFC"
)
use_test(
"ssFC"
)
sd <- 0.3*sqrt(4/rchisq(100,df=3))
y <- matrix(rnorm(100*6,sd=sd),100,6)
rownames(y) <- paste("Gene",1:100)
y
LOGc
logCPM <- readRDS(here::here("data/logCPM.rds"))
logCPM[1:5, 1:20]
BiocManager::install("SPIA")
library(edgeR)
?cpm
y <- matrix(rnbinom(20,size=1,mu=10),5,4)
cpm(y)
y <- cpm(y)
y
sd <- 0.3*sqrt(4/rchisq(100,df=3))
y <- matrix(rnorm(100*6,sd=sd),100,6)
rownames(y) <- paste("Gene",1:100)
y <- cpm(y)
y <- matrix(rnbinom(20,size=1,mu=10),100,6)
rownames(y) <- paste("Gene",1:100)
y <- cpm(y)
y
?rnbinom
y <- matrix(rnbinom(20,size=1,mu=10),100,6)
rownames(y) <- paste("Gene",1:100)
y
matrix(rnbinom(20,size=1,mu=10),5,4)
y <- matrix(rnbinom(600,size=1,mu=10),100,6)
rownames(y) <- paste("Gene",1:100)
y <- cpm(y)
y
data(vbetaFA)
y <- matrix(rnbinom(60,size=1,mu=10),10,6)
y <- cpm(y)
rownames(y) <- paste("Gene",1:10)
colnames(y) <- c("patient1_control", "patient1_treat1", "patient1_treat2", "patient2_control", "patient2_treat1", "patient2_treat2")
y
colnames(y) %>%
as.data.frame(col.name = "sample")
?as.data.frame
colnames(y) %>%
as.data.frame(col.names = "sample")
colnames(y) %>%
as.data.frame() %>%
set_colnames("sample")
library(tidyverse)
colnames(y) %>%
as.data.frame() %>%
set_colnames("sample")
library(magrittr)
colnames(y) %>%
as.data.frame() %>%
set_colnames("sample")
colnames(y) %>%
as.data.frame(col.names = "sample")
use_package("stringr")
str_split(x, "_")[[1]][1]
sample <- colnames(y) %>%
as.data.frame() %>%
set_colnames("sample") %>%
mutate(
treatment = vapply(.$sample, function(x){
str_split(x, "_")[[1]][2]
}, character(1)),
patient = vapply(.$sample, function(x){
str_split(x, "_")[[1]][1]
}, character(1)))
sample
rnbinom(60,size=1,mu=10)
c(1:5, 2:6, 3:7)
c(1:5, 2:6, 3:7)+ 0.2
y <- matrix(c(c(1:5, 2:6, 3:7), c(1:5, 2:6, 3:7)+ 0.2), 5, 6)
y
rownames(y) <- paste("Gene",1:5)
colnames(y) <- c("patient1_control", "patient1_treat1", "patient1_treat2", "patient2_control", "patient2_treat1", "patient2_treat2")
sample <- colnames(y) %>%
as.data.frame() %>%
set_colnames("sample") %>%
mutate(
treatment = vapply(.$sample, function(x){
str_split(x, "_")[[1]][2]
}, character(1)),
patient = vapply(.$sample, function(x){
str_split(x, "_")[[1]][1]
}, character(1)))
y
samples
sample
?context
test_file()
test_file(here::here("tests/testthat/test_compute_ssFC.R"))
test_file(here::here("tests/testthat/test_compute_ssFC.R"))
test_file(here::here("tests/testthat/test_compute_ssFC.R"))
?expect_output
rep(c(1, 2, 1,2), each = 4)
y
logFC <- matrix(rep(c(1, 2, 1,2), each = 5), 5, 4)
logFC
structure(
c(`chr1:10` = 1L, `chr1:30` = 2L, `chr1:40` = 1L), .Dim = 3L,
.Dimnames = structure(list(c("chr1:10", "chr1:30", "chr1:40")), .Names = ""),
class = "table"
)
?expect_identical
expect_equal(ssFC, logFC)
ssFC <- compute_ssFC(y, sample, factor = "patient", control = "control")
expect_equal(ssFC, logFC)
logFC
rownames(logFC) <- paste("Gene",1:5)
colnames(logFC) <- c("patient1_treat1", "patient1_treat2",  "patient2_treat1", "patient2_treat2")
ssFC
logFC
expect_equal(ssFC, logFC)
test_file(here::here("tests/testthat/test_compute_ssFC.R"))
file_coverage("R/compute_ssFC.R", "tests/testthat/test_compute_ssFC.R")
covr <- file_coverage("R/compute_ssFC.R", "tests/testthat/test_compute_ssFC.R")
report(covr)
sample_nofactor <- colnames(y) %>%
as.data.frame() %>%
set_colnames("sample") %>%
mutate(
treatment = vapply(.$sample, function(x){
str_split(x, "_")[[1]][2]
}, character(1)))
sample_notreat <- colnames(y) %>%
as.data.frame() %>%
set_colnames("sample") %>%
mutate(
patient = vapply(.$sample, function(x){
str_split(x, "_")[[1]][1]
}, character(1)))
sample_noCont <- sample %>%
mutate(treatment = ifelse(treatment == "control", "treatment1", treatment))
sample_wrongDim <- sample[,1:5]
sample %>%
mutate(treatment = "control")
compute_ssFC(NULL, NULL, "patient", "control")
?expect_error
sample_noTreat <- sample %>%
mutate(treatment = "control")
compute_ssFC(y, sample_wrongDim, factor = "patient", control = "control")
sample_wrongDim <- sample[,1:5]
compute_ssFC(y, sample_wrongDim, factor = "patient", control = "control")
sample[, 1:5]
sample[, c(1:5)]
sample
sample_wrongDim <- sample[1:5,]
compute_ssFC(y, sample_wrongDim, factor = "patient", control = "control")
expect_error(compute_ssFC(y, sample_wrongDim, factor = "patient", control = "control"), "Sample metadata does not match with logCPM")
compute_ssFC(y, sample_nofactor, factor = "patient", control = "control")
sample_onlyContr <- sample %>%
mutate(treatment = "control")
compute_ssFC(y, sample_notreat, factor = "patient", control = "control")
compute_ssFC(y, sample_noCont, factor = "patient", control = "control")
compute_ssFC(y, onlyContr, factor = "patient", control = "control")
compute_ssFC(y, sample_onlyContr, factor = "patient", control = "control")
test_file(here::here("tests/testthat/test_compute_ssFC.R"))
devtools::build()
library(SSPT)
test_file(here::here("tests/testthat/test_compute_ssFC.R"))
