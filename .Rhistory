?file_coverage
parent.frame()
use_package("ensembldb", type = "Suggests")
?mad
?left_join.tbl_lazy
?var
use_r("SSPT")
head(metadata_example)
metadata_example <- dplyr::select(metadata_example, -n)
head(metadata_example)
use_data(metadata_example, overwrite = TRUE)
metadata_example <- dplyr::select(metadata_example, -PR)
use_data(metadata_example, overwrite = TRUE)
paste0(tempdir(),"BminsI.rda")
library(devtools)
load_all()
?convertIdentifiers
search()
use_package("org.Hs.eg.db")
?SSPT::normaliseByPermutation
require(AnnotationHub)
require(ensembldb)
# convert rownamews of logCPM from gene ids to gene entrez IDs through `AnnotationHub`
ah <- AnnotationHub()
ah <- subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM_example) <- mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
#compute weighted single sample logFCs
ls <- weight_ssFC(logCPM_example, metadata = metadata_example,
factor = "patient", control = "Vehicle")
# explore all species and databases supported by graphite
graphite::pathwayDatabases()
weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "BminsI.rds")
# compute test perturbation scores
ssPertScore <- perturbationScore(ls$logFC, filePath = "BminsI.rds")
# generate permuted perturbation scores
permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
NB = 100, filePath = "BminsI.rds", weight = ls$weight)
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
head(normalisedScores)
?p.adjust
document()
library(SSPT)
?SSPT::normaliseByPermutation
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
q()
q
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
head(normalisedScores)
dplyr::filter(normalisedScores, adjPvalue < 0.05)
dplyr::filter(normalisedScores, pvalue < 0.05)
normalisedScores %>%
split(f = .$sample) %>%
lapply(mutate, adjPvalue = p.adjust(pvalue, "fdr"))
normalisedScores %>%
split(f = .$sample) %>%
lapply(mutate, adjPvalue = p.adjust(pvalue, "fdr")) %>%
bind_rows() %>%
dplyr::filter(adjPvalue < 0.;05)
normalisedScores %>%
split(f = .$sample) %>%
lapply(mutate, adjPvalue = p.adjust(pvalue, "fdr")) %>%
bind_rows() %>%
dplyr::filter(adjPvalue < 0.05)
getwd()
logCPM <- readRDS("/Users/wenjunliu/GSE800098/output/logCPM.rds")
## prepare example data, take 8 patients and only keep the Vehicle & E2 treatment
sam2keep <- stringr::str_subset(colnames(logCPM), "Vehicle_|E2_")
sam2keep
length("/Users/wenjunliu/SSPT")
length(sam2keep)
logCPM_example <- logCPM[, sam2keep]
use_data(logCPM_example, overwrite = TRUE)
rownames(logCPM_example) <- mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
#compute weighted single sample logFCs
ls <- weight_ssFC(logCPM_example, metadata = metadata_example,
factor = "patient", control = "Vehicle")
# explore all species and databases supported by graphite
graphite::pathwayDatabases()
weightedAdjMatrix(species = "hsapiens",
database = "kegg",
outputDir = paste0(tempdir(),"BminsI.rda"))
# compute test perturbation scores
ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
# generate permuted perturbation scores
permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
NB = 100, filePath = "BminsI.rds", weight = ls$weight)
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
document()
library(SSPT)
?SSPT::normaliseByPermutation
permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
NB = 100, filePath = paste0(tempdir(),"BminsI.rda"), weight = ls$weight)
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
#' weightedAdjMatrix(species = "hsapiens",
#' database = "kegg",
#' outputDir = paste0(tempdir(),"BminsI.rda"))
#'
#' # compute test perturbation scores
#' ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
#' # generate permuted perturbation scores
#' permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
#'  NB = 100, filePath = paste0(tempdir(),"BminsI.rda"), weight = ls$weight)
#' normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normaliseByPermutation <- function(permutedScore, testScore, pAdj_method = "fdr"){
summary_func <- function(x){c(MAD = mad(x), MEDIAN = median(x))}
summaryScore <- as.data.frame(t(sapply(permutedScore, summary_func)))
summaryScore <- rownames_to_column(summaryScore,"gs_name")
summaryScore <- filter(summaryScore, summaryScore$MAD != 0)
summaryScore <- left_join(summaryScore, testScore, by = "gs_name")
mutate(summaryScore,
robustZ = (summaryScore$tA - summaryScore$MEDIAN)/summaryScore$MAD
# ,
# pvalue = 2*pnorm(-abs(summaryScore$robustZ)),
# adjPvalue = p.adjust(summaryScore$pvalue, method = pAdj_method)
)
}
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
str(normalisedScores)
#' weightedAdjMatrix(species = "hsapiens",
#' database = "kegg",
#' outputDir = paste0(tempdir(),"BminsI.rda"))
#'
#' # compute test perturbation scores
#' ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
#' # generate permuted perturbation scores
#' permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
#'  NB = 100, filePath = paste0(tempdir(),"BminsI.rda"), weight = ls$weight)
#' normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normaliseByPermutation <- function(permutedScore, testScore, pAdj_method = "fdr"){
summary_func <- function(x){c(MAD = mad(x), MEDIAN = median(x))}
summaryScore <- as.data.frame(t(sapply(permutedScore, summary_func)))
summaryScore <- rownames_to_column(summaryScore,"gs_name")
summaryScore <- filter(summaryScore, summaryScore$MAD != 0)
summaryScore <- left_join(summaryScore, testScore, by = "gs_name")
mutate(summaryScore,
robustZ = (summaryScore$tA - summaryScore$MEDIAN)/summaryScore$MAD,
pvalue = 2*pnorm(-abs(summaryScore$robustZ)),
adjPvalue = p.adjust(summaryScore$pvalue, method = pAdj_method))
}
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
#' weightedAdjMatrix(species = "hsapiens",
#' database = "kegg",
#' outputDir = paste0(tempdir(),"BminsI.rda"))
#'
#' # compute test perturbation scores
#' ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
#' # generate permuted perturbation scores
#' permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
#'  NB = 100, filePath = paste0(tempdir(),"BminsI.rda"), weight = ls$weight)
#' normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normaliseByPermutation <- function(permutedScore, testScore, pAdj_method = "fdr"){
summary_func <- function(x){c(MAD = mad(x), MEDIAN = median(x))}
summaryScore <- as.data.frame(t(sapply(permutedScore, summary_func)))
summaryScore <- rownames_to_column(summaryScore,"gs_name")
summaryScore <- filter(summaryScore, summaryScore$MAD != 0)
summaryScore <- left_join(summaryScore, testScore, by = "gs_name")
mutate(summaryScore,
robustZ = (summaryScore$tA - summaryScore$MEDIAN)/summaryScore$MAD)
mutate(summaryScore, pvalue = 2*pnorm(-abs(summaryScore$robustZ)))
muatate(summaryScore, adjPvalue = p.adjust(summaryScore$pvalue, method = pAdj_method))
}
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
mutate(normalisedScores, pvalue = 2*pnorm(-abs(normalisedScores$robustZ)))
#' weightedAdjMatrix(species = "hsapiens",
#' database = "kegg",
#' outputDir = paste0(tempdir(),"BminsI.rda"))
#'
#' # compute test perturbation scores
#' ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
#' # generate permuted perturbation scores
#' permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
#'  NB = 100, filePath = "BminsI.rds", weight = ls$weight)
#' normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normaliseByPermutation <- function(permutedScore, testScore, pAdj_method = "fdr"){
summary_func <- function(x){c(MAD = mad(x), MEDIAN = median(x))}
summaryScore <- as.data.frame(t(sapply(permutedScore, summary_func)))
summaryScore <- rownames_to_column(summaryScore,"gs_name")
summaryScore <- filter(summaryScore, summaryScore$MAD != 0)
summaryScore <- left_join(summaryScore, testScore, by = "gs_name")
mutate(summaryScore,
robustZ = (summaryScore$tA - summaryScore$MEDIAN)/summaryScore$MAD,
pvalue = 2*pnorm(-abs(as.numeric(summaryScore$robustZ))),
adjPvalue = p.adjust(summaryScore$pvalue, method = pAdj_method))
}
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
head(ssPertScore)
head(permutedScore[[1]])
#' weightedAdjMatrix(species = "hsapiens",
#' database = "kegg",
#' outputDir = paste0(tempdir(),"BminsI.rda"))
#'
#' # compute test perturbation scores
#' ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
#' # generate permuted perturbation scores
#' permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
#'  NB = 100, filePath = "BminsI.rds", weight = ls$weight)
#' normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normaliseByPermutation <- function(permutedScore, testScore, pAdj_method = "fdr"){
summary_func <- function(x){c(MAD = mad(x), MEDIAN = median(x))}
summaryScore <- as.data.frame(t(sapply(permutedScore, summary_func)))
summaryScore <- rownames_to_column(summaryScore,"gs_name")
summaryScore <- filter(summaryScore, summaryScore$MAD != 0)
summaryScore <- left_join(summaryScore, testScore, by = "gs_name")
mutate(summaryScore,
robustZ = (summaryScore$tA - summaryScore$MEDIAN)/summaryScore$MAD)
mutate(summaryScore,
pvalue = 2*pnorm(-abs(summaryScore$robustZ)))
mutate(summaryScore,
adjPvalue = p.adjust(summaryScore$pvalue, method = pAdj_method))
}
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
#' weightedAdjMatrix(species = "hsapiens",
#' database = "kegg",
#' outputDir = paste0(tempdir(),"BminsI.rda"))
#'
#' # compute test perturbation scores
#' ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
#' # generate permuted perturbation scores
#' permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
#'  NB = 100, filePath = "BminsI.rds", weight = ls$weight)
#' normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normaliseByPermutation <- function(permutedScore, testScore, pAdj_method = "fdr"){
summary_func <- function(x){c(MAD = mad(x), MEDIAN = median(x))}
summaryScore <- as.data.frame(t(sapply(permutedScore, summary_func)))
summaryScore <- rownames_to_column(summaryScore,"gs_name")
summaryScore <- filter(summaryScore, summaryScore$MAD != 0)
summaryScore <- left_join(summaryScore, testScore, by = "gs_name")
mutate(summaryScore,
robustZ = (summaryScore$tA - summaryScore$MEDIAN)/summaryScore$MAD)
# mutate(summaryScore,
#        pvalue = 2*pnorm(-abs(summaryScore$robustZ)))
# mutate(summaryScore,
#        adjPvalue = p.adjust(summaryScore$pvalue, method = pAdj_method))
}
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
str(normalisedScores)
#' weightedAdjMatrix(species = "hsapiens",
#' database = "kegg",
#' outputDir = paste0(tempdir(),"BminsI.rda"))
#'
#' # compute test perturbation scores
#' ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
#' # generate permuted perturbation scores
#' permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
#'  NB = 100, filePath = "BminsI.rds", weight = ls$weight)
#' normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normaliseByPermutation <- function(permutedScore, testScore, pAdj_method = "fdr"){
summary_func <- function(x){c(MAD = mad(x), MEDIAN = median(x))}
summaryScore <- as.data.frame(t(sapply(permutedScore, summary_func)))
summaryScore <- rownames_to_column(summaryScore,"gs_name")
summaryScore <- filter(summaryScore, summaryScore$MAD != 0)
summaryScore <- left_join(summaryScore, testScore, by = "gs_name")
mutate(summaryScore,
robustZ = (summaryScore$tA - summaryScore$MEDIAN)/summaryScore$MAD)
mutate(summaryScore,
pvalue = abs(summaryScore$robustZ))
# pvalue = 2*pnorm(-abs(summaryScore$robustZ)))
mutate(summaryScore,
adjPvalue = p.adjust(summaryScore$pvalue, method = pAdj_method))
}
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
#' weightedAdjMatrix(species = "hsapiens",
#' database = "kegg",
#' outputDir = paste0(tempdir(),"BminsI.rda"))
#'
#' # compute test perturbation scores
#' ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
#' # generate permuted perturbation scores
#' permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
#'  NB = 100, filePath = "BminsI.rds", weight = ls$weight)
#' normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normaliseByPermutation <- function(permutedScore, testScore, pAdj_method = "fdr"){
summary_func <- function(x){c(MAD = mad(x), MEDIAN = median(x))}
summaryScore <- as.data.frame(t(sapply(permutedScore, summary_func)))
summaryScore <- rownames_to_column(summaryScore,"gs_name")
summaryScore <- filter(summaryScore, summaryScore$MAD != 0)
summaryScore <- left_join(summaryScore, testScore, by = "gs_name")
mutate(summaryScore,
robustZ = (summaryScore$tA - summaryScore$MEDIAN)/summaryScore$MAD)
# mutate(summaryScore,
#        pvalue = abs(summaryScore$robustZ))
#        # pvalue = 2*pnorm(-abs(summaryScore$robustZ)))
# mutate(summaryScore,
#        adjPvalue = p.adjust(summaryScore$pvalue, method = pAdj_method))
}
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
head(normalisedScores)
str(normalisedScores)
mutate(normalisedScores, pvalue = 2*pnorm(-abs(robustZ)))
#' weightedAdjMatrix(species = "hsapiens",
#' database = "kegg",
#' outputDir = paste0(tempdir(),"BminsI.rda"))
#'
#' # compute test perturbation scores
#' ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
#' # generate permuted perturbation scores
#' permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
#'  NB = 100, filePath = "BminsI.rds", weight = ls$weight)
#' normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normaliseByPermutation <- function(permutedScore, testScore, pAdj_method = "fdr"){
summary_func <- function(x){c(MAD = mad(x), MEDIAN = median(x))}
summaryScore <- as.data.frame(t(sapply(permutedScore, summary_func)))
summaryScore <- rownames_to_column(summaryScore,"gs_name")
summaryScore <- filter(summaryScore, summaryScore$MAD != 0)
summaryScore <- left_join(summaryScore, testScore, by = "gs_name")
summaryScore <- mutate(summaryScore,
robustZ = (summaryScore$tA - summaryScore$MEDIAN)/summaryScore$MAD)
summaryScore <- mutate(summaryScore,
pvalue = 2*pnorm(-abs(summaryScore$robustZ)))
summaryScore <- mutate(summaryScore,
adjPvalue = p.adjust(summaryScore$pvalue, method = pAdj_method))
}
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
head(normalisedScores)
#' weightedAdjMatrix(species = "hsapiens",
#' database = "kegg",
#' outputDir = paste0(tempdir(),"BminsI.rda"))
#'
#' # compute test perturbation scores
#' ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
#' # generate permuted perturbation scores
#' permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
#'  NB = 100, filePath = "BminsI.rds", weight = ls$weight)
#' normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normaliseByPermutation <- function(permutedScore, testScore, pAdj_method = "fdr"){
summary_func <- function(x){c(MAD = mad(x), MEDIAN = median(x))}
summaryScore <- as.data.frame(t(sapply(permutedScore, summary_func)))
summaryScore <- rownames_to_column(summaryScore,"gs_name")
summaryScore <- filter(summaryScore, summaryScore$MAD != 0)
summaryScore <- left_join(summaryScore, testScore, by = "gs_name")
summaryScore <- mutate(summaryScore,
robustZ = (summaryScore$tA - summaryScore$MEDIAN)/summaryScore$MAD)
summaryScore <- mutate(summaryScore,
pvalue = 2*pnorm(-abs(summaryScore$robustZ)))
summaryScore <- split(summaryScore, f = summaryScore$sample)
summmaryScore <- lapply(summaryScore, function(x){p.adjust(x$pvalue, method = pAdj_method)})
summaryScore <- bind_rows(summaryScore)
}
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
head(normalisedScores)
#' weightedAdjMatrix(species = "hsapiens",
#' database = "kegg",
#' outputDir = paste0(tempdir(),"BminsI.rda"))
#'
#' # compute test perturbation scores
#' ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
#' # generate permuted perturbation scores
#' permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
#'  NB = 100, filePath = "BminsI.rds", weight = ls$weight)
#' normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normaliseByPermutation <- function(permutedScore, testScore, pAdj_method = "fdr"){
summary_func <- function(x){c(MAD = mad(x), MEDIAN = median(x))}
summaryScore <- as.data.frame(t(sapply(permutedScore, summary_func)))
summaryScore <- rownames_to_column(summaryScore,"gs_name")
summaryScore <- filter(summaryScore, summaryScore$MAD != 0)
summaryScore <- left_join(summaryScore, testScore, by = "gs_name")
summaryScore <- mutate(summaryScore,
robustZ = (summaryScore$tA - summaryScore$MEDIAN)/summaryScore$MAD)
summaryScore <- mutate(summaryScore,
pvalue = 2*pnorm(-abs(summaryScore$robustZ)))
summaryScore <- split(summaryScore, f = summaryScore$sample)
summmaryScore <- lapply(summaryScore, function(x){mutate(x, adjPvalue = p.adjust(x$pvalue, method = pAdj_method))})
summaryScore <- bind_rows(summaryScore)
}
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
head(normalisedScores)
#' weightedAdjMatrix(species = "hsapiens",
#' database = "kegg",
#' outputDir = paste0(tempdir(),"BminsI.rda"))
#'
#' # compute test perturbation scores
#' ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
#' # generate permuted perturbation scores
#' permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
#'  NB = 100, filePath = "BminsI.rds", weight = ls$weight)
#' normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normaliseByPermutation <- function(permutedScore, testScore, pAdj_method = "fdr"){
summary_func <- function(x){c(MAD = mad(x), MEDIAN = median(x))}
summaryScore <- as.data.frame(t(sapply(permutedScore, summary_func)))
summaryScore <- rownames_to_column(summaryScore,"gs_name")
summaryScore <- filter(summaryScore, summaryScore$MAD != 0)
summaryScore <- left_join(summaryScore, testScore, by = "gs_name")
summaryScore <- mutate(summaryScore,
robustZ = (summaryScore$tA - summaryScore$MEDIAN)/summaryScore$MAD)
summaryScore <- mutate(summaryScore,
pvalue = 2*pnorm(-abs(summaryScore$robustZ)))
summaryScore <- split(summaryScore, f = summaryScore$sample)
# summmaryScore <- lapply(summaryScore, function(x){mutate(x, adjPvalue = p.adjust(x$pvalue, method = pAdj_method))})
# summaryScore <- bind_rows(summaryScore)
}
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
head(normalisedScores)
#' weightedAdjMatrix(species = "hsapiens",
#' database = "kegg",
#' outputDir = paste0(tempdir(),"BminsI.rda"))
#'
#' # compute test perturbation scores
#' ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
#' # generate permuted perturbation scores
#' permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
#'  NB = 100, filePath = "BminsI.rds", weight = ls$weight)
#' normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normaliseByPermutation <- function(permutedScore, testScore, pAdj_method = "fdr"){
summary_func <- function(x){c(MAD = mad(x), MEDIAN = median(x))}
summaryScore <- as.data.frame(t(sapply(permutedScore, summary_func)))
summaryScore <- rownames_to_column(summaryScore,"gs_name")
summaryScore <- filter(summaryScore, summaryScore$MAD != 0)
summaryScore <- left_join(summaryScore, testScore, by = "gs_name")
summaryScore <- mutate(summaryScore,
robustZ = (summaryScore$tA - summaryScore$MEDIAN)/summaryScore$MAD)
summaryScore <- mutate(summaryScore,
pvalue = 2*pnorm(-abs(summaryScore$robustZ)))
summaryScore <- split(summaryScore, f = summaryScore$sample)
summmaryScore <- lapply(summaryScore, function(x){mutate(x, adjPvalue = p.adjust(x$pvalue, method = pAdj_method))})
# summaryScore <- bind_rows(summaryScore)
}
#' weightedAdjMatrix(species = "hsapiens",
#' database = "kegg",
#' outputDir = paste0(tempdir(),"BminsI.rda"))
#'
#' # compute test perturbation scores
#' ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
#' # generate permuted perturbation scores
#' permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
#'  NB = 100, filePath = "BminsI.rds", weight = ls$weight)
#' normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normaliseByPermutation <- function(permutedScore, testScore, pAdj_method = "fdr"){
summary_func <- function(x){c(MAD = mad(x), MEDIAN = median(x))}
summaryScore <- as.data.frame(t(sapply(permutedScore, summary_func)))
summaryScore <- rownames_to_column(summaryScore,"gs_name")
summaryScore <- filter(summaryScore, summaryScore$MAD != 0)
summaryScore <- left_join(summaryScore, testScore, by = "gs_name")
summaryScore <- mutate(summaryScore,
robustZ = (summaryScore$tA - summaryScore$MEDIAN)/summaryScore$MAD)
summaryScore <- mutate(summaryScore,
pvalue = 2*pnorm(-abs(summaryScore$robustZ)))
summaryScore <- split(summaryScore, f = summaryScore$sample)
summmaryScore <- lapply(summaryScore, function(x){mutate(x, adjPvalue = p.adjust(x$pvalue, method = pAdj_method))})
bind_rows(summaryScore)
}
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
head(normalisedScores)
#' weightedAdjMatrix(species = "hsapiens",
#' database = "kegg",
#' outputDir = paste0(tempdir(),"BminsI.rda"))
#'
#' # compute test perturbation scores
#' ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
#' # generate permuted perturbation scores
#' permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
#'  NB = 100, filePath = "BminsI.rds", weight = ls$weight)
#' normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normaliseByPermutation <- function(permutedScore, testScore, pAdj_method = "fdr"){
summary_func <- function(x){c(MAD = mad(x), MEDIAN = median(x))}
summaryScore <- as.data.frame(t(sapply(permutedScore, summary_func)))
summaryScore <- rownames_to_column(summaryScore,"gs_name")
summaryScore <- filter(summaryScore, summaryScore$MAD != 0)
summaryScore <- left_join(summaryScore, testScore, by = "gs_name")
summaryScore <- mutate(summaryScore,
robustZ = (summaryScore$tA - summaryScore$MEDIAN)/summaryScore$MAD)
summaryScore <- mutate(summaryScore,
pvalue = 2*pnorm(-abs(summaryScore$robustZ)))
summaryScore <- split(summaryScore, f = summaryScore$sample)
summmaryScore <- lapply(summaryScore, function(x){x <- mutate(x, adjPvalue = p.adjust(x$pvalue, method = pAdj_method))})
bind_rows(summaryScore)
}
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
head(normalisedScores)
#' weightedAdjMatrix(species = "hsapiens",
#' database = "kegg",
#' outputDir = paste0(tempdir(),"BminsI.rda"))
#'
#' # compute test perturbation scores
#' ssPertScore <- perturbationScore(ls$logFC, paste0(tempdir(),"BminsI.rda"))
#' # generate permuted perturbation scores
#' permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2,
#'  NB = 100, filePath = "BminsI.rds", weight = ls$weight)
#' normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normaliseByPermutation <- function(permutedScore, testScore, pAdj_method = "fdr"){
summary_func <- function(x){c(MAD = mad(x), MEDIAN = median(x))}
summaryScore <- as.data.frame(t(sapply(permutedScore, summary_func)))
summaryScore <- rownames_to_column(summaryScore,"gs_name")
summaryScore <- filter(summaryScore, summaryScore$MAD != 0)
summaryScore <- left_join(summaryScore, testScore, by = "gs_name")
summaryScore <- mutate(summaryScore,
robustZ = (summaryScore$tA - summaryScore$MEDIAN)/summaryScore$MAD)
summaryScore <- mutate(summaryScore,
pvalue = 2*pnorm(-abs(summaryScore$robustZ)))
summaryScore <- split(summaryScore, f = summaryScore$sample)
summmaryScore <- lapply(summaryScore, mutate, adjPvalue = p.adjust(pvalue, "fdr"))
bind_rows(summaryScore)
}
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
head(normalisedScores)
document()
rm(list = c("normaliseByPermutation"))
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
head(normalisedScores)
document()
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
head(normalisedScores)
document()
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
head(normalisedScores)
filter(normalisedScores, adjPvalue < 0.05)
table(normalisedScores$sample)
head(logCPM_example)
