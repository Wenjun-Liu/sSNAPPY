BPPARAM = BPPARAM),
times = 1L
)
library(AnnotationHub)
library(magrittr)
library(devtools)
library(stringr)
library(testthat)
library(Rcpp)
library(microbenchmark)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
load_all()
system.time(ls <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", control = "Vehicle"))
# this now takes ~20 seconds to run
system.time(ssPertScore <- perturbationScore(ls$logFC, here::here("data/BminsI.rds")))
document()
load_all()
system.time(ls <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", control = "Vehicle"))
# this now takes ~20 seconds to run
system.time(ssPertScore <- perturbationScore(ls$logFC, here::here("data/BminsI.rds")))
# Rcpp function took around 18s, while the R one takes 43 on its own and 52 with BIOCParallel
microbenchmark(
"R" = {test1 <- normaliseByPermutation(logCPM, metadata, factor = "patient",
control = "Vehicle", scores = ssPertScore,
weight = ls$weight, NB = 100,
filePath = here::here("data/BminsI.rds"))},
"RCPP" = {test2 <- normaliseByPermutation_RCPP(logCPM = logCPM, NB= 100, numOfTreat = 4, weight = ls$weight,
filePath = here::here("data/BminsI.rds"), scores = ssPertScore)},
# "BIOCParallel" = {test3 <- bplapply(BminsI,.ssPertScore, weightedFC = weightedFC, BPPARAM = BPPARAM)},
times = 1
)
2627/60
test2
head(test1)
head(test2)
load_all()
# this now takes ~20 seconds to run
system.time(ssPertScore <- perturbationScore(ls$logFC, here::here("data/BminsI.rds")))
load_all()
# this now takes ~20 seconds to run
system.time(ssPertScore <- perturbationScore(ls$logFC, here::here("data/BminsI.rds")))
load_all()
# this now takes ~20 seconds to run
system.time(ssPertScore <- perturbationScore(ls$logFC, here::here("data/BminsI.rds")))
load_all()
microbenchmark(
"RCPP" = {ssPertScore <- perturbationScore(ls$logFC, here::here("data/BminsI.rds"))},
"RCPP_alt" = {ssPertScore_alt <- perturbationScore_alt(ls$logFC, here::here("data/BminsI.rds"))},
"R"= {perturbationScore_R(ls$logFC, here::here("data/BminsI.rds"))},
times = 1
)
load_all()
microbenchmark(
"RCPP" = {ssPertScore <- perturbationScore(ls$logFC, here::here("data/BminsI.rds"))},
"RCPP_alt" = {ssPertScore_alt <- perturbationScore_alt(ls$logFC, here::here("data/BminsI.rds"))},
"R"= {perturbationScore_R(ls$logFC, here::here("data/BminsI.rds"))},
times = 1
)
load_all()
microbenchmark(
"RCPP" = {ssPertScore <- perturbationScore(ls$logFC, here::here("data/BminsI.rds"))},
"RCPP_alt" = {ssPertScore_alt <- perturbationScore_alt(ls$logFC, here::here("data/BminsI.rds"))},
"R"= {perturbationScore_R(ls$logFC, here::here("data/BminsI.rds"))},
times = 1
)
load_all()
microbenchmark(
"RCPP" = {ssPertScore <- perturbationScore(ls$logFC, here::here("data/BminsI.rds"))},
"RCPP_alt" = {ssPertScore_alt <- perturbationScore_oneP(ls$logFC, here::here("data/BminsI.rds"))},
"R"= {perturbationScore_R(ls$logFC, here::here("data/BminsI.rds"))},
times = 1
)
load_all()
microbenchmark(
"RCPP" = {ssPertScore <- perturbationScore(ls$logFC, here::here("data/BminsI.rds"))},
"RCPP_alt" = {ssPertScore_alt <- perturbationScore_oneP(ls$logFC, here::here("data/BminsI.rds"))},
"R"= {perturbationScore_R(ls$logFC, here::here("data/BminsI.rds"))},
times = 1
)
?setequal
covr <- file_coverage("R/compute_ssFC.R", "tests/testthat/test_compute_ssFC.R")
library(covr)
covr <- file_coverage("R/compute_ssFC.R", "tests/testthat/test_compute_ssFC.R")
test_file(
"tests/testthat/test_compute_ssFC.R"
)
# Stimulate logCPM matrix for 5 genes and 6 sample
# 6 samples are from 2 patients and 3 treatment levels: Control, Treat1, Treat2
y <- matrix(c(c(1:5, 2:6, 3:7), c(1:5, 2:6, 3:7)+ 0.2), 5, 6)
rownames(y) <- paste("Gene",1:5)
colnames(y) <- c("patient1_control", "patient1_treat1", "patient1_treat2", "patient2_control", "patient2_treat1", "patient2_treat2")
sample <- colnames(y) %>%
as.data.frame()
colnames(sample) <- c("sample")
sample <- sample %>%
dplyr::mutate(
treatment = vapply(.$sample, function(x){
stringr::str_split(x, "_")[[1]][2]
}, character(1)),
patient = vapply(.$sample, function(x){
stringr::str_split(x, "_")[[1]][1]
}, character(1)))
logFC <- matrix(rep(c(1, 2, 1,2), each = 5), 5, 4)
rownames(logFC) <- paste("Gene",1:5)
colnames(logFC) <- c("patient1_treat1", "patient1_treat2",  "patient2_treat1", "patient2_treat2")
weight <- rep(0.2, 5)
weighted_FC <- matrix(rep(c(0.2, 0.4 ,0.2, 0.4), each = 5), 5, 4)
rownames(weighted_FC) <- paste("ENTREZID:Gene",1:5)
colnames(weighted_FC) <- c("patient1_treat1", "patient1_treat2",  "patient2_treat1", "patient2_treat2")
# Generate sample metadata df that will produce error
sample_nofactor <- colnames(y) %>%
as.data.frame() %>%
magrittr::set_colnames("sample") %>%
dplyr::mutate(
treatment = vapply(.$sample, function(x){
stringr::str_split(x, "_")[[1]][2]
}, character(1)))
sample_notreat <- colnames(y) %>%
as.data.frame() %>%
magrittr::set_colnames("sample") %>%
dplyr::mutate(
patient = vapply(.$sample, function(x){
stringr::str_split(x, "_")[[1]][1]
}, character(1)))
sample_noCont <- sample %>%
dplyr::mutate(treatment = ifelse(treatment == "control", "treatment1", treatment))
sample_wrongDim <- sample[1:5,]
sample_onlyContr <- sample %>%
dplyr::mutate(treatment = "control")
# Generate logCPM matrix with random NA values
y_NA <- apply(y, 2, function(x){
x[sample(c(1:nrow(y)), 1)] <-NA; x
})
.compute_ssFC(y, sample_wrongDim, factor = "patient", control = "control")
document()
covr <- file_coverage("R/compute_ssFC.R", "tests/testthat/test_compute_ssFC.R")
test_file(
"tests/testthat/test_compute_ssFC.R"
)
.compute_ssFC(y, sample, factor = "patient", control = "control")
sample <- as.data.frame(sample)
.compute_ssFC(y, sample, factor = "patient", control = "control")
document()
covr <- file_coverage("R/compute_ssFC.R", "tests/testthat/test_compute_ssFC.R")
test_file(
"tests/testthat/test_compute_ssFC.R"
)
covr <- file_coverage("R/compute_ssFC.R", "tests/testthat/test_compute_ssFC.R")
report(cov)
report(covr)
?save
#' @param metadata Sample metadata data frame as described in the details section.
#' @param factor Factor defines how samples can be put into matching pairs (eg. patient).
#' @param control Treatment level that is the control.
#'
#' @importFrom stats approxfun lowess
#' @return A list with two elements:
#' $weight  gene-wise weights;
#' $logFC weighted single sample logFC matrix
#' @example
#' @export
weight_ssFC <- function(logCPM, metadata, factor, control){
ssFC <- .compute_ssFC(logCPM, metadata, factor, control)
varFC <- apply(ssFC, 1, var)
meanCPM <- apply(logCPM, 1, mean)
# make sure varFC & meanCPM are in correct order
meanCPM <- meanCPM[match(names(meanCPM),names(varFC))]
l <- lowess(meanCPM, varFC)
f <- approxfun(l, rule = 2, ties = list("ordered", mean))
weight <- 1/f(meanCPM)
scaled_w <- weight/sum(weight)
rownames(ssFC) <- paste("ENTREZID:", rownames(ssFC), sep = "")
list(
weight = scaled_w,
logFC = ssFC * scaled_w
)
}
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
head(logCPM)
sam2keep <- str_subset(colnames(logCPM), "Vehicle_P|E2_P")
sam2keep
subCPM <- logCPM[1:100, sam2keep]
subCPM
save(subCPM, "logCPM.RData", compress = TRUE)
save(subCPM, "data/logCPM.RData", compress = TRUE)
save(subCPM, "data/", compress = TRUE)
getwd()
save(subCPM, here::here("data/"), compress = TRUE)
save(subCPM, file = here::here("data/LogCPM.RData"), compress = TRUE)
# sam2keep <- str_subset(colnames(logCPM), "Vehicle_P|E2_P")
# logCPM <- logCPM[1:100, sam2keep]
# save(subCPM, file = here::here("data/LogCPM.RData"), compress = TRUE)
metadata %>%
dplyr::validate_grouped_df(sample %in% sam2keep)
sam2keep
# sam2keep <- str_subset(colnames(logCPM), "Vehicle_P|E2_P")
# logCPM <- logCPM[1:100, sam2keep]
# save(subCPM, file = here::here("data/LogCPM.RData"), compress = TRUE)
metadata %>%
dplyr::filter(sample %in% sam2keep)
# sam2keep <- str_subset(colnames(logCPM), "Vehicle_P|E2_P")
# logCPM <- logCPM[1:100, sam2keep]
# save(subCPM, file = here::here("data/LogCPM.RData"), compress = TRUE)
metadata %>%
dplyr::filter(sample %in% sam2keep) %>%
save(file = here::here("data/metadata.RData"))
?use_data_raw
use_data_raw("sam2keep <- str_subset(colnames(logCPM), "Vehicle_P|E2_P")
logCPM <- logCPM[1:100, sam2keep]
save(subCPM, file = here::here("data/LogCPM.RData"), compress = TRUE)
metadata %>%
dplyr::filter(sample %in% sam2keep) %>%
save(file = here::here("data/metadata.RData"))")
""
use_r("data")
?use_package
use_package("AnnotationHub", type = "Suggests")
requireNamespace("AnnotationHub", quietly = TRUE)
?requireNamespace
?str_detect
?mapIds
document()
rm(list = c("weight_ssFC"))
document()
load_all()
library(devtools)
check()
load_all()
document()
?SSPT::weight_ssFC
head(logCPM)
?usethis::use_data
library(AnnotationHub)
library(magrittr)
library(devtools)
library(stringr)
library(testthat)
library(Rcpp)
library(microbenchmark)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
## prepare example data, take 100 genes, 8 patients and only keep the Vehicle & E2 treatment
sam2keep <- str_subset(colnames(logCPM), "Vehicle_P|E2_P")
logCPM <- logCPM[1:100, sam2keep]
logCPM
use_data(logCPM)
metadata <- metadata %>%
dplyr::filter(sample %in% sam2keep) %>%
save(file = here::here("data/metadata.RData"))
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
metadata <- metadata %>%
dplyr::filter(sample %in% sam2keep) %>%
save(file = here::here("data/metadata.RData"))
metadata
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
metadata
metadata <- metadata %>%
dplyr::filter(sample %in% sam2keep)
metadata
use_data(metadata)
load_all()
metadata
graphite::pathwayDatabases()
test <- readRDS("data/BminsI.rds")
names(test)[1:3]
system.time(ls <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", control = "Vehicle"))
system.time(weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "data/BminsI.rds"))
datpT <- .retrieveTopology(species = "hsapiens", database = "kegg", pathwayName = c("Glycolysis / Gluconeogenesis","Citrate cycle (TCA cycle)","Pentose phosphate pathway"))
datpT$`Glycolysis / Gluconeogenesis`
datpT$`Glycolysis / Gluconeogenesis`$activation
beta=c(1,0,0,1,-1,1,0,-1,-1,0,0,1,0,1,-1,0,1,-1,-1,0,0,1,0,1,1)
rel<-c("activation","compound","binding/association","expression","inhibition",
"activation_phosphorylation","phosphorylation","inhibition_phosphorylation",
"inhibition_dephosphorylation","dissociation","dephosphorylation",
"activation_dephosphorylation","state change","activation_indirect effect",
"inhibition_ubiquination","ubiquination", "expression_indirect effect",
"inhibition_indirect effect","repression","dissociation_phosphorylation",
"indirect effect_phosphorylation","activation_binding/association",
"indirect effect","activation_compound","activation_ubiquination")
x <- names(datpT)[[1]]
x11()
x
y <- "activqation"
y <- "activation"
datpT[[x]][[y]] * beta[y]
beta[y]
names(beta)<-rel
datpT[[x]][[y]] * beta[y]
abs(sign(-2))
abs(sign(beta))
beta
beta !=0
beta[beta !=0]
int2keep
int2keep <- names(beta[beta !=0])
int2keep
datpT <- lapply(datpT, function(x)x[names(x)] %in% int2keep)
names(datpT$`Glycolysis / Gluconeogenesis`)
datpT <- .retrieveTopology(species, database, pathwayName)
datpT <- .retrieveTopology(species = "hsapiens", database = "kegg", pathwayName = c("Glycolysis / Gluconeogenesis","Citrate cycle (TCA cycle)","Pentose phosphate pathway"))
datpT <- lapply(datpT, function(x) x[names(x) %in% int2keep] )
names(datpT$`Glycolysis / Gluconeogenesis`)
g2gInteraction <- sapply(rel, function(y){
datpT[[x]][[y]] * beta[y]
}, simplify = FALSE)
g2gInteraction <-   Reduce('+', g2gInteraction)
numDownstream <- Reduce('+', datpT[[x]])
numDownstream <- apply(numDownstream, 2, sum)
numDownstream[numDownstream==0]<-1
g2gInteraction
x
y
datpT[[x]][[y]]
g2gInteraction <- sapply(rel, function(y){
datpT[[x]][[y]] * beta[y]
}, simplify = FALSE)
g2gInteraction <- sapply(int2keep, function(y){
datpT[[x]][[y]] * beta[y]
}, simplify = FALSE)
g2gInteraction
g2gInteraction <-   Reduce('+', g2gInteraction)
g2gInteraction
numDownstream
dim(g2gInteraction)
isSymmetric.matrix(g2gInteraction)
g2gInteraction/numDownstream
load_all()
microbenchmark(
"ori" = {weightedAdjMatrix(species = "hsapiens", database = "kegg",
pathwayName = c("Glycolysis / Gluconeogenesis","Citrate cycle (TCA cycle)","Pentose phosphate pathway"),
outputDir = "BminsI.rds")},
"new" = {weightedAdjMatrix_alt(species = "hsapiens", database = "kegg",
pathwayName = c("Glycolysis / Gluconeogenesis","Citrate cycle (TCA cycle)","Pentose phosphate pathway"),
outputDir = "test.rds")},
time = 5
)
q()
q
microbenchmark(
"ori" = {weightedAdjMatrix(species = "hsapiens", database = "kegg",
pathwayName = c("Glycolysis / Gluconeogenesis","Citrate cycle (TCA cycle)","Pentose phosphate pathway"),
outputDir = "BminsI.rds")},
"new" = {weightedAdjMatrix_alt(species = "hsapiens", database = "kegg",
pathwayName = c("Glycolysis / Gluconeogenesis","Citrate cycle (TCA cycle)","Pentose phosphate pathway"),
outputDir = "test.rds")},
time = 5
)
test1 <- readRDS("data/BminsI.rds")
test2 <- readRDS("test.rds")
test1 <- readRDS("BminsI.rds")
identical(test1, test2)
system.time(weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "data/BminsI.rds"))
microbenchmark(
"ori" = {weightedAdjMatrix(species = "hsapiens", database = "kegg",
outputDir = "data/BminsI.rds")},
"new" = {weightedAdjMatrix_alt(species = "hsapiens", database = "kegg",
outputDir = "data/test.rds")},
times = 1
)
BminsI <- readRDS("data/test.rds")
test <- readRDS("data/test.rds")
BminsI <- readRDS("data/test.rds")
identical(BminsI, test)
covr <- file_coverage("R/pathwayTopology.R", "tests/testthat/test-pathwayTopology.R")
library(covr)
covr <- file_coverage("R/pathwayTopology.R", "tests/testthat/test-pathwayTopology.R")
report(covr)
load_all()
# Rcpp reduces the time by half. Rcpp function for just one pathway then sapply is 0.5 second slower.
microbenchmark(
"RCPP" = {ssPertScore <- perturbationScore(ls$logFC, here::here("data/BminsI.rds"))},
"RCPP_alt" = {ssPertScore_alt <- perturbationScore_alt(ls$logFC, here::here("data/BminsI.rds"))},
times = 1
)
ls$logFC
library(devtools)
library(SSPT)
?SSPT::weight_ssFC
document()
library(SSPT)
?SSPT::weight_ssFC
requireNamespace("AnnotationHub", quietly = TRUE)
ah <- AnnotationHub::AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(stringr::str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
rownames(logCPM) <- AnnotationHub::mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
head(logCPM)
library(AnnotationHub)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
ah <- AnnotationHub()
ah
subset(ah,rdataclass == "EnsDb")
ah$description
subset(ah,rdataclass == "EnsDb", )$description
subset(ah,rdataclass == "EnsDb")
?AnnotationHub
?AnnotationHub::`subset,Hub-method`
subset(ah, str_detect(description, as.character("101")))
subset(ah, stringr::str_detect(description, as.character("101")))
ah <- subset(ah,rdataclass == "EnsDb", )
ah <- subset(ah,rdataclass == "EnsDb" )
subset(ah, stringr::str_detect(description, as.character("101")))
subset(ah,rdataclass == "EnsDb", genome == "GRCh38")
subset(ah,rdataclass == "EnsDb" & genome == "GRCh38")
ah <- AnnotationHub()
subset(ah,rdataclass == "EnsDb" & genome == "GRCh38" & description == "Ensembl 101 EnsDb for Homo sapiens")
ah <- subset(ah,rdataclass == "EnsDb" & genome == "GRCh38")
subset(ah, stringr::str_detect(description, as.character("101")))
ah <- AnnotationHub()
subset(title == "Ensembl 101 EnsDb for Homo sapiens")
subset(ah, title == "Ensembl 101 EnsDb for Homo sapiens")
document()
library(SSPT)
?weight_ssFC
requireNamespace("AnnotationHub", quietly = TRUE)
# convert rownamews of logCPM to gene entrez IDs
ah <- AnnotationHub()
ah <- subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM) <- AnnotationHub::mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
ls <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", control = "Vehicle")
head(logCPM)
head(metadata)
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
## prepare example data, take 100 genes, 8 patients and only keep the Vehicle & E2 treatment
sam2keep <- str_subset(colnames(logCPM), "Vehicle_P|E2_P")
## prepare example data, take 100 genes, 8 patients and only keep the Vehicle & E2 treatment
sam2keep <- stringr::str_subset(colnames(logCPM), "Vehicle_P|E2_P")
sam2keep
metadata <- metadata %>%
dplyr::filter(sample %in% sam2keep)
metadata
use_data(metadata)
use_data(metadata, overwrite = TRUE)
library(devtools)
document()
library(SSPT)
?weighted_FC
?weight_ssFC
requireNamespace("AnnotationHub", quietly = TRUE)
# convert rownamews of logCPM from gene ids to gene entrez IDs
ah <- AnnotationHub()
ah <- subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM) <- AnnotationHub::mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
logCPM
metadata
document()
library(SSPT)
?weighted_ssFC
?weight_ssFC
require(AnnotationHub)
# convert rownamews of logCPM from gene ids to gene entrez IDs
ah <- AnnotationHub()
ah <- subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM) <- AnnotationHub::mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
# Inspect metadata data frame to make sure it has treatment, sample and patient columns
ls <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", control = "Vehicle")
logCPM
library(devtools)
load_all()
library(SSPT)
require(AnnotationHub)
# convert rownamews of logCPM from gene ids to gene entrez IDs
ah <- AnnotationHub()
ah <- subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM) <- AnnotationHub::mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
# Inspect metadata data frame to make sure it has treatment, sample and patient columns
ls <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", control = "Vehicle")
invisible(metadata)
load_all()
library(SSPT)
require(AnnotationHub)
