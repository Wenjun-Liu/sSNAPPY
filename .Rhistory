Comparison = str_remove(Comparison, "treatment"))
}, simplify = FALSE) %>%
bind_rows() %>%
dplyr::filter(FDR < 0.05)
sapply(names(fit), function(x){
fit[[x]]$coefficients %>%
as.data.frame() %>%
dplyr::select(Estimate,
pvalue = `Pr(>|t|)` ) %>%
rownames_to_column("Comparison") %>%
mutate(gs_name = x,
Comparison = str_remove(Comparison, "treatment"))
}, simplify = FALSE) %>%
bind_rows() %>%
split(f = .$Comparison) %>%
lapply(mutate, FDR = p.adjust(pvalue, "fdr")) %>%
bind_rows() %>%
dplyr::filter(FDR < 0.05)
sapply(names(fit), function(x){
fit[[x]]$coefficients %>%
as.data.frame() %>%
dplyr::select(Estimate,
pvalue = `Pr(>|t|)` ) %>%
rownames_to_column("Comparison") %>%
mutate(gs_name = x,
FDR = p.adjust(pvalue, "fdr"),
Comparison = str_remove(Comparison, "treatment"))
}, simplify = FALSE) %>%
bind_rows() %>%
dplyr::filter(FDR < 0.05)
fit <- normalisedScores %>%
left_join(metadata_example) %>%
mutate_at(vars(c("time", "PR")), as.factor) %>%
split(f = .$gs_name) %>%
#.["Estrogen signaling pathway"] %>%
lapply(function(x)lm(robustZ ~ 0 + treatment + time + treatment:PR, data = x)) %>%
lapply(summary)
treat_sig <- sapply(names(fit), function(x){
fit[[x]]$coefficients %>%
as.data.frame() %>%
dplyr::select(Estimate,
pvalue = `Pr(>|t|)` ) %>%
rownames_to_column("Comparison") %>%
mutate(gs_name = x,
FDR = p.adjust(pvalue, "fdr"),
Comparison = str_remove(Comparison, "treatment"))
}, simplify = FALSE) %>%
bind_rows()
treat_sig %>%
dplyr::filter(FDR < 0.05)
fit <- normalisedScores %>%
left_join(metadata_example) %>%
mutate_at(vars(c("time", "PR")), as.factor) %>%
split(f = .$gs_name) %>%
#.["Estrogen signaling pathway"] %>%
lapply(function(x)lm(robustZ ~ 0 + treatment + treatment:PR, data = x)) %>%
lapply(summary)
treat_sig <- sapply(names(fit), function(x){
fit[[x]]$coefficients %>%
as.data.frame() %>%
dplyr::select(Estimate,
pvalue = `Pr(>|t|)` ) %>%
rownames_to_column("Comparison") %>%
mutate(gs_name = x,
FDR = p.adjust(pvalue, "fdr"),
Comparison = str_remove(Comparison, "treatment"))
}, simplify = FALSE) %>%
bind_rows()
treat_sig %>%
dplyr::filter(FDR < 0.05)
fit[[x]]$coefficients %>%
as.data.frame() %>%
dplyr::select(Estimate,
pvalue = `Pr(>|t|)` ) %>%
rownames_to_column("Comparison") %>%
mutate(gs_name = x,
FDR = p.adjust(pvalue, "fdr"),
Comparison = str_remove(Comparison, "treatment|PR"))
treat_sig <- sapply(names(fit), function(x){
fit[[x]]$coefficients %>%
as.data.frame() %>%
dplyr::select(Estimate,
pvalue = `Pr(>|t|)` ) %>%
rownames_to_column("Comparison") %>%
mutate(gs_name = x,
FDR = p.adjust(pvalue, "fdr"),
Comparison = str_remove(Comparison, "treatment|PR"))
}, simplify = FALSE) %>%
bind_rows()
treat_sig %>%
dplyr::filter(FDR < 0.05)
treat_sig %>%
dplyr::filter(FDR < 0.05) %>%
mutate_at(vars(c("Comparison", "gs_name")), as.factor) %>%
dplyr::select(
Comparison, `Perturbation Score` = Estimate,
`Gene-set name` = gs_name,
`P-value` = pvalue,
FDR
) %>%
DT()
library(DT)
treat_sig %>%
dplyr::filter(FDR < 0.05) %>%
mutate_at(vars(c("Comparison", "gs_name")), as.factor) %>%
mutate(Direction = ifelse(Estimate < 0, "Inhibited", "Activation")) %>%
dplyr::select(
Comparison, `Perturbation Score` = Estimate, Direction,
`Gene-set name` = gs_name,
`P-value` = pvalue,
FDR
) %>%
datatable(filter = "top") %>%
formatStyle(
'Perturbation Score', 'Direction',
backgroundColor = styleEqual(c("Down", "Up"), c('lightblue', 'indianred'))
)
treat_sig %>%
dplyr::filter(FDR < 0.05) %>%
mutate_at(vars(c("Comparison", "gs_name")), as.factor) %>%
mutate(Direction = ifelse(Estimate < 0, "Inhibited", "Activation")) %>%
dplyr::select(
Comparison, `Perturbation Score` = Estimate, Direction,
`Gene-set name` = gs_name,
`P-value` = pvalue,
FDR
) %>%
datatable(filter = "top") %>%
formatStyle(
'Perturbation Score', 'Direction',
backgroundColor = styleEqual(c("Inhibited", "Activation"), c('lightblue', 'indianred'))
)
treat_sig %>%
dplyr::filter(FDR < 0.05) %>%
mutate_at(vars(c("Comparison", "gs_name")), as.factor)
?runif
runif(1.2222)
treat_sig %>%
dplyr::filter(FDR < 0.05) %>%
mutate_at(vars(c("Comparison", "gs_name")), as.factor) %>%
mutate_if(is.numeric, formatP)
formatP <- function(p, m = 0.0001){
out <- rep("", length(p))
out[p < m] <- sprintf("%.2e", p[p<m])
out[p >= m] <- sprintf("%.4f", p[p>=m])
out
}
treat_sig %>%
dplyr::filter(FDR < 0.05) %>%
mutate_at(vars(c("Comparison", "gs_name")), as.factor) %>%
mutate_if(is.numeric, formatP)
?sprintf
treat_sig %>%
dplyr::filter(FDR < 0.05) %>%
mutate_at(vars(c("Comparison", "gs_name")), as.factor) %>%
mutate_if(is.numeric, sprintf, "%#.4f")
mutate_if(is.numeric, sprintf, fmt = '%#.4f)
treat_sig %>%
dplyr::filter(FDR < 0.05) %>%
mutate_at(vars(c("Comparison", "gs_name")), as.factor) %>%
mutate_if(is.numeric, sprintf, fmt = '%#.4f')
treat_sig %>%
dplyr::filter(FDR < 0.05) %>%
mutate_at(vars(c("Comparison", "gs_name")), as.factor) %>%
mutate_if(is.numeric, sprintf, fmt = '%#.4f')
treat_sig %>%
dplyr::filter(FDR < 0.05) %>%
mutate_at(vars(c("Comparison", "gs_name")), as.factor) %>%
mutate_if(is.numeric, sprintf, fmt = '%#.4f') %>%
mutate(Direction = ifelse(Estimate < 0, "Inhibited", "Activation")) %>%
dplyr::select(
Comparison, `Perturbation Score` = Estimate, Direction,
`Gene-set name` = gs_name,
`P-value` = pvalue,
FDR
) %>%
datatable(
filter = "top",
options = list(
columnDefs = list(list(targets = "Direction", visible = FALSE))
)) %>%
formatStyle(
'Perturbation Score', 'Direction',
backgroundColor = styleEqual(c("Inhibited", "Activation"), c('lightblue', 'indianred'))
)
treat_sig <- sapply(names(fit), function(x){
fit[[x]]$coefficients %>%
as.data.frame() %>%
dplyr::select(Estimate,
pvalue = `Pr(>|t|)` ) %>%
rownames_to_column("Comparison") %>%
mutate(gs_name = x,
FDR = p.adjust(pvalue, "fdr"),
Comparison = str_remove(Comparison, "treatment|PR"))
}, simplify = FALSE) %>%
bind_rows()
treat_sig
fit[[x]]$coefficients %>%
as.data.frame() %>%
dplyr::select(Estimate,
pvalue = `Pr(>|t|)` ) %>%
rownames_to_column("Comparison") %>%
mutate(gs_name = x,
FDR = p.adjust(pvalue, "fdr"),
Comparison = str_remove_all(Comparison, "treatment|PR"))
treat_sig <- sapply(names(fit), function(x){
fit[[x]]$coefficients %>%
as.data.frame() %>%
dplyr::select(Estimate,
pvalue = `Pr(>|t|)` ) %>%
rownames_to_column("Comparison") %>%
mutate(gs_name = x,
FDR = p.adjust(pvalue, "fdr"),
Comparison = str_remove_all(Comparison, "treatment|PR"))
}, simplify = FALSE) %>%
bind_rows()
treat_sig
treat_sig %>%
dplyr::filter(FDR < 0.05) %>%
mutate_at(vars(c("Comparison", "gs_name")), as.factor) %>%
mutate_if(is.numeric, sprintf, fmt = '%#.4f') %>%
mutate(Direction = ifelse(Estimate < 0, "Inhibited", "Activation")) %>%
dplyr::select(
Comparison, `Perturbation Score` = Estimate, Direction,
`Gene-set name` = gs_name,
`P-value` = pvalue,
FDR
) %>%
datatable(
filter = "top",
options = list(
columnDefs = list(list(targets = "Direction", visible = FALSE))
)) %>%
formatStyle(
'Perturbation Score', 'Direction',
backgroundColor = styleEqual(c("Inhibited", "Activation"), c('lightblue', 'indianred'))
)
?plot_gsNetwork
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05) %>%
split(f = .$sample)
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05) %>%
split(f = .$sample) %>%
lapply(
plot_gsNetwork,
gsTopology = gsTopology,
colorBy = "robustZ"
)
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05) %>%
split(f = .$sample) %>%
lapply(
plot_gsNetwork,
gsTopology = gsTopology,
colorBy = "robustZ",
layout = "kk"
)
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05) %>%
split(f = .$sample) %>%
lapply(
plot_gsNetwork,
gsTopology = gsTopology,
colorBy = "robustZ"
)
plot_grid(
plotlist = pl,
nrow = 1
)
pl <- normalisedScores %>%
dplyr::filter(adjPvalue < 0.05) %>%
split(f = .$sample) %>%
lapply(
plot_gsNetwork,
gsTopology = gsTopology,
colorBy = "robustZ"
)
plot_grid(
plotlist = pl,
nrow = 1
)
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05) %>%
split(f = .$sample)
treat_sig %>%
dplyr::filter(FDR < 0.05)
treat_sig %>%
dplyr::filter(FDR < 0.05) %>%
dplyr::rename(robustZ = Estimate) %>%
split(f = .$Comparison) %>%
lapply(
plot_gsNetwork,
gsTopology = gsTopology,
colorBy = "robustZ"
)
permutedFC
head(logCPM_example)
system.time(permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4, seed = 123))
system.time()
system.time(test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4))
8500/60
load_all()
document()
document()
document()
document()
document()
load_all()
load_all()
load_all()
load_all()
load_all()
load_all()
microbenchmark(
"Parallel_4core" = {test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- permutedPertScore_RCPP_indiPathway(gsTopology[[1]], rownames(gsTopology[[1]], rownames(permutedFC[[1]]), permutedFC, ncol(permutedFC[[1]])))},
times = 5
)
library(microbenchmark)
microbenchmark(
"Parallel_4core" = {test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- permutedPertScore_RCPP_indiPathway(gsTopology[[1]], rownames(gsTopology[[1]], rownames(permutedFC[[1]]), permutedFC, ncol(permutedFC[[1]])))},
times = 5
)
microbenchmark(
"Parallel_4core" = {test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- permutedPertScore_RCPP_indiPathway(X = gsTopology[[1]], pathwayG = rownames(gsTopology[[1]]), expressedG = rownames(permutedFC[[1]]),
permutedFC = permutedFC, newS = ncol(permutedFC[[1]])
)},
times = 5
)
load_all()
microbenchmark(
"Parallel_4core" = {test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- permutedScore_Rcpp_para(XpermutedFC, gsTopology, ncores = 4)},
times = 5
)
microbenchmark(
"Parallel_4core" = {test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- permutedScore_Rcpp_para(permutedFC, gsTopology, ncores = 4)},
times = 5
)
load_all()
microbenchmark(
"Parallel_4core" = {test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- permutedPertScore_RCPP_indiPathway(X = gsTopology[[1]], pathwayG = rownames(gsTopology[[1]]), expressedG = rownames(permutedFC[[1]]),
permutedFC = permutedFC, newS = ncol(permutedFC[[1]])
)},
times = 5
)
To install this package, start R (version "4.2") and enter:
85428.224151 /60
system.time(permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 1000,
ncores = 4, seed = 123))
system.time(permutedScore <- permutedScore_Rcpp_para(permutedFC[1:10], gsTopology, ncores = 4))
3500/60
microbenchmark(
"Parallel_4core" = {test1 <- permutedScore_PARALLEL(permutedFC[1:10], gsTopology, ncores = 4)},
"Rcpp" = {test2 <- permutedScore_Rcpp_para(permutedFC[1:10], gsTopology, ncores = 4)},
times = 5
)
3500/60
microbenchmark(
"Parallel_4core" = {test1 <- permutedScore_PARALLEL(permutedFC[1:10], gsTopology, ncores = 4)},
"Rcpp" = {test2 <- permutedScore_Rcpp_para(permutedFC[1:10], gsTopology, ncores = 4)},
"Rcpp_allin1"  = {test3 <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 10, gsTopology = gsTopology, weight = weightedFC$weight)}
times = 1
)
microbenchmark(
"Parallel_4core" = {test1 <- permutedScore_PARALLEL(permutedFC[1:10], gsTopology, ncores = 4)},
"Rcpp" = {test2 <- permutedScore_Rcpp_para(permutedFC[1:10], gsTopology, ncores = 4)},
"Rcpp_allin1"  = {test3 <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 10, gsTopology = gsTopology, weight = weightedFC$weight)},
times = 1
)
350/60
microbenchmark(
"Parallel_4core" = {
ermutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 100,
ncores = 4, seed = 123)
test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {
ermutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 100,
ncores = 4, seed = 123)
test2 <- permutedScore_Rcpp_para(permutedFC, gsTopology, ncores = 4)},
"Rcpp_allin1"  = {test3 <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 100, gsTopology = gsTopology, weight = weightedFC$weight)},
times = 3
)
microbenchmark(
"Parallel_4core" = {
ermutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4, seed = 123)
test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {
ermutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4, seed = 123)
test2 <- permutedScore_Rcpp_para(permutedFC, gsTopology, ncores = 4)},
"Rcpp_allin1"  = {test3 <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 10, gsTopology = gsTopology, weight = weightedFC$weight)},
times = 3
)
microbenchmark(
"Parallel_4core" = {
permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4, seed = 123)
test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {
permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4, seed = 123)
test2 <- permutedScore_Rcpp_para(permutedFC, gsTopology, ncores = 4)},
"Rcpp_allin1"  = {test3 <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 10, gsTopology = gsTopology, weight = weightedFC$weight)},
times = 3
)
350/60
microbenchmark(
# "Parallel_4core" = {
#     permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
#                                       ncores = 4, seed = 123)
#     test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {
permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 100,
ncores = 4, seed = 123)
test2 <- permutedScore_Rcpp_para(permutedFC, gsTopology, ncores = 4)},
"Rcpp_allin1"  = {test3 <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 100, gsTopology = gsTopology, weight = weightedFC$weight)},
times = 3
)
130/60
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05)
400/60
microbenchmark(
# "Parallel_4core" = {
#     permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
#                                       ncores = 4, seed = 123)
#     test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {
permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 100,
ncores = 8, seed = 123)
test2 <- permutedScore_Rcpp_para(permutedFC, gsTopology, ncores = 8)},
"Rcpp_allin1"  = {test3 <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 100, gsTopology = gsTopology, weight = weightedFC$weight)},
times = 2
)
load_all()
load_all()
microbenchmark(
# "Parallel_4core" = {
#     permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
#                                       ncores = 4, seed = 123)
#     test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp_para" = {
permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 8, seed = 123)
test1 <- permutedScore_Rcpp_para(permutedFC, gsTopology, ncores = 8)},
"Rcpp_Nopara" = {
permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 8, seed = 123)
test2 <- permutedScore_Rcpp(permutedFC, gsTopology)},
"Rcpp_allin1"  = {test3 <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 10, gsTopology = gsTopology, weight = weightedFC$weight)},
times = 2
)
1400/60
dim(logCPM_example)
load_all()
load_all()
length(permutedFC)
microbenchmark(
"passByValue" = {test1 <- permutedScore_Rcpp_para(permutedFC, gsTopology, ncores = 8)},
"passByRef" = {test2 <- permutedScore_Rcpp_para_alt(permutedFC, gsTopology, ncores = 8)},
times = 3
)
load_all()
microbenchmark(
"passByValue" = {test1 <- permutedScore_Rcpp_para(permutedFC, gsTopology, ncores = 8)},
"passByRef" = {test2 <- permutedScore_Rcpp_para_alt(permutedFC, gsTopology, ncores = 8)},
times = 3
)
?build_vignettes
build_vignettes()
load_all()
build_vignettes(install = FALSE)
build_vignettes()
.Last.error.trace
use_package("BiocStyle", type = "Suggests")
BiocManager::install("BiocStyle")
?weightedAdjMatrix
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
if (!requireNamespace("BiocManager", quietly=TRUE))install.packages("BiocManager")
BiocManager::install("SSPT")
library(SSPT)
library(tidyverse)
library(magrittr)
library(ggplot2)
library(cowplot)
library(DT)
# check if samples included in the logCPM matrix and metadata dataframe are identical
setequal(colnames(logCPM_example), metadata_example$sample)
# View sample metadata
metadata_example %>%
datatable()
if (!requireNamespace("AnnotationHub", quietly=TRUE))BiocManager::install("AnnotationHub")
if (!requireNamespace("ensembldb", quietly=TRUE))BiocManager::install("ensembldb")
ah <- AnnotationHub::AnnotationHub()
ah <- AnnotationHub::subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM_example) <- ensembldb::mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
head(logCPM_example)
#compute weighted single sample logFCs
weightedFC <- weight_ssFC(logCPM_example, metadata = metadata_example,
factor = "patient", control = "Vehicle")
head(logCPM_example)
