gsTopology <- retrieve_topology(database = "kegg", species = "hsapiens")
head(names(gsTopology))
gsTopology_sub <- retrieve_topology(
database = "kegg",
species = "hsapiens",
keyword = "metabolism")
head(names(gsTopology_sub))
gsTopology_mult <- retrieve_topology(
database = c("kegg", "reactome"),
species = "hsapiens",
keyword = c("metabolism", "estrogen"))
names(gsTopology_mult)
genePertScore <- raw_gene_pert(weightedFC$weighted_logFC, gsTopology)
pathwayPertScore <- pathway_pert(genePertScore, weightedFC$weighted_logFC)
head(pathwayPertScore)
set.seed(123)
permutedScore <- generate_permuted_scores(
expreMatrix  = logCPM_example,
gsTopology = gsTopology,
weight = weightedFC$weight
)
normalisedScores <- normalise_by_permu(permutedScore, pathwayPertScore, sortBy = "pvalue")
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05)
fit <- normalisedScores %>%
left_join(metadata_example) %>%
split(f = .$gs_name) %>%
lapply(function(x)lm(robustZ ~ 0 + treatment, data = x)) %>%
lapply(summary)
treat_sig <- lapply(
names(fit),
function(x){
fit[[x]]$coefficients %>%
as.data.frame() %>%
.[seq_len(2),] %>%
dplyr::select(Estimate, pvalue = `Pr(>|t|)` ) %>%
rownames_to_column("Treatment") %>%
mutate(
gs_name = x,
FDR = p.adjust(pvalue, "fdr"),
Treatment = str_remove_all(Treatment, "treatment")
)
}) %>%
bind_rows()
treat_sig %>%
dplyr::filter(FDR < 0.05) %>%
mutate_at(vars(c("Treatment", "gs_name")), as.factor) %>%
mutate_if(is.numeric, sprintf, fmt = '%#.4f') %>%
mutate(Direction = ifelse(Estimate < 0, "Inhibited", "Activation")) %>%
dplyr::select(
Treatment, `Perturbation Score` = Estimate, Direction,
`Gene-set name` = gs_name,
`P-value` = pvalue,
FDR
) %>%
datatable(
filter = "top",
options = list(
columnDefs = list(list(targets = "Direction", visible = FALSE))
),
caption = htmltools::tags$caption(
htmltools::em(
"Pathways that were significant perturbed within each treatment group.")
)
) %>%
formatStyle(
'Perturbation Score', 'Direction',
color = styleEqual(c("Inhibited", "Activation"), c("blue", "red"))
)
plot_gene_contribution(
genePertMatr  = genePertScore$`kegg.Proteoglycans in cancer` %>%
.[, str_detect(colnames(.), "E2", negate = TRUE)],
filterBy = "mean",
topGene = 10,
color = rev(colorspace::divergex_hcl(100, palette = "RdBu")),
breaks = seq(-0.001, 0.001, length.out = 100)
)
annotation_df <- normalisedScores %>%
dplyr::filter(gs_name == "kegg.Proteoglycans in cancer") %>%
mutate(
`Z Range` = cut(
robustZ, breaks = seq(-2, 2, length.out = 6), include.lowest = TRUE
)
) %>%
dplyr::select(sample, `Z Range`) %>%
left_join(
.,  metadata_example %>%
dplyr::select(sample, `PR Status` = PR),
unmatched = "drop"
)
load(system.file("extdata", "entrez2name.rda", package = "sSNAPPY"))
z_levels <- levels(annotation_df$`Z Range`)
sample_order <- metadata_example %>%
dplyr::filter(treatment == "R5020") %>%
.[order(.$treatment),] %>%
pull(sample)
plot_gene_contribution(
genePertMatr  = genePertScore$`kegg.Proteoglycans in cancer` %>%
.[, match(sample_order, colnames(.))],
annotation_df = annotation_df,
filterBy = "mean",
topGene = 10,
mapEntrezID = entrez2name,
cluster_cols = FALSE,
color = rev(colorspace::divergex_hcl(100, palette = "RdBu")),
breaks = seq(-0.001, 0.001, length.out = 100),
annotation_colors = list(
`PR Status` = c(Positive = "darkgreen", Negative = "orange"),
`Z Range` = setNames(
colorRampPalette(c("navyblue", "white", "darkred"))(length(z_levels)),
z_levels
))
)
pathway2plot <- treat_sig %>%
dplyr::filter(Treatment == "R5020") %>%
arrange(FDR) %>%
.[1:20,] %>%
mutate(
status = ifelse(Estimate > 0, "Activated", "Inhibited"),
status = ifelse(FDR < 0.05, status, "Unchanged"))
set.seed(123)
p1 <- pathway2plot %>%
plot_gs_network(
gsTopology = gsTopology,
colorBy = "status"
) +
scale_color_manual(
values = c(
"Activated" = "red",
"Unchanged" = "gray"
)
) +
theme(
panel.grid = element_blank(),
panel.background = element_blank()
)
set.seed(123)
p2 <- pathway2plot %>%
mutate(`-log10(p)` = -log10(pvalue)) %>%
plot_gs_network(
gsTopology = gsTopology,
colorBy = "-log10(p)"
) +
theme(
panel.grid = element_blank(),
panel.background = element_blank()
)
(p1 | p2) +
plot_annotation(tag_levels = "A")
set.seed(123)
pathway2plot %>%
plot_community(
gsTopology = gsTopology,
colorBy = "status",
color_lg_title = "Community"
) +
scale_color_manual(
values = c(
"Activated" = "red",
"Unchanged" = "gray"
)
) +
theme(panel.background = element_blank())
?ggforce::geom_mark_ellipse
ggplot(iris, aes(Petal.Length, Petal.Width)) +
geom_mark_ellipse(aes(fill = Species, label = Species)) +
geom_point()
