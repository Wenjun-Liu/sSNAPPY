system.time(ssPertScore <- perturbationScore(weightedFC$logFC, here::here("data/BminsI.rds")))
head(ssPertScore)
#at the moment this step take 70 secs
system.time(nomarlizedScore <- normaliseByPermutation(logCPM, metadata, factor = "patient",
control = "Vehicle", scores = ssPertScore,
weight = weightedFC$weight, NB = 100,
filePath = here::here("data/BminsI.rds")))
#at the moment this step take 70 secs
system.time(nomarlizedScore <- normaliseByPermutation(logCPM, metadata, factor = "patient",
control = "Vehicle", scores = ssPertScore,
weight = weightedFC$weight, NB = 5,
filePath = here::here("data/BminsI.rds")))
use_rcpp("permutation")
.rs.setClangDiagnostics(2)
sourceCpp("src/ssPertScore.cpp")
system.time(test <- ssPertScore_RCPP(BminsI, weightedFC$logFC))
BminsI <- readRDS("data/BminsI.rds")
system.time(test <- ssPertScore_RCPP(BminsI, weightedFC$logFC))
sourceCpp("src/ssPertScore.cpp")
system.time(test <- ssPertScore_RCPP(BminsI, weightedFC$logFC))
library(devtools)
load_all()
library(AnnotationHub)
library(magrittr)
library(devtools)
library(stringr)
library(testthat)
library(Rcpp)
library(microbenchmark)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
system.time(weightedFC <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", control = "Vehicle"))
# this now takes ~60 seconds to run
system.time(ssPertScore <- perturbationScore(weightedFC$logFC, here::here("data/BminsI.rds")))
warnings()
library(devtools)
load_all()
library(AnnotationHub)
library(magrittr)
library(devtools)
library(stringr)
library(testthat)
library(Rcpp)
library(microbenchmark)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
system.time(weightedFC <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", control = "Vehicle"))
# this now takes ~60 seconds to run
system.time(ssPertScore <- perturbationScore(weightedFC$logFC, here::here("data/BminsI.rds")))
factor = "patient"
control = "Vehicle"
metadata <- as.data.frame(metadata)
pairs <- unique(metadata[,factor])
sampleInpairs <- sapply(pairs, function(x){
contrSample <- dplyr::filter(metadata, treatment == control, !!sym(factor) == x)
contrSample <- pull(contrSample, sample)
treatedSample <- dplyr::filter(metadata, treatment != control, !!sym(factor) == x)
treatedSample <- pull(treatedSample, sample)
list(contrSample = contrSample, treatedSample = treatedSample)
}, simplify = FALSE)
permutedFC_RCPP(5, logCPM, sampleInpairs, weightedFC$weight)
sourceCpp("src/permutation.cpp")
permutedFC_RCPP(5, logCPM, sampleInpairs, weightedFC$weight)
sourceCpp("src/permutation.cpp")
permutedFC_RCPP(5, logCPM, sampleInpairs, weightedFC$weight)
factor
load_all()
.ssPertScore()
.ssPertScore
.generate_permutedFC()
.generate_permutedFC
system.time(test <- .generate_permutedFC(logCPM, metadata, factor, control, weightedFC$weight, 5, 123))
test
system.time(test <- .generate_permutedFC(logCPM, metadata, factor, control, weightedFC$weight, 100, 123))
document()
rm(list = c("permutedFC_RCPP"))
load_all()
test_file(
"tests/testthat/test_compute_ssFC.R"
)
test_file(
"tests/testthat/test_compute_ssFC.R"
)
summaryScore <- rownames_to_column(summaryScore,"gs_name")
stopifnot(ncol(logCPM) == nrow(metadata))
load_all()
test_file(
"tests/testthat/test_compute_ssFC.R"
)
test_file(
"tests/testthat/test_compute_ssFC.R"
)
y <- matrix(c(c(1:5, 2:6, 3:7), c(1:5, 2:6, 3:7)+ 0.2), 5, 6)
rownames(y) <- paste("Gene",1:5)
colnames(y) <- c("patient1_control", "patient1_treat1", "patient1_treat2", "patient2_control", "patient2_treat1", "patient2_treat2")
sample <- colnames(y) %>%
as.data.frame()
colnames(sample) <- c("sample")
sample <- sample %>%
dplyr::mutate(
treatment = vapply(.$sample, function(x){
stringr::str_split(x, "_")[[1]][2]
}, character(1)),
patient = vapply(.$sample, function(x){
stringr::str_split(x, "_")[[1]][1]
}, character(1)))
yi
y
output <- weight_ssFC(y, sample, factor = "patient", control = "control")
output
test_file(
"tests/testthat/test_compute_ssFC.R"
)
output
logFC
logFC <- matrix(rep(c(1, 2, 1,2), each = 5), 5, 4)
varFC <- apply(logFC, 1, var)
rownames(logFC) <- paste("Gene",1:5)
colnames(logFC) <- c("patient1_treat1", "patient1_treat2",  "patient2_treat1", "patient2_treat2")
varFC <- apply(logFC, 1, var)
meanCPM <- apply(y, 1, mean)
meanCPM <- meanCPM[match(names(meanCPM),names(varFC))]
l <- lowess(meanCPM, varFC)
f <- approxfun(l, rule = 2, ties = list("ordered", mean))
weight <- 1/f(meanCPM)
weight
logCPM
Y
y
varFC
logFC
meanCPM
weight
output
weight <- weight/sum(weight)
weight
# logFC <- matrix(rep(c(1, 2, 1,2), each = 5), 5, 4)
# rownames(logFC) <- paste("Gene",1:5)
# colnames(logFC) <- c("patient1_treat1", "patient1_treat2",  "patient2_treat1", "patient2_treat2")
# varFC <- apply(logFC, 1, var)
# meanCPM <- apply(y, 1, mean)
# meanCPM <- meanCPM[match(names(meanCPM),names(varFC))]
# l <- lowess(meanCPM, varFC)
# f <- approxfun(l, rule = 2, ties = list("ordered", mean))
# weight <- 1/f(meanCPM)
# weight <- weight/sum(weight)
weight <- rep(0.2, 5)
weight
test_file(
"tests/testthat/test_compute_ssFC.R"
)
library(covr)
covr <- file_coverage("R/compute_ssFC.R", "tests/testthat/test_compute_ssFC.R")
report(covr)
use_test("perturbationScore")
ssFC <- weight_ssFC(y, sample, "patient", "control")
perturbationScore(ssFC$logFC)
perturbationScore(ssFC$logFC, "data/random.rds")
rownames(logCPM)
rownames(logCPM)[1:5]
y <- matrix(c(c(1:5, 2:6, 3:7), c(1:5, 2:6, 3:7)+ 0.2), 5, 6)
rownames(y) <- c("7105","8813","57147","55732","2268" )
colnames(y) <- c("patient1_control", "patient1_treat1", "patient1_treat2", "patient2_control", "patient2_treat1", "patient2_treat2")
sample <- colnames(y) %>%
as.data.frame()
colnames(sample) <- c("sample")
sample <- sample %>%
dplyr::mutate(
treatment = vapply(.$sample, function(x){
stringr::str_split(x, "_")[[1]][2]
}, character(1)),
patient = vapply(.$sample, function(x){
stringr::str_split(x, "_")[[1]][1]
}, character(1)))
ssFC <- weight_ssFC(y, sample, "patient", "control")
pathwayDir <- "data/BminsI.rds"
# create logCPM matrix with gene_id as rownames (instead of entrezID required)
y_wrongIdentifier <- y
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM)[1:5]
rownames(y_wrongIdentifier) <- C("ENSG00000000003","ENSG00000000419","ENSG00000000457","ENSG00000000460","ENSG00000000938")
ssFC_wrongIdentifier <- weight_ssFC(y_wrongIdentifier, sample, "patient", "control")
perturbationScore(ssFC$logFC_wrongIdentifier, pathwayDir)
?solve
# this now takes ~60 seconds to run
system.time(ssPertScore <- perturbationScore(weightedFC$logFC, here::here("data/BminsI.rds")))
load_all()
# this now takes ~60 seconds to run
system.time(ssPertScore <- perturbationScore(weightedFC$logFC, here::here("data/BminsI.rds")))
load_all()
BminsI <- readRDS("data/BminsI.rds")
.ssPertScore(ssFC$logFC, BminsI)
.ssPertScore( BminsI, ssFC$logFC)
use_test("pathwayTopology")
use_r("pathwayTopology")
weightedAdjMatrix("dog", "kegg", outputDir = "data/test.rds")
weightedAdjMatrix("haspien", "kegg", outputDir = "data/test.rds", beta = c(0,1,2))
weightedAdjMatrix("hsapiens", "kegg", outputDir = "data/test.rds", beta = c(0,1,2))
weightedAdjMatrix("hsapiens", "kegg", outputDir = "data/test.rds", pathwayName = c("A", "B"))
tempdir()
outputDir <- paste(tempdir(), "/test.rds", sep = "")
outputDir
expect_false(file.exists(outputDir))
names(BminsI)[1:5]
names(BminsI)[1:3]
outputDir
weightedAdjMatrix(species = "hsapiens",
database = "kegg",
outputDir = outputDir,
pathwayName = c("Glycolysis / Gluconeogenesis","Citrate cycle (TCA cycle)","Pentose phosphate pathway" ))
expect_true(file.exists(outputDir))
?expect_gt
test <- readRDS(outputDir)
test
str_detect(rownames(test[[1]]), "ENTREZID:")
str_detect(rownames(test[[1]])[1], "ENTREZID:")
test_file("tests/testthat/test-pathwayTopology.R")
names(test)
outputDir
species = "hsapiens"
weightedAdjMatrix(species = "hsapiens",
database = "kegg",
outputDir = outputDir,
pathwayName = c("Glycolysis / Gluconeogenesis","Citrate cycle (TCA cycle)","Pentose phosphate pathway" ))
test <- readRDS(outputDir)
length(test)
species = "hsapiens"
database = "kegg"
pathwayName = c("Glycolysis / Gluconeogenesis","Citrate cycle (TCA cycle)","Pentose phosphate pathway" )
pys <- pathways(species, database)
!is.null(pathwayName)
any(pathwayName %in% names(pys))
names(pys) %in% pathwayName
load_all()
test_file("tests/testthat/test-pathwayTopology.R")
names(pys)
pys <- pys[names(pys) %in% pathwayName]
names(pys)
# always convert pathway nodes identifier to entrez ID
pys <- suppressMessages(convertIdentifiers(pys, "ENTREZID"))
names(pys)
# prepare the topologies for SPIA algorithm and store as a temporary file
outputDir <- tempfile()
prepareSPIA(pys, outputDir)
test <- get(load(paste(outputDir, "SPIA.RData", sep = "")))
names(test)
test$`<graphite_placeholder>`
yes
pys
prepareSPIA
pys$`Pentose phosphate pathway`
BminsI$`<graphite_placeholder>`
?prepareSPIA
names(BminsI) != "<graphite_placeholder>"
load_all()
unlink()
?unlink
test_file("tests/testthat/test-pathwayTopology.R")
weightedAdjMatrix("hsapiens", "kegg", outputDir = "data/test.rds", beta = c(0,1,2))
load_all()
test_file("tests/testthat/test-pathwayTopology.R")
?covr
report(package_coverage())
covr <- file_coverage("R/pathwayTopology.R", "tests/testthat/test_pathwayTopology.R")
covr <- file_coverage("R/pathwayTopology.R", "tests/testthat/test-pathwayTopology.R")
report(covr)
ssPertScore
library(GSEABase)
?GeneSet
GeneSet(c("7105","8813","57147","55732","2268" ))
.ssPertScore(BminsI, ssFC$logFC)
# # retrieve pathway info using `graphite`s
system.time(weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "data/BminsI.rds"))
BminsI <- readRDS("data/BminsI.rds")
names(BminsI)
.ssPertScore(BminsI, ssFC$logFC)
expect_true(is.vector(.ssPertScore(BminsI, ssFC$logFC)[[1]]))
perturbationScore(ssFC$logFC, pathwayDir)
ssFC$logFC
unlist(unname(BminsI))
unlist(BminsI)
unlist(unname(lapply(BminsI, rownames)))
load_all()
lapply(BminsI, functionx(x){any(rownames(ssFC$logFC) %in% rownames(x))})
lapply(BminsI, function(x){any(rownames(ssFC$logFC) %in% rownames(x))})
lapply(BminsI, function(x){any(rownames(ssFC$logFC) %in% rownames(x))}) %>% summary()
lapply(BminsI, function(x){any(rownames(ssFC$logFC) %in% rownames(x))}) %>% unlist() %>% unname %>% table()
BminsI[lapply(BminsI, function(x){any(rownames(ssFC$logFC) %in% rownames(x))})]
lapply(BminsI, function(x){any(rownames(ssFC$logFC) %in% rownames(x))})
lapply(BminsI,rownames) %in% rownames(ssFC$logFC)
table9lapply(BminsI,rownames) %in% rownames(ssFC$logFC)
table(lapply(BminsI,rownames) %in% rownames(ssFC$logFC))
lapply(BminsI, function(x){length(intersect(rownames(ssFC$logFC),rownames(x)))})
BminsI[lapply(BminsI, function(x){length(intersect(rownames(ssFC$logFC),rownames(x)))}) != 0]
# the number of pathways with at least one of those five genes in it
interesectName = names(BminsI[lapply(BminsI, function(x){length(intersect(rownames(ssFC$logFC),rownames(x)))}) != 0])
interesectName
perturbationScore(ssFC$logFC, pathwayDir)
load_all()
perturbationScore(ssFC$logFC, pathwayDir)
?anyNA
anyNA(perturbationScore(ssFC$logFC, pathwayDir)$tA)
expect_equal(unique(perturbationScore(ssFC$logFC, pathwayDir)$sample), sample$sample)
expect_equal(unique(perturbationScore(ssFC$logFC, pathwayDir)$sample), str_subset(sample$sample, "control", negate = TRUE))
length(intersect(perturbationScore(ssFC$logFC, pathwayDir)$gs_name, interesectName))
length(setdiff(perturbationScore(ssFC$logFC, pathwayDir)$gs_name, interesectName))
covt <- file_coverage("R/pertubationScore.R", "tests/testthat/test-perturbationScore.R")
names(.ssPertScore(BminsI, ssFC$logFC)[[1]])
covr <- file_coverage("R/pertubationScore.R", "tests/testthat/test-perturbationScore.R")
ssPertScore
#at the moment this step take 400 secs for only 5 permutation
system.time(nomarlizedScore <- normaliseByPermutation(logCPM, metadata, factor = "patient",
control = "Vehicle", scores = ssPertScore,
weight = weightedFC$weight, NB = 10,
filePath = here::here("data/BminsI.rds")))
head(logCPM)
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
#at the moment this step take 400 secs for only 5 permutation
system.time(nomarlizedScore <- normaliseByPermutation(logCPM, metadata, factor = "patient",
control = "Vehicle", scores = ssPertScore,
weight = weightedFC$weight, NB = 10,
filePath = here::here("data/BminsI.rds")))
1600/60
check()
#at the moment this step take 1600 secs for only 10 permutation
system.time(nomarlizedScore <- normaliseByPermutation(logCPM, metadata, factor = "patient",
control = "Vehicle", scores = ssPertScore,
weight = weightedFC$weight, NB = 10,
filePath = here::here("data/BminsI.rds")))
head(BminsI[1:3])
?det
?solve
.Machine$double.eps
adjMatrix <- BminsI[[1]]
body(solve.default)
BPPRAM
BPPARAM
library(BiocParallel)
BPPARAM
bpparam()
unlist(unname(lapply(BminsI, rownames)))
weightedFC <- weightedFC$logFC
# extract all unique pathway genes and find ones that are not expressed
notExpressed <- setdiff(unique(unlist(unname(lapply(BminsI, rownames)))), rownames(weightedFC))
notExpressed
setdiff(c("a", "b"), c("a", "b"))
notExpressed <- setdiff(c("a", "b"), c("a", "b"))
length(notExpressed)
temp <- matrix(0, nrow = length(notExpressed), ncol = ncol(weightedFC))
rownames(temp) <- notExpressed
temp
# extract all unique pathway genes and find ones that are not expressed
notExpressed <- setdiff(unique(unlist(unname(lapply(BminsI, rownames)))), rownames(weightedFC))
temp <- matrix(0, nrow = length(notExpressed), ncol = ncol(weightedFC))
rownames(temp) <- notExpressed
temp
c(weighted_FC, temp)
c(weightedFC, temp)
colnames(temp) <- colnames(weightedFC)
rbind(weightedFC, temp)
weightedFC <- rbind(weightedFC, temp)
dim(weightedFC)
length(unique(unlist(unname(lapply(BminsI, rownames)))))
setdiff(unique(unlist(unname(lapply(BminsI, rownames)))), rownames(weightedFC))
?solve
body(solve.default)
inherits(BminsI$`Glycolysis / Gluconeogenesis`, "qr")
?inherits
BminsI$`Glycolysis / Gluconeogenesis`
as.qr(BminsI$`Glycolysis / Gluconeogenesis`)
as.qr(BminsI$`Galactose metabolism`)
body(solve.default)
adjMatrix  <- BminsI$`Ascorbate and aldarate metabolism`
# if pathway adjacency matrix is not invertible, output NULL
d <- abs(det(adjMatrix))
if (d < tol) return(NULL)
tol = 1e-7
if (d < tol) return(NULL)
# subset pathway genes' expression
x <- weightedFC[rownames(adjMatrix), ]
x
identical(rownames(x), rownames(adjMatrix))
apply(x, 2, function(y).Internal(La_solve(adjMatrix, -y, tol)) - y)
apply(x, 2, function(y)sum(.Internal(La_solve(adjMatrix, -y, tol)) - y))
#' @export
.ssPertScore_new <- function(adjMatrix, weightedFC, tol = 1e-7){
# if pathway adjacency matrix is not invertible, output NULL
d <- abs(det(adjMatrix))
if (d < tol) return(NULL)
# subset pathway genes' expression
x <- weightedFC[rownames(adjMatrix), ]
apply(x, 2, function(y)sum(.Internal(La_solve(adjMatrix, -y, tol)) - y))
}
PF <- lapply(BminsI, .ssPertScore_new, weightedFC= weightedFC)
PF
?microbenchmark
microbench(
lapply(BminsI, .ssPertScore_new, weightedFC= weightedFC),
sapply(BminsI, .ssPertScore_new, weightedFC= weightedFC)
)
microbenchmark(
lapply(BminsI, .ssPertScore_new, weightedFC= weightedFC),
sapply(BminsI, .ssPertScore_new, weightedFC= weightedFC)
)
microbenchmark(
lapply(BminsI, .ssPertScore_new, weightedFC= weightedFC),
sapply(BminsI, .ssPertScore_new, weightedFC= weightedFC),
times = 1L
)
system.time(PF <- lapply(BminsI, .ssPertScore_new, weightedFC= weightedFC))
system.time(ls <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", control = "Vehicle"))
microbenchmark(
lapply(BminsI, .ssPertScore_new, weightedFC= weightedFC),
sapply(BminsI, .ssPertScore_new, weightedFC= weightedFC),
.ssPertScore(BminsI, ls$logFC)
times = 10L
)
microbenchmark(
lapply(BminsI, .ssPertScore_new, weightedFC= weightedFC),
sapply(BminsI, .ssPertScore_new, weightedFC= weightedFC),
.ssPertScore(BminsI, ls$logFC),
times = 10L
)
microbenchmark(
lapply(BminsI, .ssPertScore_new, weightedFC= weightedFC),
sapply(BminsI, .ssPertScore_new, weightedFC= weightedFC),
.ssPertScore(BminsI, ls$logFC)
)
microbenchmark(
lapply(BminsI, .ssPertScore_new, weightedFC= weightedFC),
sapply(BminsI, .ssPertScore_new, weightedFC= weightedFC),
.ssPertScore(BminsI, ls$logFC)
)
PF <- sapply(BminsI, .ssPertScore_new, weightedFC= weightedFC)
head(PF)
?ENFRAME
?enframe
PF <- sapply(names(PF), function(x){
temp <- as.data.frame(PF[[x]])
temp <- set_colnames(temp, "tA")
temp <- mutate(temp, gs_name = x)
}, simplify = FALSE)
# Remove list elements that are null or all zeros
PF <- PF[!sapply(PF, is.null)]
suppressWarnings(PF <- PF[sapply(PF, any)])
PF <- sapply(names(PF), function(x){
temp <- as.data.frame(PF[[x]])
temp <- set_colnames(temp, "tA")
temp <- mutate(temp, gs_name = x)
}, simplify = FALSE)
head(PF)
load_all()
# this now takes ~60 seconds to run
system.time(ssPertScore <- perturbationScore(ls$logFC, here::here("data/BminsI.rds")))
head(ssPertScore )
BiocParallel::registered()[[1]]
BPPARAM
bpparam()
BPPARAM <- BiocParallel::registered()[[1]]
BPPARAM
BPPARAM$workers
?bplapply
kg2keep <- sapply(names(BminsI), function(x){
length(intersect(rownames(weightedFC),
rownames(BminsI[[x]]))) > 0
})
BminsI <- BminsI[kg2keep]
length(BminsI)
microbenchmark(
sapply(BminsI, .ssPertScore_new, weightedFC= weightedFC),
bplapply(BminsI, .ssPertScore_new, weightedFC= weightedFC,
BPPARAM = BPPARAM),
times = 10L
)
microbenchmark(
sapply(BminsI[1:5], .ssPertScore_new, weightedFC= weightedFC),
bplapply(BminsI[1:5], .ssPertScore_new, weightedFC= weightedFC,
BPPARAM = BPPARAM),
times = 10L
)
microbenchmark(
sapply(BminsI[1:5], .ssPertScore_new, weightedFC= weightedFC),
bplapply(BminsI[1:5], .ssPertScore_new, weightedFC= weightedFC,
BPPARAM = BPPARAM),
times = 1L
)
microbenchmark(
sapply(BminsI, .ssPertScore_new, weightedFC= weightedFC),
bplapply(BminsI, .ssPertScore_new, weightedFC= weightedFC,
BPPARAM = BPPARAM),
times = 1L
)
