metadata %>%
dplyr::filter(sample %in% sam2keep) %>%
save(file = here::here("data/metadata.RData"))
?use_data_raw
use_data_raw("sam2keep <- str_subset(colnames(logCPM), "Vehicle_P|E2_P")
logCPM <- logCPM[1:100, sam2keep]
save(subCPM, file = here::here("data/LogCPM.RData"), compress = TRUE)
metadata %>%
dplyr::filter(sample %in% sam2keep) %>%
save(file = here::here("data/metadata.RData"))")
""
use_r("data")
?use_package
use_package("AnnotationHub", type = "Suggests")
requireNamespace("AnnotationHub", quietly = TRUE)
?requireNamespace
?str_detect
?mapIds
document()
rm(list = c("weight_ssFC"))
document()
load_all()
library(devtools)
check()
load_all()
document()
?SSPT::weight_ssFC
head(logCPM)
?usethis::use_data
library(AnnotationHub)
library(magrittr)
library(devtools)
library(stringr)
library(testthat)
library(Rcpp)
library(microbenchmark)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
## prepare example data, take 100 genes, 8 patients and only keep the Vehicle & E2 treatment
sam2keep <- str_subset(colnames(logCPM), "Vehicle_P|E2_P")
logCPM <- logCPM[1:100, sam2keep]
logCPM
use_data(logCPM)
metadata <- metadata %>%
dplyr::filter(sample %in% sam2keep) %>%
save(file = here::here("data/metadata.RData"))
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
metadata <- metadata %>%
dplyr::filter(sample %in% sam2keep) %>%
save(file = here::here("data/metadata.RData"))
metadata
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
metadata
metadata <- metadata %>%
dplyr::filter(sample %in% sam2keep)
metadata
use_data(metadata)
load_all()
metadata
graphite::pathwayDatabases()
test <- readRDS("data/BminsI.rds")
names(test)[1:3]
system.time(ls <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", control = "Vehicle"))
system.time(weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "data/BminsI.rds"))
datpT <- .retrieveTopology(species = "hsapiens", database = "kegg", pathwayName = c("Glycolysis / Gluconeogenesis","Citrate cycle (TCA cycle)","Pentose phosphate pathway"))
datpT$`Glycolysis / Gluconeogenesis`
datpT$`Glycolysis / Gluconeogenesis`$activation
beta=c(1,0,0,1,-1,1,0,-1,-1,0,0,1,0,1,-1,0,1,-1,-1,0,0,1,0,1,1)
rel<-c("activation","compound","binding/association","expression","inhibition",
"activation_phosphorylation","phosphorylation","inhibition_phosphorylation",
"inhibition_dephosphorylation","dissociation","dephosphorylation",
"activation_dephosphorylation","state change","activation_indirect effect",
"inhibition_ubiquination","ubiquination", "expression_indirect effect",
"inhibition_indirect effect","repression","dissociation_phosphorylation",
"indirect effect_phosphorylation","activation_binding/association",
"indirect effect","activation_compound","activation_ubiquination")
x <- names(datpT)[[1]]
x11()
x
y <- "activqation"
y <- "activation"
datpT[[x]][[y]] * beta[y]
beta[y]
names(beta)<-rel
datpT[[x]][[y]] * beta[y]
abs(sign(-2))
abs(sign(beta))
beta
beta !=0
beta[beta !=0]
int2keep
int2keep <- names(beta[beta !=0])
int2keep
datpT <- lapply(datpT, function(x)x[names(x)] %in% int2keep)
names(datpT$`Glycolysis / Gluconeogenesis`)
datpT <- .retrieveTopology(species, database, pathwayName)
datpT <- .retrieveTopology(species = "hsapiens", database = "kegg", pathwayName = c("Glycolysis / Gluconeogenesis","Citrate cycle (TCA cycle)","Pentose phosphate pathway"))
datpT <- lapply(datpT, function(x) x[names(x) %in% int2keep] )
names(datpT$`Glycolysis / Gluconeogenesis`)
g2gInteraction <- sapply(rel, function(y){
datpT[[x]][[y]] * beta[y]
}, simplify = FALSE)
g2gInteraction <-   Reduce('+', g2gInteraction)
numDownstream <- Reduce('+', datpT[[x]])
numDownstream <- apply(numDownstream, 2, sum)
numDownstream[numDownstream==0]<-1
g2gInteraction
x
y
datpT[[x]][[y]]
g2gInteraction <- sapply(rel, function(y){
datpT[[x]][[y]] * beta[y]
}, simplify = FALSE)
g2gInteraction <- sapply(int2keep, function(y){
datpT[[x]][[y]] * beta[y]
}, simplify = FALSE)
g2gInteraction
g2gInteraction <-   Reduce('+', g2gInteraction)
g2gInteraction
numDownstream
dim(g2gInteraction)
isSymmetric.matrix(g2gInteraction)
g2gInteraction/numDownstream
load_all()
microbenchmark(
"ori" = {weightedAdjMatrix(species = "hsapiens", database = "kegg",
pathwayName = c("Glycolysis / Gluconeogenesis","Citrate cycle (TCA cycle)","Pentose phosphate pathway"),
outputDir = "BminsI.rds")},
"new" = {weightedAdjMatrix_alt(species = "hsapiens", database = "kegg",
pathwayName = c("Glycolysis / Gluconeogenesis","Citrate cycle (TCA cycle)","Pentose phosphate pathway"),
outputDir = "test.rds")},
time = 5
)
q()
q
microbenchmark(
"ori" = {weightedAdjMatrix(species = "hsapiens", database = "kegg",
pathwayName = c("Glycolysis / Gluconeogenesis","Citrate cycle (TCA cycle)","Pentose phosphate pathway"),
outputDir = "BminsI.rds")},
"new" = {weightedAdjMatrix_alt(species = "hsapiens", database = "kegg",
pathwayName = c("Glycolysis / Gluconeogenesis","Citrate cycle (TCA cycle)","Pentose phosphate pathway"),
outputDir = "test.rds")},
time = 5
)
test1 <- readRDS("data/BminsI.rds")
test2 <- readRDS("test.rds")
test1 <- readRDS("BminsI.rds")
identical(test1, test2)
system.time(weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "data/BminsI.rds"))
microbenchmark(
"ori" = {weightedAdjMatrix(species = "hsapiens", database = "kegg",
outputDir = "data/BminsI.rds")},
"new" = {weightedAdjMatrix_alt(species = "hsapiens", database = "kegg",
outputDir = "data/test.rds")},
times = 1
)
BminsI <- readRDS("data/test.rds")
test <- readRDS("data/test.rds")
BminsI <- readRDS("data/test.rds")
identical(BminsI, test)
covr <- file_coverage("R/pathwayTopology.R", "tests/testthat/test-pathwayTopology.R")
library(covr)
covr <- file_coverage("R/pathwayTopology.R", "tests/testthat/test-pathwayTopology.R")
report(covr)
load_all()
# Rcpp reduces the time by half. Rcpp function for just one pathway then sapply is 0.5 second slower.
microbenchmark(
"RCPP" = {ssPertScore <- perturbationScore(ls$logFC, here::here("data/BminsI.rds"))},
"RCPP_alt" = {ssPertScore_alt <- perturbationScore_alt(ls$logFC, here::here("data/BminsI.rds"))},
times = 1
)
ls$logFC
library(devtools)
library(SSPT)
?SSPT::weight_ssFC
document()
library(SSPT)
?SSPT::weight_ssFC
requireNamespace("AnnotationHub", quietly = TRUE)
ah <- AnnotationHub::AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(stringr::str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
rownames(logCPM) <- AnnotationHub::mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
head(logCPM)
library(AnnotationHub)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
ah <- AnnotationHub()
ah
subset(ah,rdataclass == "EnsDb")
ah$description
subset(ah,rdataclass == "EnsDb", )$description
subset(ah,rdataclass == "EnsDb")
?AnnotationHub
?AnnotationHub::`subset,Hub-method`
subset(ah, str_detect(description, as.character("101")))
subset(ah, stringr::str_detect(description, as.character("101")))
ah <- subset(ah,rdataclass == "EnsDb", )
ah <- subset(ah,rdataclass == "EnsDb" )
subset(ah, stringr::str_detect(description, as.character("101")))
subset(ah,rdataclass == "EnsDb", genome == "GRCh38")
subset(ah,rdataclass == "EnsDb" & genome == "GRCh38")
ah <- AnnotationHub()
subset(ah,rdataclass == "EnsDb" & genome == "GRCh38" & description == "Ensembl 101 EnsDb for Homo sapiens")
ah <- subset(ah,rdataclass == "EnsDb" & genome == "GRCh38")
subset(ah, stringr::str_detect(description, as.character("101")))
ah <- AnnotationHub()
subset(title == "Ensembl 101 EnsDb for Homo sapiens")
subset(ah, title == "Ensembl 101 EnsDb for Homo sapiens")
document()
library(SSPT)
?weight_ssFC
requireNamespace("AnnotationHub", quietly = TRUE)
# convert rownamews of logCPM to gene entrez IDs
ah <- AnnotationHub()
ah <- subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM) <- AnnotationHub::mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
ls <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", control = "Vehicle")
head(logCPM)
head(metadata)
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
## prepare example data, take 100 genes, 8 patients and only keep the Vehicle & E2 treatment
sam2keep <- str_subset(colnames(logCPM), "Vehicle_P|E2_P")
## prepare example data, take 100 genes, 8 patients and only keep the Vehicle & E2 treatment
sam2keep <- stringr::str_subset(colnames(logCPM), "Vehicle_P|E2_P")
sam2keep
metadata <- metadata %>%
dplyr::filter(sample %in% sam2keep)
metadata
use_data(metadata)
use_data(metadata, overwrite = TRUE)
library(devtools)
document()
library(SSPT)
?weighted_FC
?weight_ssFC
requireNamespace("AnnotationHub", quietly = TRUE)
# convert rownamews of logCPM from gene ids to gene entrez IDs
ah <- AnnotationHub()
ah <- subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM) <- AnnotationHub::mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
logCPM
metadata
document()
library(SSPT)
?weighted_ssFC
?weight_ssFC
require(AnnotationHub)
# convert rownamews of logCPM from gene ids to gene entrez IDs
ah <- AnnotationHub()
ah <- subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM) <- AnnotationHub::mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
# Inspect metadata data frame to make sure it has treatment, sample and patient columns
ls <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", control = "Vehicle")
logCPM
library(devtools)
load_all()
library(SSPT)
require(AnnotationHub)
# convert rownamews of logCPM from gene ids to gene entrez IDs
ah <- AnnotationHub()
ah <- subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM) <- AnnotationHub::mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
# Inspect metadata data frame to make sure it has treatment, sample and patient columns
ls <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", control = "Vehicle")
invisible(metadata)
load_all()
library(SSPT)
require(AnnotationHub)
library(devtools)
load_all()
?weight_ssFC
require(AnnotationHub)
# convert rownamews of logCPM from gene ids to gene entrez IDs
ah <- AnnotationHub()
ah <- subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
logCPM_example <- logCPM
use_data(logCPM_example, overwrite = TRUE)
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
metadata_example  <- metadata %>%
dplyr::filter(sample %in% sam2keep)
use_data(metadata_example , overwrite = TRUE)
load_all()
library(SSPT)
metadata_example
metadata
## prepare example data, take 100 genes, 8 patients and only keep the Vehicle & E2 treatment
sam2keep <- stringr::str_subset(colnames(logCPM), "Vehicle_P|E2_P")
metadata_example  <- metadata %>%
dplyr::filter(sample %in% sam2keep)
## prepare example data, take 100 genes, 8 patients and only keep the Vehicle & E2 treatment
sam2keep <- stringr::str_subset(colnames(logCPM_example), "Vehicle_P|E2_P")
sam2keep
metadata_example  <- metadata %>%
dplyr::filter(sample %in% sam2keep)
use_data(metadata_example , overwrite = TRUE)
load_all()
library(SSPT)
document()
library(SSPT)
?weight_ssFC
require(AnnotationHub)
# convert rownamews of logCPM from gene ids to gene entrez IDs through `AnnotationHub`
ah <- AnnotationHub()
ah <- subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM_example) <- AnnotationHub::mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
head(logCPM_example)
?mapIds
rownames(logCPM_example) <- mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
head(logCPM_example)
head(metadata_example)
colnames(logCPM_example) = metadata_example$sample
colnames(logCPM_example) == metadata_example$sample
?any
?all
length(setdiff(colnames(logCPM_example), metadata_example$sample)) == 0
ls <- weight_ssFC(logCPM_example, metadata = metadata_example, factor = "patient", control = "Vehicle")
?weightedAdjMatrix
graphite::pathwayDatabases()
system.time(weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "BminsI.rds"))
covr <- file_coverage("R/pathwayTopology.R", "tests/testthat/test-pathwayTopology.R")
library(covr)
covr <- file_coverage("R/pathwayTopology.R", "tests/testthat/test-pathwayTopology.R")
outputDir <- paste(tempdir(), "/test.rds", sep = "")
outputDir
unlink(outputDir)
covr <- file_coverage("R/pathwayTopology.R", "tests/testthat/test-pathwayTopology.R")
report(covr)
ssPertScore <- perturbationScore(ls$logFC, filePath = "BminsI.rds")
document()
load_all()
library(SSPT)
ssPertScore <- perturbationScore(ls$logFC, filePath = "BminsI.rds")
?set_colnames
load_all()
document()
system.time(ssPertScore <- perturbationScore(ls$logFC, filePath = "BminsI.rds"))
document()
load_all()
system.time(ssPertScore <- perturbationScore(ls$logFC, filePath = "BminsI.rds"))
load_all()
# Rcpp reduces the time by half. Rcpp function for just one pathway then sapply is 0.5 second slower.
microbenchmark(
"RCPP" = {ssPertScore <- perturbationScore(ls$logFC, here::here("data/BminsI.rds"))},
"RCPP_alt" = {ssPertScore_alt <- perturbationScore_alt(ls$logFC, here::here("data/BminsI.rds"))},
times = 10
)
library(microbenchmark)
# Rcpp reduces the time by half. Rcpp function for just one pathway then sapply is 0.5 second slower.
microbenchmark(
"RCPP" = {ssPertScore <- perturbationScore(ls$logFC, here::here("data/BminsI.rds"))},
"RCPP_alt" = {ssPertScore_alt <- perturbationScore_alt(ls$logFC, here::here("data/BminsI.rds"))},
times = 10
)
length(ssPertScore)
length(ssPertScore_alt)
# Rcpp reduces the time by half. Rcpp function for just one pathway then sapply is 0.5 second slower.
microbenchmark(
"RCPP" = {ssPertScore <- perturbationScore(ls$logFC, here::here("BminsI.rds"))},
"RCPP_alt" = {ssPertScore_alt <- perturbationScore_alt(ls$logFC, here::here("BminsI.rds"))},
times = 1
)
length(ssPertScore)
weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "BminsI.rds")
# Rcpp reduces the time by half. Rcpp function for just one pathway then sapply is 0.5 second slower.
microbenchmark(
"RCPP" = {ssPertScore <- perturbationScore(ls$logFC, here::here("BminsI.rds"))},
"RCPP_alt" = {ssPertScore_alt <- perturbationScore_alt(ls$logFC, here::here("BminsI.rds"))},
times = 1
)
length(ssPertScore)
BminsI <- readRDS("BminsI.rds")
length(BminsI)
ssPertScore
unique(ssPertScore$gs_name) %>% length()
unique(ssPertScore_alt$gs_name) %>% length()
identical(ssPertScore, ssPertScore_alt)
# Rcpp reduces the time by half. Rcpp function for just one pathway then sapply is 0.5 second slower.
microbenchmark(
"RCPP" = {ssPertScore <- perturbationScore(ls$logFC, here::here("BminsI.rds"))},
"RCPP_alt" = {ssPertScore_alt <- perturbationScore_alt(ls$logFC, here::here("BminsI.rds"))},
times = 1
)
ssPertScore_alt <- perturbationScore_alt(ls$logFC, here::here("BminsI.rds"))
head(ssPertScore)
test_file("tests/testthat/test-perturbationScore.R.R")
test_file("tests/testthat/test-perturbationScore.R")
weightedAdjMatrix(species = "hsapiens", database = "kegg",
pathwayName = c("Glycolysis / Gluconeogenesis","Citrate cycle (TCA cycle)","Pentose phosphate pathway"),
outputDir = here::here("tests/test_BminsI.rds"))
y <- matrix(c(c(1:5, 2:6, 3:7), c(1:5, 2:6, 3:7)+ 0.2), 5, 6)
rownames(y) <- c("7105","8813","57147","55732","2268" )
colnames(y) <- c("patient1_control", "patient1_treat1", "patient1_treat2", "patient2_control", "patient2_treat1", "patient2_treat2")
sample <- colnames(y) %>%
as.data.frame()
colnames(sample) <- c("sample")
sample <- sample %>%
dplyr::mutate(
treatment = vapply(.$sample, function(x){
stringr::str_split(x, "_")[[1]][2]
}, character(1)),
patient = vapply(.$sample, function(x){
stringr::str_split(x, "_")[[1]][1]
}, character(1)))
ssFC <- weight_ssFC(y, sample, "patient", "control")
BminsI <- readRDS("tests/testthat/test_BminsI.rds")
# the number of pathways with at least one of those five genes in it
interesectName <- names(BminsI[lapply(BminsI, function(x){length(intersect(rownames(ssFC$logFC),rownames(x)))}) != 0])
interesectName
BminsI
rownames(ssFC$logFC)
length(BminsI)
weightedAdjMatrix(species = "hsapiens", database = "kegg",
outputDir = here::here("tests/testthat/test_BminsI.rds"))
BminsI <- readRDS("tests/testthat/test_BminsI.rds")
# the number of pathways with at least one of those five genes in it
interesectName <- names(BminsI[lapply(BminsI, function(x){length(intersect(rownames(ssFC$logFC),rownames(x)))}) != 0])
interesectName
y_wrongIdentifier <- y
rownames(y_wrongIdentifier) <- c("ENSG00000000003","ENSG00000000419","ENSG00000000457","ENSG00000000460","ENSG00000000938")
ssFC_wrongIdentifier <- weight_ssFC(y_wrongIdentifier, sample, "patient", "control")
test_file("tests/testthat/test-pathwayTopology.R")
covr <- file_coverage("R/pertubationScore.R", "tests/testthat/test-perturbationScore.R")
expect_equal(length(ssPertScore_RCPP(BminsI, ssFC$logFC, rownames(ssPertScore_RCPP), colnames(ssPertScore_RCPP))), length(BminsI))
expect_equal(length(ssPertScore_RCPP(BminsI, ssFC$logFC, rownames(ssFC$logFC), colnames(ssFC$logFC))), length(BminsI))
ls <- ssPertScore_RCPP(BminsI, ssFC$logFC, rownames(ssFC$logFC), colnames(ssFC$logFC))
ls$`Glycolysis / Gluconeogenesis`
covt <- file_coverage("R/pertubationScore.R", "tests/testthat/test-perturbationScore.R")
covr <- file_coverage("R/pertubationScore.R", "tests/testthat/test-perturbationScore.R")
report
report(covr)
load_all()
covr <- file_coverage("R/pertubationScore.R", "tests/testthat/test-perturbationScore.R")
report(covr)
# convert gene ids to entrez ids
logCPM <- load(here::here("data/logCPM.rds"))
# convert gene ids to entrez ids
logCPM <- load(here::here("data/logCPM.rds"))
getwd()
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
sam2keep
logCPM_example <- logCPM[, sam2keep]
use_data(logCPM_example, overwrite = TRUE)
nrow(logCPM_example)
head(metadata_example)
metadata_example  <- metadata_example %>% dplyr::select(-PR)
head(metadata_example)
use_pkgdown()
?use_pkgdown
use_pkgdown_github_pages()
library(pkgdown)
build_site()
install.packages("RcppAlgos")
92.64+13.46+5.49+15+63.87
graphite::pathwayDatabases()
factorial(ncol(logCPM))
factorial(18)
document()
?SSPT::normaliseByPermutation
library(SSPTT)
library(SSPT)
require(AnnotationHub)
# convert rownamews of logCPM from gene ids to gene entrez IDs through `AnnotationHub`
ah <- AnnotationHub()
ah <- subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM_example) <- AnnotationHub::mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
#compute weighted single sample logFCs
ls <- weight_ssFC(logCPM_example, metadata = metadata_example, factor = "patient", control = "Vehicle")
# explore all species and databases supported by graphite
graphite::pathwayDatabases()
weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "BminsI.rds")
dim(logCPM_example)
system.time(ssPertScore <- perturbationScore(ls$logFC, filePath = "BminsI.rds"))
head(ls$logFC)
?mapIds
document()
