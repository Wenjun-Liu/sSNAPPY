geom_smooth(method = "loess") +
labs(y = "Variance in ssLogFCs",
x = "Average logCPM") +
theme(
panel.background = element_blank()
)
plot_grid(p1,
p2)
if (!requireNamespace("graphite", quietly=TRUE))
install.packages("graphite")
graphite::pathwayDatabases() %>%
dplyr::filter(species ==  "hsapiens") %>%
pander::pander()
weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "gsTopology.rda")
load("gsTopology.rda")
head(names(gsTopology))
# weightedAdjMatrix(species = "hsapiens", database = "kegg", pathwayName = c("Glycolysis / Gluconeogenesis", "Citrate cycle (TCA cycle)","Pentose phosphate pathway"), outputDir = "gsTopology.rda")
# load("gsTopology.rda")
# names(gsTopology)
ssPertScore <- perturbationScore(weightedFC$logFC, gsTopology)
ssPertScore
system.time(permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 1000, gsTopology = gsTopology, weight = weightedFC$weight))
pl <- permutedScore %>%
keep(~all(.!=0)) %>%
.[sample(seq_along(.), 6)] %>%
lapply(function(x){
ggplot(mapping = aes(x)) +
geom_histogram() +
xlab("Perturbation Score")
})
suppressMessages(plot_grid(plotlist = pl,
nrow = 2))
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05) %>%
mutate_at(vars(c("sample", "gs_name")), as.factor) %>%
mutate_if(is.numeric, sprintf, fmt = '%#.4f') %>%
mutate(Direction = ifelse(robustZ < 0, "Inhibited", "Activation")) %>%
dplyr::select(
Comparison, `Perturbation Score` = Estimate, Direction,
`Gene-set name` = gs_name,
`P-value` = pvalue,
FDR
) %>%
datatable(
filter = "top",
options = list(
columnDefs = list(list(targets = "Direction", visible = FALSE))
)) %>%
formatStyle(
'Perturbation Score', 'Direction',
backgroundColor = styleEqual(c("Inhibited", "Activation"), c('lightblue', 'indianred'))
)
if (!requireNamespace("BiocManager", quietly=TRUE))install.packages("BiocManager")
BiocManager::install("sSNAPPY")
pl <- permutedScore %>%
keep(~all(.!=0)) %>%
.[sample(seq_along(.), 6)] %>%
lapply(function(x){
ggplot(mapping = aes(x)) +
geom_histogram() +
xlab("Perturbation Score")
})
suppressMessages(plot_grid(plotlist = pl,
nrow = 2))
dim(logCPM_example)
#' Permute sample labels to generate permuted logFCs
.generate_permutedFC <- function(logCPM, numOfTreat,
NB, weight, seed){
browser()
nSample <- ncol(logCPM)
index <- seq(1, nSample, by = numOfTreat)
set.seed(seed)
# BPPARAM <- BiocParallel::registered()[[1]]
# BPPARAM$workers <- ncores
sapply(1:NB, function(x){
# permute sample labels to get permuted logCPM
colnames(logCPM) <- sample(colnames(logCPM), nSample)
temp <- sapply(seq_along(index), function(y){
(logCPM[,seq(index[[y]]+1, index[[y]]+numOfTreat-1)] - logCPM[,index[[y]]]) * weight
} , simplify = FALSE)
do.call(cbind, temp)
}, simplify = FALSE)
}
.generate_permutedFC(logCPM_example, 3,
10, weightedFC$weight, 123)
nSample <- ncol(logCPM)
nSample
index <- seq(1, nSample, by = numOfTreat)
index
set.seed(seed)
# permute sample labels to get permuted logCPM
colnames(logCPM) <- sample(colnames(logCPM), nSample)
colnames(logCPM)
sample(colnames(logCPM), nSample)
sample(colnames(logCPM), nSample)
seq_along(index)
index
y <- 1
seq(index[[y]]+1, index[[y]]+numOfTreat-1)
temp <- sapply(seq_along(index), function(y){
(logCPM[,seq(index[[y]]+1, index[[y]]+numOfTreat-1)] - logCPM[,index[[y]]]) * weight
} , simplify = FALSE)
temp
lapply(temp, head)
do.call(cbind, temp) %>% head()
#' Permute sample labels to generate permuted logFCs
.generate_permutedFC <- function(logCPM, numOfTreat,
NB, weight, seed){
nSample <- ncol(logCPM)
index <- seq(1, nSample, by = numOfTreat)
set.seed(seed)
# BPPARAM <- BiocParallel::registered()[[1]]
# BPPARAM$workers <- ncores
sapply(1:NB, function(x){
# permute sample labels to get permuted logCPM
colnames(logCPM) <- sample(colnames(logCPM), nSample)
temp <- sapply(seq_along(index), function(y){
(logCPM[,seq(index[[y]]+1, index[[y]]+numOfTreat-1)] - logCPM[,index[[y]]]) * weight
} , simplify = FALSE)
do.call(cbind, temp)
}, simplify = FALSE)
}
.generate_permutedFC(logCPM_example, 3,
10, weightedFC$weight, 123)
document()
rm(list = c(".generate_permutedFC"))
logCPM <- readRDS("/Users/wenjunliu/GSE800098/output/logCPM.rds")
metadata <- readRDS("/Users/wenjunliu/GSE800098/output/mergedSamples.rds")
sam2Keep <- metadata %>%
dplyr::filter(treatment %in% c("R5020", "Vehicle", "E2+R5020"), time == 24) %>%
pull(name)
sam2Keep
# sam2Keep <- metadata %>%
#     dplyr::filter(treatment %in% c("R5020", "Vehicle", "E2+R5020"), time == 24) %>%
#     pull(name)
sam2Keep <- metadata %>%
dplyr::filter(treatment %in% c("R5020")) %>%
pull(name)
sam2Keep
logCPM_example <- logCPM[, sam2Keep]
metadata_example <- metadata %>%
dplyr::filter(name %in% sam2Keep) %>%
dplyr::rename(sample = name)
rownames(logCPM_example) <- ensembldb::mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
head(logCPM_example)
#compute weighted single sample logFCs
weightedFC <- weight_ssFC(logCPM_example, metadata = metadata_example,
factor = "patient", control = "Vehicle")
metadata_example
# sam2Keep <- metadata %>%
#     dplyr::filter(treatment %in% c("R5020", "Vehicle", "E2+R5020"), time == 24) %>%
#     pull(name)
sam2Keep <- metadata %>%
dplyr::filter(treatment %in% c("R5020", "Vehicle")) %>%
pull(name)
logCPM_example <- logCPM[, sam2Keep]
metadata_example <- metadata %>%
dplyr::filter(name %in% sam2Keep) %>%
dplyr::rename(sample = name)
rownames(logCPM_example) <- ensembldb::mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
head(logCPM_example)
#compute weighted single sample logFCs
weightedFC <- weight_ssFC(logCPM_example, metadata = metadata_example,
factor = "patient", control = "Vehicle")
perSample_FC <- sapply(unique(metadata_example$patient), function(x){
temp <- logCPM_example[1:1000,str_detect(colnames(logCPM_example), x)]
ratio <- temp[, str_detect(colnames(temp), "E2")] - temp[, str_detect(colnames(temp), "Vehicle")]
ratio %>%
enframe(name = "gene_id",
value = x)
}, simplify = FALSE) %>%
Reduce(left_join,.)
aveCPM <- logCPM_example[1:1000,] %>%
rowMeans() %>%
enframe(name = "gene_id",
value = "aveCPM")
p1 <- perSample_FC %>%
pivot_longer(cols = -gene_id,
names_to = "name",
values_to = "logFC") %>%
left_join(aveCPM) %>%
ggplot(aes(aveCPM, logFC)) +
geom_point() +
labs(y = "sslogFC",
x = "Average logCPM") +
theme(
panel.background = element_blank()
)
p2 <- data.frame(
gene_id = perSample_FC$gene_id,
variance = perSample_FC[,-1] %>%
apply(1,var)) %>%
left_join(aveCPM) %>%
ggplot(aes(aveCPM, variance)) +
geom_point() +
geom_smooth(method = "loess") +
labs(y = "Variance in ssLogFCs",
x = "Average logCPM") +
theme(
panel.background = element_blank()
)
plot_grid(p1,
p2)
plot_grid(p1,
p2)
perSample_FC <- sapply(unique(metadata_example$patient), function(x){
temp <- logCPM_example[1:1000,str_detect(colnames(logCPM_example), x)]
ratio <- temp[, str_detect(colnames(temp), "r5020")] - temp[, str_detect(colnames(temp), "Vehicle")]
ratio %>%
enframe(name = "gene_id",
value = x)
}, simplify = FALSE) %>%
Reduce(left_join,.)
aveCPM <- logCPM_example[1:1000,] %>%
rowMeans() %>%
enframe(name = "gene_id",
value = "aveCPM")
p1 <- perSample_FC %>%
pivot_longer(cols = -gene_id,
names_to = "name",
values_to = "logFC") %>%
left_join(aveCPM) %>%
ggplot(aes(aveCPM, logFC)) +
geom_point() +
labs(y = "sslogFC",
x = "Average logCPM") +
theme(
panel.background = element_blank()
)
p2 <- data.frame(
gene_id = perSample_FC$gene_id,
variance = perSample_FC[,-1] %>%
apply(1,var)) %>%
left_join(aveCPM) %>%
ggplot(aes(aveCPM, variance)) +
geom_point() +
geom_smooth(method = "loess") +
labs(y = "Variance in ssLogFCs",
x = "Average logCPM") +
theme(
panel.background = element_blank()
)
plot_grid(p1,
p2)
ssPertScore <- perturbationScore(weightedFC$logFC, gsTopology)
ssPertScore
system.time(permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 1000, gsTopology = gsTopology, weight = weightedFC$weight))
system.time(permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2, NB = 1000, gsTopology = gsTopology, weight = weightedFC$weight))
load_all()
system.time(permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2, NB = 1000, gsTopology = gsTopology, weight = weightedFC$weight))
11875/60
pl <- permutedScore %>%
keep(~all(.!=0)) %>%
.[sample(seq_along(.), 6)] %>%
lapply(function(x){
ggplot(mapping = aes(x)) +
geom_histogram() +
xlab("Perturbation Score")
})
suppressMessages(plot_grid(plotlist = pl,
nrow = 2))
library(devtools)
load_all()
logCPM <- readRDS("/Users/wenjunliu/GSE800098/output/logCPM.rds")
metadata <- readRDS("/Users/wenjunliu/GSE800098/output/mergedSamples.rds")
# sam2Keep <- metadata %>%
#     dplyr::filter(treatment %in% c("R5020", "Vehicle", "E2+R5020"), time == 24) %>%
#     pull(name)
sam2Keep <- metadata %>%
dplyr::filter(treatment %in% c("R5020", "Vehicle")) %>%
pull(name)
logCPM_example <- logCPM[, sam2Keep]
metadata_example <- metadata %>%
dplyr::filter(name %in% sam2Keep) %>%
dplyr::rename(sample = name)
dim(logCPM_example)
if (!requireNamespace("BiocManager", quietly=TRUE))install.packages("BiocManager")
BiocManager::install("sSNAPPY")
library(tidyverse)
library(magrittr)
library(ggplot2)
library(cowplot)
library(DT)
if (!requireNamespace("AnnotationHub", quietly=TRUE))BiocManager::install("AnnotationHub")
if (!requireNamespace("ensembldb", quietly=TRUE))BiocManager::install("ensembldb")
ah <- AnnotationHub::AnnotationHub()
ah <- AnnotationHub::subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM_example) <- ensembldb::mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
head(logCPM_example)
#compute weighted single sample logFCs
weightedFC <- weight_ssFC(logCPM_example, metadata = metadata_example,
factor = "patient", control = "Vehicle")
load("gsTopology.rda")
permutedFC <- .generate_permutedFC(logCPM_example, 2, 10, weightedFC$weight)
permutedFC
lapply(permutedFC, head)
sample(1: ncol(logCPM_example), nSample)
sample(1: ncol(logCPM_example), ncol(logCPM_example))
logCPM_example[,sample(1: ncol(logCPM_example), ncol(logCPM_example))] %>% head()
logCPM_example[,sample(1: ncol(logCPM_example), ncol(logCPM_example))] %>% head()
load_all()
system.time(permutedFC <- .generate_permutedFC(logCPM_example, 2, 10, weightedFC$weight))
lapply(permutedFC, head)
system.time(permutedFC <- .generate_permutedFC(logCPM_example, 2, 1000, weightedFC$weight))
dim(logCPM_example)
# sam2Keep <- metadata %>%
#     dplyr::filter(treatment %in% c("R5020", "Vehicle", "E2+R5020"), time == 24) %>%
#     pull(name)
sam2Keep <- metadata %>%
dplyr::filter(treatment %in% c("R5020", "Vehicle"), time == 24) %>%
pull(name)
sam2Keep
logCPM_example <- logCPM[, sam2Keep]
metadata_example <- metadata %>%
dplyr::filter(name %in% sam2Keep) %>%
dplyr::rename(sample = name)
metadata_example
rownames(logCPM_example) <- ensembldb::mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
head(logCPM_example)
#compute weighted single sample logFCs
weightedFC <- weight_ssFC(logCPM_example, metadata = metadata_example,
factor = "patient", control = "Vehicle")
ssPertScore <- perturbationScore(weightedFC$logFC, gsTopology)
ssPertScore
system.time(permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2, NB = 1000, gsTopology = gsTopology, weight = weightedFC$weight))
system.time(permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2, NB = 1000, gsTopology = gsTopology, weight = weightedFC$weight))
976/30
pl <- permutedScore %>%
keep(~all(.!=0)) %>%
.[sample(seq_along(.), 6)] %>%
lapply(function(x){
ggplot(mapping = aes(x)) +
geom_histogram() +
xlab("Perturbation Score")
})
suppressMessages(plot_grid(plotlist = pl,
nrow = 2))
pl <- permutedScore %>%
keep(~all(.!=0)) %>%
.[sample(seq_along(.), 6)] %>%
lapply(function(x){
ggplot(mapping = aes(x)) +
geom_histogram() +
xlab("Perturbation Score")
})
suppressMessages(plot_grid(plotlist = pl,
nrow = 2))
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05) %>%
mutate_at(vars(c("sample", "gs_name")), as.factor) %>%
mutate_if(is.numeric, sprintf, fmt = '%#.4f') %>%
mutate(Direction = ifelse(robustZ < 0, "Inhibited", "Activation")) %>%
dplyr::select(
Comparison, `Perturbation Score` = Estimate, Direction,
`Gene-set name` = gs_name,
`P-value` = pvalue,
FDR
) %>%
datatable(
filter = "top",
options = list(
columnDefs = list(list(targets = "Direction", visible = FALSE))
)) %>%
formatStyle(
'Perturbation Score', 'Direction',
backgroundColor = styleEqual(c("Inhibited", "Activation"), c('lightblue', 'indianred'))
)
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05)
normalisedScores
metadata
# sam2Keep <- metadata %>%
#     dplyr::filter(treatment %in% c("R5020", "Vehicle", "E2+R5020"), time == 24) %>%
#     pull(name)
sam2Keep <- metadata %>%
dplyr::filter(treatment %in% c("R5020", "Vehicle", "E2+R5020"), time == 24) %>%
pull(name)
sam2Keep
logCPM_example <- logCPM[, sam2Keep]
metadata_example <- metadata %>%
dplyr::filter(name %in% sam2Keep) %>%
dplyr::rename(sample = name)
rownames(logCPM_example) <- ensembldb::mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
head(logCPM_example)
ssPertScore <- perturbationScore(weightedFC$logFC, gsTopology)
ssPertScore
system.time(permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 2, NB = 1000, gsTopology = gsTopology, weight = weightedFC$weight))
system.time(permutedScore <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 1000, gsTopology = gsTopology, weight = weightedFC$weight))
1947/60
pl <- permutedScore %>%
keep(~all(.!=0)) %>%
.[sample(seq_along(.), 6)] %>%
lapply(function(x){
ggplot(mapping = aes(x)) +
geom_histogram() +
xlab("Perturbation Score")
})
suppressMessages(plot_grid(plotlist = pl,
nrow = 2))
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05) %>%
mutate_at(vars(c("sample", "gs_name")), as.factor) %>%
mutate_if(is.numeric, sprintf, fmt = '%#.4f') %>%
mutate(Direction = ifelse(robustZ < 0, "Inhibited", "Activation")) %>%
dplyr::select(
Comparison, `Perturbation Score` = Estimate, Direction,
`Gene-set name` = gs_name,
`P-value` = pvalue,
FDR
) %>%
datatable(
filter = "top",
options = list(
columnDefs = list(list(targets = "Direction", visible = FALSE))
)) %>%
formatStyle(
'Perturbation Score', 'Direction',
backgroundColor = styleEqual(c("Inhibited", "Activation"), c('lightblue', 'indianred'))
)
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05)
normalisedScores
fit <- normalisedScores %>%
left_join(metadata_example) %>%
mutate_at(vars(c("time", "PR")), as.factor) %>%
split(f = .$gs_name) %>%
#.["Estrogen signaling pathway"] %>%
lapply(function(x)lm(robustZ ~ 0 + treatment + treatment:PR, data = x)) %>%
lapply(summary)
normalisedScores
normalisedScores %>%
left_join(metadata_example) %>% pull(treatment) %>% table()
normalisedScores %>%
left_join(metadata_example)
permutedScore$`Glycolysis / Gluconeogenesis`
normalisedScores
ssPertScore
dim(ssPertScore)
dim(logCPM_example)
21 * 313
14 * 313
ssPertScore %>% split(f = .$gs_name) %>% .[1]
weightedFC$logFC
metadata_example
weightedFC$logFC
logCPM_example
#compute weighted single sample logFCs
weightedFC <- weight_ssFC(logCPM_example, metadata = metadata_example,
factor = "patient", control = "Vehicle")
weightedFC$logFC
ssPertScore <- perturbationScore(weightedFC$logFC, gsTopology)
ssPertScore
ssPertScore %>% split(f = .$gs_name) %>% .[1]
normalisedScores <- normaliseByPermutation(permutedScore, ssPertScore)
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05)
fit <- normalisedScores %>%
left_join(metadata_example) %>%
mutate_at(vars(c("time", "PR")), as.factor) %>%
split(f = .$gs_name) %>%
#.["Estrogen signaling pathway"] %>%
lapply(function(x)lm(robustZ ~ 0 + treatment + treatment:PR, data = x)) %>%
lapply(summary)
treat_sig <- sapply(names(fit), function(x){
fit[[x]]$coefficients %>%
as.data.frame() %>%
dplyr::select(Estimate,
pvalue = `Pr(>|t|)` ) %>%
rownames_to_column("Comparison") %>%
mutate(gs_name = x,
FDR = p.adjust(pvalue, "fdr"),
Comparison = str_remove_all(Comparison, "treatment|PR"))
}, simplify = FALSE) %>%
bind_rows()
%>%
treat_sig %>%
dplyr::filter(FDR < 0.05)
normalisedScores
normalisedScores %>%
split(f = .$sample) %>%
.[[1]]
normalisedScores %>%
split(f = .$sample) %>%
.[[1]] %>%
mutate(FDR = p.adjust(pvalue, "fdr"))
normalisedScores %>%
split(f = .$sample) %>%
.[[10]] %>%
mutate(FDR = p.adjust(pvalue, "fdr"))
normalisedScores %>%
split(f = .$sample) %>%
.[[10]] %>%
mutate(FDR = vapply(pvalue, p.adjust, "fdr"))
normalisedScores %>%
split(f = .$sample) %>%
.[[10]] %>%
mutate(FDR = vapply(pvalue, function(x){p.adjust(x, "fdr")}, numeric(1)))
