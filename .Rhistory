"Rcpp" = {test4 <- generate_PermutedScore(logCPM_example[1:100, ], numOfTreat = 3, NB = 100, gsTopology = gsTopology, weight = weightedFC$weight[1:100])},
times = 1
)
system.time(test1 <- normaliseByPermutation_R(logCPM_example, metadata_example,
factor = "patient", control = "Vehicle", NB = 1000, gsTopology = gsTopology, weight = weightedFC$weight))
lapply(abs(det(gsTopology)) < tol)
lapply(gsTopology, function(x){abs(det(x)) < tol})
tol = 1e-7
lapply(gsTopology, function(x){abs(det(x)) < tol})
gsTopology <- gsTopology[lapply(gsTopology, function(x){abs(det(x)) > tol})]
gsTopology <- gsTopology[lapply(gsTopology, function(x){abs(det(x)) > tol}),]
lapply(gsTopology, function(x){abs(det(x)) > tol})
gsTopology <- gsTopology[[lapply(gsTopology, function(x){abs(det(x)) > tol})]]
gsTopology <- gsTopology[lapply(gsTopology, function(x){abs(det(x)) > tol})]
gsTopology <- gsTopology[sapply(gsTopology, function(x){abs(det(x)) > tol})]
length(gsTopology)
test3
test1[[1]]
load_all()
length(test1)
dim(test1[[1]])
microbenchmark(
t1 = permutedScore_PARALLEL(test1, gsTopology, ncores = 2),
t2 = permutedScore_PARALLEL_alt(test1, gsTopology, ncores = 2),
times = 1
)
microbenchmark(
t1 = permutedScore_PARALLEL(test1[1:5], gsTopology, ncores = 2),
t2 = permutedScore_PARALLEL_alt(test1[1:5], gsTopology, ncores = 2),
times = 1
)
45 * 200/60
150/60
microbenchmark(
t1 = permutedScore_PARALLEL(test1[1:5], gsTopology, ncores = 6),
t2 = permutedScore_PARALLEL_alt(test1[1:5], gsTopology, ncores = 6),
times = 1
)
microbenchmark(
t1 = permutedScore_PARALLEL(test1[1:5], gsTopology, ncores = 3),
t2 = permutedScore_PARALLEL_alt(test1[1:5], gsTopology, ncores = 3),
times = 1
)
microbenchmark(
t1 = permutedScore_PARALLEL(test1[1:5], gsTopology, ncores = 2),
t2 = permutedScore_PARALLEL_alt(test1[1:5], gsTopology, ncores = 2),
times = 1
)
microbenchmark(
"BiocParallel_2core" = {test1 <- normaliseByPermutation_R(logCPM_example[1:100, ], metadata_example,
factor = "patient", control = "Vehicle", NB = 100, gsTopology = gsTopology, weight = weightedFC$weight[1:100])
test3 <- permutedScore_PARALLEL(test1, gsTopology, ncores = 2)},
"BiocParallel_24core" = {test1 <- normaliseByPermutation_R(logCPM_example[1:100, ], metadata_example,
factor = "patient", control = "Vehicle", NB = 100, gsTopology = gsTopology, weight = weightedFC$weight[1:100])
test3 <- permutedScore_PARALLEL(test1, gsTopology, ncores = 4)},
"Rcpp" = {test4 <- generate_PermutedScore(logCPM_example[1:100, ], numOfTreat = 3, NB = 100, gsTopology = gsTopology, weight = weightedFC$weight[1:100])},
times = 1
)
test1[[1]]
microbenchmark(
"BiocParallel_2core" = {test3 <- permutedScore_PARALLEL(test1, gsTopology, ncores = 2)},
"BiocParallel_4core" = {test3 <- permutedScore_PARALLEL(test1, gsTopology, ncores = 4)},
"Rcpp" = {test4 <- generate_PermutedScore(logCPM_example[1:100, ], numOfTreat = 3, NB = 100, gsTopology = gsTopology, weight = weightedFC$weight[1:100])},
times = 1
)
microbenchmark(
"BiocParallel_2core" = {test3 <- permutedScore_PARALLEL(test1[1:10], gsTopology[1:10], ncores = 2)},
"BiocParallel_4core" = {test3 <- permutedScore_PARALLEL(test1[1:10], gsTopology[1:10], ncores = 4)},
"Rcpp" = {test4 <- generate_PermutedScore(logCPM_example[1:100, ], numOfTreat = 3, NB = 10, gsTopology = gsTopology[1:10], weight = weightedFC$weight[1:100])},
times = 1
)
microbenchmark(
"BiocParallel_2core" = {test3 <- permutedScore_PARALLEL(test1[1:10], gsTopology[1:10], ncores = 2)},
"BiocParallel_4core" = {test3 <- permutedScore_PARALLEL(test1[1:10], gsTopology[1:10], ncores = 4)},
"Rcpp" = {test4 <- generate_PermutedScore(logCPM_example, numOfTreat = 3, NB = 10, gsTopology = gsTopology[1:10], weight = weightedFC$weight)},
times = 1
)
load_all()
load_all()
load_all()
pkgbuild::check_build_tools(debug = TRUE)
load_all()
document()
library(devtools)
load_all()
devtools::load_all()
devtools::load_all()
library(SSPT)
document()
library(devtools)
load_all()
load_all()
library(SSPT)
permutedFC_RCPP_test
load_all()
if (!requireNamespace("BiocManager", quietly=TRUE))install.packages("BiocManager")
BiocManager::install("SSPT")
if (!requireNamespace("AnnotationHub", quietly=TRUE))BiocManager::install("AnnotationHub")
if (!requireNamespace("ensembldb", quietly=TRUE))BiocManager::install("ensembldb")
ah <- AnnotationHub::AnnotationHub()
ah <- AnnotationHub::subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM_example) <- ensembldb::mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
head(logCPM_example)
load_all()
#compute weighted single sample logFCs
weightedFC <- weight_ssFC(logCPM_example, metadata = metadata_example,
factor = "patient", control = "Vehicle")
perSample_FC <- sapply(unique(metadata_example$patient), function(x){
temp <- logCPM_example[1:1000,str_detect(colnames(logCPM_example), x)]
ratio <- temp[, str_detect(colnames(temp), "E2")] - temp[, str_detect(colnames(temp), "Vehicle")]
ratio %>%
enframe(name = "gene_id",
value = x)
}, simplify = FALSE) %>%
Reduce(left_join,.)
library(tidyverse)
library(magrittr)
library(ggplot2)
library(cowplot)
ssPertScore <- perturbationScore(weightedFC$logFC, gsTopology)
# weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "gsTopology.rda")
load(system.file("extdata", "gsTopology.rda", package = "SSPT"))
head(gsTopology$`Glycolysis / Gluconeogenesis`)
ssPertScore <- perturbationScore(weightedFC$logFC, gsTopology)
ssPertScore
check()
library(microbenchmark)
microbenchmark(
"old" = {test1 <- SSPT::permutedFC_RCPP(logCPM_example, 10, 3, weightedFC$weight)},
"new" = {test2 <- SSPT::permutedFC_RCPP_test(logCPM_example, 10, 3, weightedFC$weight)},
times = 1
)
test1
pkgbuild::check_build_tools(debug = TRUE)
document()
load_all()
load_all()
load_all()
microbenchmark(
"old" = {test1 <- SSPT::permutedFC_RCPP(logCPM_example, 10, 3, weightedFC$weight)},
"new" = {test2 <- SSPT::permutedFC_RCPP_test(logCPM_example, 10, 3, weightedFC$weight)},
times = 1
)
microbenchmark(
"old" = {test1 <- SSPT::permutedFC_RCPP(logCPM_example, 10, 3, weightedFC$weight)},
"new" = {test2 <- SSPT::permutedFC_RCPP_test(logCPM_example, 10, 3, weightedFC$weight)},
times = 1
)
microbenchmark(
"old" = {test1 <- SSPT::permutedFC_RCPP(logCPM_example, 10, 3, weightedFC$weight)},
"new" = {test2 <- SSPT::permutedFC_RCPP_test(logCPM_example, 10, 3, weightedFC$weight)},
times = 1
)
microbenchmark(
"old" = {test1 <- SSPT::permutedFC_RCPP(logCPM_example, 10, 3, weightedFC$weight)},
"new" = {test2 <- SSPT::permutedFC_RCPP_test(logCPM_example, 10, 3, weightedFC$weight)},
times = 10
)
microbenchmark(
"old" = {test1 <- SSPT::permutedFC_RCPP(logCPM_example, 10, 3, weightedFC$weight)},
"new" = {test2 <- SSPT::permutedFC_RCPP_test(logCPM_example, 10, 3, weightedFC$weight)},
times = 100
)
microbenchmark(
"old" = {test1 <- SSPT::permutedFC_RCPP(logCPM_example, 10, 3, weightedFC$weight)},
"new" = {test2 <- SSPT::permutedFC_RCPP_test(logCPM_example, 10, 3, weightedFC$weight)},
times = 100
)
microbenchmark(
"old" = {test1 <- SSPT::permutedFC_RCPP(logCPM_example, 10, 3, weightedFC$weight)},
"new" = {test2 <- SSPT::permutedFC_RCPP_test(logCPM_example, 10, 3, weightedFC$weight)},
times = 1000
)
load_all()
permutedFC <- SSPT::permutedFC_RCPP(logCPM_example, 10, 3, weightedFC$weight)
permutedFC[[1]]
head(permutedFC[[2]])
head(permutedFC[[1]])
microbenchmark(
"Parallel_4core" = {test1 <- SSPT::permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- generate_PermutedScore(logCPM_example, NB = 10, 3, weightedFC$weight)},
times = 5
)
microbenchmark(
"Parallel_4core" = {test1 <- SSPT::permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- generate_PermutedScore(logCPM_example, NB = 10, 3, weightedFC$weight)},
times = 5
)
permutedFC
gsTopology
BPPARAM <- BiocParallel::registered()[[1]]
4
BPPARAM$workers <- 4
system.time(BiocParallel::bplapply(permutedFC, function(x){
lapply(gsTopology, function(y){.ssPertScore(y, x)})
}, BPPARAM = BPPARAM))
is.list(permutedFC)
.ssPertScore(gsTopology[[1], permutedFC[[1]]])
.ssPertScore(gsTopology[[1]], permutedFC[[1]])
head(permutedFC[[1]])
microbenchmark(
"Parallel_4core" = {permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4)
test1 <- SSPT::permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- generate_PermutedScore(logCPM_example, NB = 10, 3, weightedFC$weight)},
times = 3
)
microbenchmark(
"Parallel_4core" = {permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4)
test1 <- SSPT::permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- generate_PermutedScore(logCPM_example, NB = 10, 3, weight = weightedFC$weight)},
times = 3
)
test1 <- SSPT::permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- generate_PermutedScore(logCPM_example, gsTopology = gsTopology,
NB = 10, 3, weight = weightedFC$weight)},
times = 3
microbenchmark(
"Parallel_4core" = {permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4)
test1 <- SSPT::permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- generate_PermutedScore(logCPM_example, gsTopology = gsTopology,
NB = 10, 3, weight = weightedFC$weight)},
times = 3
)
microbenchmark(
"Parallel_4core" = {permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4, seed = 123)
test1 <- SSPT::permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- generate_PermutedScore(logCPM_example, gsTopology = gsTopology,
NB = 10, 3, weight = weightedFC$weight)},
times = 3
)
load_all()
permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4, seed = 123)
permutedFC[[1]]
microbenchmark(
"Parallel_4core" = {permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4, seed = 123)
test1 <- SSPT::permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- generate_PermutedScore(logCPM_example, gsTopology = gsTopology,
NB = 10, 3, weight = weightedFC$weight)},
times = 3
)
SSPT::permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)
dim(permutedFC[[1]])
head(gsTopology$`Glycolysis / Gluconeogenesis`)
#' #' @param logCPM
#' #' @param metadata
#' #' @param factor
#' #' @param control
#' #' @param BPPARAM
#' #' @param seed
#' #'
#' #' @return
#' #'
#' #' @examples
.generate_permutedFC <- function(logCPM, metadata, factor, control, weight, NB, seed, ncores = 6){
metadata <- as.data.frame(metadata)
pairs <- unique(metadata[,factor])
sampleInpairs <- sapply(pairs, function(x){
contrSample <- dplyr::filter(metadata, treatment == control, !!sym(factor) == x)
contrSample <- pull(contrSample, sample)
treatedSample <- dplyr::filter(metadata, treatment != control, !!sym(factor) == x)
treatedSample <- pull(treatedSample, sample)
list(contrSample = contrSample, treatedSample = treatedSample)
}, simplify = FALSE)
nSample <- nrow(metadata)
logCPM <- as.matrix(logCPM)
rownames(logCPM) <- paste("ENTREZID:", rownames(logCPM), sep = "")
if (length(intersect(rownames(logCPM), unlist(unname(lapply(gsTopology, rownames))))) == 0)
stop("None of the expressed gene was matched to pathways. Check if gene identifiers match")
# test if the required number of permutations is bigger than the maximum number of permutations possible
NB <- min(NB, factorial(ncol(logCPM)))
# set expression values and weights of unexpressed pathway genes to 0
notExpressed <- setdiff(unique(unlist(unname(lapply(gsTopology, rownames)))), rownames(logCPM))
if (length(notExpressed) != 0){
temp <- matrix(0, nrow = length(notExpressed), ncol = ncol(logCPM))
rownames(temp) <- notExpressed
colnames(temp) <- colnames(logCPM)
logCPM <- rbind(logCPM, temp)
weight <- c(weight, rep(0, length(notExpressed)))
}
set.seed(seed)
BPPARAM <- BiocParallel::registered()[[1]]
BPPARAM$workers <- ncores
BiocParallel::bplapply(1:NB, function(x){
# permute sample labels to get permuted logCPM
colnames(logCPM) <- sample(colnames(logCPM), ncol(logCPM))
# Built permuted logFCs based on the permuted logCPM
permutedFC <- sapply(names(sampleInpairs), function(y){
logCPM[, sampleInpairs[[y]]$treatedSample] - logCPM[, sampleInpairs[[y]]$contrSample]
}, simplify = FALSE)
permutedFC <- do.call(cbind,permutedFC)
# Multiply permuted FCs by gene-wise weights
permutedFC * weight
}, BPPARAM = BPPARAM)
}
permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4, seed = 123)
head(permutedFC[[1]])
microbenchmark(
"Parallel_4core" = {permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4, seed = 123)
test1 <- SSPT::permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- generate_PermutedScore(logCPM_example, gsTopology = gsTopology,
NB = 10, 3, weight = weightedFC$weight)},
times = 3
)
microbenchmark(
"Parallel_4core" = {permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 100,
ncores = 4, seed = 123)
test1 <- SSPT::permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- generate_PermutedScore(logCPM_example, gsTopology = gsTopology,
NB = 100, 3, weight = weightedFC$weight)},
times = 5
)
microbenchmark(
"Parallel_4core" = {permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4, seed = 123)
test1 <- SSPT::permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- generate_PermutedScore(logCPM_example, gsTopology = gsTopology,
NB = 10, 3, weight = weightedFC$weight)},
times = 5
)
3300/60
system.time(permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4, seed = 123))
solve
solve()
test1[[1]]
length(test1)
test1[[1]] %>% length()
keys <- test1[[1]]
do.call(mapply, c(FUN=c, lapply(test1, `[`, keys)))
unlist(test1)
test1[[1]]
.ssPertScore_alt <- function(adjMatrix, weightedFC, tol = 1e-7){
# if pathway adjacency matrix is not invertible, output NULL
d <- abs(det(adjMatrix))
if (d < tol) return(NULL)
# subset pathway genes' expression
x <- weightedFC[rownames(adjMatrix), ]
sapply(1:ncol(x), function(y)sum(.Internal(La_solve(adjMatrix, -y, tol)) - y))
}
.ssPertScore_alt(permutedFC[[1], gsTopology[[1]]])
.ssPertScore_alt(permutedFC[[1]], gsTopology[[1]])
.ssPertScore_alt <- function(adjMatrix, weightedFC, tol = 1e-7){
# if pathway adjacency matrix is not invertible, output NULL
d <- abs(det(adjMatrix))
if (d < tol) return(NULL)
# subset pathway genes' expression
x <- weightedFC[rownames(adjMatrix), ]
sapply(1:ncol(x), function(y)sum(.Internal(La_solve(adjMatrix, -(x[,y]), tol)) - x[,y]))
}
.ssPertScore_alt(permutedFC[[1]], gsTopology[[1]])
.ssPertScore_alt( gsTopology[[1]], permutedFC[[1]])
.ssPertScore_alt( gsTopology[[121]], permutedFC[[1]])
.ssPertScore_alt( gsTopology[[127]], permutedFC[[1]])
#' Title
#'
#' @param permutedFC
#' @param gsTopology
#' @param ncores
#'
#' @return
#' @export
#'
#' @examples
permutedScore_PARALLEL <- function(permutedFC, gsTopology, ncores, tol = 1e-7){
BPPARAM <- BiocParallel::registered()[[1]]
BPPARAM$workers <- ncores
BiocParallel::bplapply(permutedFC, function(x){
sapply(gsTopology, function(y){.ssPertScore(y, x)})
}, BPPARAM = BPPARAM)
}
microbenchmark(
"Parallel_4core" = {permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4, seed = 123)
test1 <- SSPT::permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)},
"Rcpp" = {test2 <- generate_PermutedScore(logCPM_example, gsTopology = gsTopology,
NB = 10, 3, weight = weightedFC$weight)},
times = 5
)
test1 <- SSPT::permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)
test1[[1]]
#' Title
#'
#' @param permutedFC
#' @param gsTopology
#' @param ncores
#'
#' @return
#' @export
#'
#' @examples
permutedScore_PARALLEL <- function(permutedFC, gsTopology, ncores, tol = 1e-7){
BPPARAM <- BiocParallel::registered()[[1]]
BPPARAM$workers <- ncores
BiocParallel::bplapply(permutedFC, function(x){
sapply(gsTopology, function(y){.ssPertScore(y, x)})
}, BPPARAM = BPPARAM)
}
test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)
test1[[1]]
permutedScore_PARALLEL
#' Title
#'
#' @param permutedFC
#' @param gsTopology
#' @param ncores
#'
#' @return
#' @export
#'
#' @examples
permutedScore_PARALLEL <- function(permutedFC, gsTopology, ncores, tol = 1e-7){
BPPARAM <- BiocParallel::registered()[[1]]
BPPARAM$workers <- ncores
BiocParallel::bplapply(gsTopology, function(x){
sapply(permutedFC, function(y){.ssPertScore(x, y)})
}, BPPARAM = BPPARAM)
}
test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)4
test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)
test1[[1]]
test1[[1]] %>% as.vector()
?apply
#' Title
#'
#' @param permutedFC
#' @param gsTopology
#' @param ncores
#'
#' @return
#' @export
#'
#' @examples
permutedScore_PARALLEL <- function(permutedFC, gsTopology, ncores, tol = 1e-7){
BPPARAM <- BiocParallel::registered()[[1]]
BPPARAM$workers <- ncores
BiocParallel::bplapply(gsTopology, function(x){
# as.vector(sapply(permutedFC, function(y){.ssPertScore(x, y)}))
apply(permutedFC, function(y){.ssPertScore(x, y)})
}, BPPARAM = BPPARAM)
}
test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)
BiocParallel::bplapply(gsTopology, function(x){
as.vector(sapply(permutedFC, function(y){.ssPertScore(x, y)}))
}, BPPARAM = BPPARAM)
#' Title
#'
#' @param permutedFC
#' @param gsTopology
#' @param ncores
#'
#' @return
#' @export
#'
#' @examples
permutedScore_PARALLEL <- function(permutedFC, gsTopology, ncores, tol = 1e-7){
BPPARAM <- BiocParallel::registered()[[1]]
BPPARAM$workers <- ncores
BiocParallel::bplapply(gsTopology, function(x){
as.vector(sapply(permutedFC, function(y){.ssPertScore(x, y)}))
}, BPPARAM = BPPARAM)
}
test1 <- permutedScore_PARALLEL(permutedFC, gsTopology, ncores = 4)
test1[[1]]
test1[[127]]
microbenchmark(
"Parallel_4core" = {permutedFC <- .generate_permutedFC(logCPM_example,metadata_example, "patient", "Vehicle", weightedFC$weight, NB = 10,
ncores = 4, seed = 123)},
"Rcpp" = {test2 <- permutedFC_RCPP(logCPM_example, NB = 10, 3, weight = weightedFC$weight)},
times = 5
)
load_all()
load_all()
load_all()
load_all()
load_all()
load_all()
rm(list = c(".generate_permutedFC", "permutedScore_PARALLEL"))
load_all()
library(tidyverse)
library(magrittr)
library(ggplot2)
library(cowplot)
colnames(logCPM_example)
if (!requireNamespace("AnnotationHub", quietly=TRUE))BiocManager::install("AnnotationHub")
if (!requireNamespace("ensembldb", quietly=TRUE))BiocManager::install("ensembldb")
ah <- AnnotationHub::AnnotationHub()
ah <- AnnotationHub::subset(ah,genome == "GRCh38" & title == "Ensembl 101 EnsDb for Homo sapiens")
ensDb <- ah[[1]]
rownames(logCPM_example) <- ensembldb::mapIds(ensDb, rownames(logCPM_example), "ENTREZID", keytype = "GENEID")
# Remove genes that couldn't be matched to entrez IDs
logCPM_example <- logCPM_example[!is.na(rownames(logCPM_example)),]
head(logCPM_example)
#compute weighted single sample logFCs
weightedFC <- weight_ssFC(logCPM_example, metadata = metadata_example,
factor = "patient", control = "Vehicle")
logCPM_example
load("~/SSPT/data/logCPM_example.rda")
logCPM_example
load_all()
logCPM_example
metadata_example
