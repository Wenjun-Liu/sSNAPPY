plot_gene_contribution(
genePertMatr  = genePertScore$`kegg.Proteoglycans in cancer` %>%
.[, match(sample_order, colnames(.))],
annotation_df = annotation_df,
filterBy = "mean",
topGene = 10,
mapEntrezID = entrez2name,
cluster_cols = FALSE,
color = rev(colorspace::divergex_hcl(100, palette = "RdBu")),
breaks = seq(-0.001, 0.001, length.out = 100),
annotation_colors = list(
`PR Status` = c(Positive = "darkgreen", Negative = "orange"),
`Z Range` = setNames(
colorRampPalette(c("navyblue", "white", "darkred"))(length(z_levels)),
z_levels
))
)
?plot_community
load(system.file("extdata", "gsAnnotation_df_reactome.rda", package = "sSNAPPY"))
load(system.file("extdata", "gsAnnotation_df_wiki.rda", package = "sSNAPPY"))
gsAnnotation_df_wiki
library(devtools)
load_all()
document()
check()
# if multiple dataset were provided
temp <- retrieve_topology(database = c("kegg", "path"), species = "hsapien",
keyword = "estrogen")
names(temp)
# if multiple dataset were provided
temp <- retrieve_topology(database = c("kegg", "react"), species = "hsapien",
keyword = "estrogen")
names(temp)
expect_equal(names(temp), c("kegg.Estrogen signaling pathway","reactome.Estrogen biosynthesis",
"reactome.RUNX1 regulates estrogen receptor mediated transcription",
"reactome.Extra-nuclear estrogen signaling","reactome.Estrogen-dependent gene expression",
"reactome.Estrogen-stimulated signaling through PRKCZ",
"reactome.Estrogen-dependent nuclear events downstream of ESR-membrane signaling"))
check()
BiocCheck::BiocCheck()
load("~/sSNAPPY/inst/extdata/gsAnnotation_df_reactome.rda")
gsAnnotation_df_reactome <- gsAnnotation_df_wiki
save(gsAnnotation_df_reactome, "inst/extdata/gsAnnotation_df_reactome.rda")
save(gsAnnotation_df_reactome, here::here("inst/extdata/gsAnnotation_df_reactome.rda"))
save(gsAnnotation_df_reactome, file = here::here("inst/extdata/gsAnnotation_df_reactome.rda"))
load("~/sSNAPPY/inst/extdata/gsAnnotation_df_reactome.rda")
?lm
?glm
?contrast.matrix
citation("DropletUtils")
BiocManager::install("DropletUtils")
citation("DropletUtils")
str_to_upper("Atggtgagcaagggcgaggaggataacatggccatcatcaaggagttcatgcgcttcaaggtgcacatggagggctccgtgaacggccacgagttcgagatcgagggcgagggcgagggccgcccctacgagggcacccagaccgccaagctgaaggtgaccaagggtggccccctgcccttcgcctgggacatcctgtcccctcagttcatgtacggctccaaggcctacgtgaagcaccccgccgacatccccgactacttgaagctgtccttccccgagggcttcaagtgggagcgcgtgatgaacttcgaggacggcggcgtggtgaccgtgacccaggactcctccctgcaggacggcgagttcatctacaaggtgaagctgcgcggcaccaacttcccctccgacggccccgtaatgcagaagaagaccatgggctgggaggcctcctccgagcggatgtaccccgaggacggcgccctgaagggcgagatcaagcagaggctgaagctgaaggacggcggccactacgacgctgaggtcaagaccacctacaaggccaagaagcccgtgcagctgcccggcgcctacaacgtcaacatcaagttggacatcacctcccacaacgaggactacaccatcgtggaacagtacgaacgcgccgagggccgccactccaccggcggcatggacgagctgtacaagtaa")
library(stringr)
str_to_upper("Atggtgagcaagggcgaggaggataacatggccatcatcaaggagttcatgcgcttcaaggtgcacatggagggctccgtgaacggccacgagttcgagatcgagggcgagggcgagggccgcccctacgagggcacccagaccgccaagctgaaggtgaccaagggtggccccctgcccttcgcctgggacatcctgtcccctcagttcatgtacggctccaaggcctacgtgaagcaccccgccgacatccccgactacttgaagctgtccttccccgagggcttcaagtgggagcgcgtgatgaacttcgaggacggcggcgtggtgaccgtgacccaggactcctccctgcaggacggcgagttcatctacaaggtgaagctgcgcggcaccaacttcccctccgacggccccgtaatgcagaagaagaccatgggctgggaggcctcctccgagcggatgtaccccgaggacggcgccctgaagggcgagatcaagcagaggctgaagctgaaggacggcggccactacgacgctgaggtcaagaccacctacaaggccaagaagcccgtgcagctgcccggcgcctacaacgtcaacatcaagttggacatcacctcccacaacgaggactacaccatcgtggaacagtacgaacgcgccgagggccgccactccaccggcggcatggacgagctgtacaagtaa")
library(devtools)
load_all()
?pathwayPertScore
?/pathwayPertScore
??pathwayPertScore
data(metadata_example)
data(logCPM_example)
metadata_example <- dplyr::mutate(metadata_example, treatment = factor(
treatment, levels = c("Vehicle", "E2+R5020", "R5020")))
ls <- weight_ss_fc(logCPM_example, metadata = metadata_example,
groupBy = "patient", treatColumn = "treatment", sampleColumn = "sample")
gsTopology <- retrieve_topology(database = "kegg", species = "hsapiens")
genePertScore <- raw_gene_pert(ls$weighted_logFC, gsTopology)
gsTopology <- retrieve_topology(database = "kegg", species = "hsapiens")
genePertScore <- raw_gene_pert(ls$weighted_logFC, gsTopology)
genePertScore[sapply(genePertScore, function(x){any(x != 0)})] %>% length()
length(genePertScore)
pathwayPertScore <- pathway_pert(genePertScore, ls$weighted_logFC)
pathwayPertScore %>%
split(f = .$gs_name) %>%
keep(~all(. != 0)) %>%
length()
pathwayPertScore %>%
split(f = .$gs_name) %>%
purrr::keep(~all(. != 0)) %>%
length()
pathwayPertScore %>%
split(f = .$gs_name) %>%
length()
load_all()
pathwayPertScore <- pathway_pert(genePertScore, ls$weighted_logFC)
x <- names(genePertScore)[1]
x
raw_per <- genePertScore[[x]][rownames(genePertScore[[x]]) %in% rownames(weightedFC), ]
# extract FC for pathway genes
sub_FC <- weightedFC[rownames(weightedFC) %in% rownames(raw_per),]
# match FC matrix with gene pert score gene and sample order
sub_FC <- sub_FC[
match(rownames(raw_per), rownames(sub_FC)),
match(colnames(raw_per), colnames(sub_FC))]
# extract FC from raw gene pert to get net gene pert
net_per <- raw_per - sub_FC
net_per
# sum within each column to get pathway-level pert
temp <- as.data.frame(apply(net_per, 2, sum))
temp
temp <- set_colnames(temp, "score")
temp <- set_colnames(temp, "score")
all(temp$score == 0)
x <- names(genePertScore)[10]
raw_per <- genePertScore[[x]][rownames(genePertScore[[x]]) %in% rownames(weightedFC), ]
# extract FC for pathway genes
sub_FC <- weightedFC[rownames(weightedFC) %in% rownames(raw_per),]
# match FC matrix with gene pert score gene and sample order
sub_FC <- sub_FC[
match(rownames(raw_per), rownames(sub_FC)),
match(colnames(raw_per), colnames(sub_FC))]
# extract FC from raw gene pert to get net gene pert
net_per <- raw_per - sub_FC
net_per
x <- "kegg.Estrogen signaling pathway"
raw_per <- genePertScore[[x]][rownames(genePertScore[[x]]) %in% rownames(weightedFC), ]
# extract FC for pathway genes
sub_FC <- weightedFC[rownames(weightedFC) %in% rownames(raw_per),]
# match FC matrix with gene pert score gene and sample order
sub_FC <- sub_FC[
match(rownames(raw_per), rownames(sub_FC)),
match(colnames(raw_per), colnames(sub_FC))]
# extract FC from raw gene pert to get net gene pert
net_per <- raw_per - sub_FC
net_per
# sum within each column to get pathway-level pert
temp <- as.data.frame(apply(net_per, 2, sum))
temp <- set_colnames(temp, "score")
all(temp$score == 0)
if(all(temp$score == 0)){
return(NULL)
} else{
temp <- rownames_to_column(temp, "sample")
mutate(temp, gs_name = x)
}
# sum pathway perturbation scores for each pathway
PF <- lapply(names(genePertScore), function(x){
raw_per <- genePertScore[[x]][rownames(genePertScore[[x]]) %in% rownames(weightedFC), ]
# extract FC for pathway genes
sub_FC <- weightedFC[rownames(weightedFC) %in% rownames(raw_per),]
# match FC matrix with gene pert score gene and sample order
sub_FC <- sub_FC[
match(rownames(raw_per), rownames(sub_FC)),
match(colnames(raw_per), colnames(sub_FC))]
# extract FC from raw gene pert to get net gene pert
net_per <- raw_per - sub_FC
# sum within each column to get pathway-level pert
temp <- as.data.frame(apply(net_per, 2, sum))
temp <- set_colnames(temp, "score")
if(all(temp$score == 0)){
return(NULL)
} else{
temp <- rownames_to_column(temp, "sample")
mutate(temp, gs_name = x)
}
})
PF %>% length()
PF[1]
PF[1:5]
bind_rows(PF)
temp <- bind_rows(PF)
temp. %>% split(f = .$gs_name) %>% length()
temp %>% split(f = .$gs_name) %>% length()
document()
load_all()
pathwayPertScore <- pathway_pert(genePertScore, ls$weighted_logFC)
pathwayPertScore %>% split(f = .$gs_name) %>% length()
pathwayPertScore <- pathway_pert(genePertScore, ls$weighted_logFC, drop = FALSE)
pathwayPertScore %>% split(f = .$gs_name) %>% length()
test_file("tests/testthat/test-genePertScore.R")
load_all()
permutedScore <- generate_permuted_scores(logCPM_example,
gsTopology = gsTopology, weight = ls$weight)
permute_Gene$`kegg.Glycolysis / Gluconeogenesis`
# remove the list element for pathways with linearly dependent
# topology matrices
permute_Gene <-  permute_Gene[!sapply( permute_Gene, is.null)]
# Sum gene-wise permuted scores to pathway-wise permtued scores
permute_path <- lapply(permute_Gene, function(x){
apply(x, 2, sum)
})
permute_path$`kegg.Glycolysis / Gluconeogenesis`
permute_path[lapply(permute_path, function(x){all(x == 0)})]
lapply(permute_path, function(x){all(x == 0)})
permute_path[lapply(permute_path, function(x){all(x == 0)})]
permute_path[sapply(permute_path, function(x){all(x == 0)})]
permute_path[!sapply(permute_path, function(x){all(x == 0)})]
document()
load_all()
report()
library(covr)
report()
y <- matrix(c(c(1:5, 2:6, 3:7), c(1:5, 2:6, 3:7)+ 0.2), 5, 6)
rownames(y) <- c("7105","8813","57147","55732","2268" )
colnames(y) <- c("patient1_control", "patient1_treat1", "patient1_treat2",
"patient2_control", "patient2_treat1", "patient2_treat2")
sample <- colnames(y) %>%
as.data.frame()
colnames(sample) <- c("sample")
sample <- sample %>%
dplyr::mutate(
treatment = vapply(.$sample, function(x){
stringr::str_split(x, "_")[[1]][2]
}, character(1)),
treatment = factor(treatment, levels = c("control", "treat1", "treat2")),
patient = vapply(.$sample, function(x){
stringr::str_split(x, "_")[[1]][1]
}, character(1)))
ssFC <- weight_ss_fc(y, sample, groupBy  = "patient", sampleColumn = "sample", treatColumn = "treatment")
pathwayDir <- system.file("extdata", "gsTopology.rda", package = "sSNAPPY")
load(pathwayDir)
# the number of pathways with at least one of those five genes in it
intersectName <- names(gsTopology[lapply(gsTopology, function(x){length(intersect(rownames(ssFC$weighted_logFC),rownames(x)))}) != 0])
y_withNA <- y
y_withNA[2,2] <- NA
# create logCPM matrix with gene_id as rownames (instead of entrezID required)
y_wrongIdentifier <- y
rownames(y_wrongIdentifier) <- c("ENSG00000000003","ENSG00000000419","ENSG00000000457","ENSG00000000460","ENSG00000000938")
ssFC_wrongIdentifier <- weight_ss_fc(y_wrongIdentifier, sample, groupBy  = "patient", sampleColumn = "sample", treatColumn = "treatment")
test_that("generate_permuted_scores returns error when expected", {
expect_error(generate_permuted_scores(y_wrongIdentifier, gsTopology = gsTopology,
weight = ssFC_wrongIdentifier$weight), "None of the expressed gene was matched to pathways. Check if gene identifiers match")
expect_error(generate_permuted_scores(y, gsTopology = gsTopology,
weight =ssFC$weight[1:10]), "Gene-wise weights do not match with the dimension of expreMatrix")
expect_error(generate_permuted_scores(y_withNA, gsTopology = gsTopology,
weight = ssFC$weight), "NA values not allowed")
# create a testScore data.frame containing wrong gs_name
testScore <- data.frame(
gs_name = 1:5
)
expect_error(generate_permuted_scores(y, gsTopology = gsTopology,
weight = ssFC$weight,
testScore = testScore),
"None of the pathways had non-zero test perturbation scores")
})
test_that(".generate_permutedFC produces the expected outcome", {
# if NB is provided, the number of column in the returned output should
# equal to the specified NB
temp <- .generate_permutedFC(y, NB = 2, weight = ssFC$weight)
expect_equal(dim(temp), c(nrow(y), 2))
})
test_that("generate_permuted_scores produces the expected outcome", {
genePertScore <- raw_gene_pert(ssFC$weighted_logFC, gsTopology)
ssPertScore <- pathway_pert( genePertScore, ssFC$weighted_logFC)
temp <- generate_permuted_scores(y, NB = 2, weight = ssFC$weight,
gsTopology = gsTopology,
testScore = ssPertScore)
expect_equal(length(temp), length(unique(ssPertScore$gs_name)))
expect_equal(length(temp[[1]]), 2)
# when NB isn't specified, the number of permuted scores generated for
# each pathway should equal sample size x (sample size -1)
temp <- generate_permuted_scores(y, weight = ssFC$weight,
gsTopology = gsTopology,
testScore = ssPertScore)
expect_equal(length(temp[[1]]), ncol(y)*(ncol(y) -1))
# When the column number isn't an even number, the maximum permutation pairs
# should still be sample size x (sample size -1)
temp <- generate_permuted_scores(y[,-1], weight = ssFC$weight,
gsTopology = gsTopology,
testScore = ssPertScore)
expect_equal(length(temp[[1]]), (ncol(y) -1)*(ncol(y) -2))
# If the required NB is bigger than the maxmimum number of permutations
# possible, exhuast permutation choice
temp <- generate_permuted_scores(y,  NB = 200,
weight = ssFC$weight,
gsTopology = gsTopology,
testScore = ssPertScore)
expect_equal(length(temp[[1]]), ncol(y)*(ncol(y) -1))
})
test_that("Test data.frame input for generate_permuted_scores", {
temp <- generate_permuted_scores(as.data.frame(y),
weight = ssFC$weight,
gsTopology = gsTopology[intersectName])
expect_equal(length(temp), length(intersectName))
expect_equal(length(temp[[1]]), ncol(y)*(ncol(y) -1))
})
temp
temp <- generate_permuted_scores(as.data.frame(y),
weight = ssFC$weight,
gsTopology = gsTopology[intersectName],
drop = FALSE)
expect_equal(length(temp), length(intersectName))
temp
load_all()
temp <- generate_permuted_scores(as.data.frame(y),
weight = ssFC$weight,
gsTopology = gsTopology[intersectName],
drop = FALSE)
expect_equal(length(temp), length(intersectName))
test_that("generate_permuted_scores produces the expected outcome", {
genePertScore <- raw_gene_pert(ssFC$weighted_logFC, gsTopology)
ssPertScore <- pathway_pert( genePertScore, ssFC$weighted_logFC)
temp <- generate_permuted_scores(y, NB = 2, weight = ssFC$weight,
gsTopology = gsTopology,
testScore = ssPertScore)
expect_equal(length(temp), length(unique(ssPertScore$gs_name)))
expect_equal(length(temp[[1]]), 2)
# when NB isn't specified, the number of permuted scores generated for
# each pathway should equal sample size x (sample size -1)
temp <- generate_permuted_scores(y, weight = ssFC$weight,
gsTopology = gsTopology,
testScore = ssPertScore)
expect_equal(length(temp[[1]]), ncol(y)*(ncol(y) -1))
# When the column number isn't an even number, the maximum permutation pairs
# should still be sample size x (sample size -1)
temp <- generate_permuted_scores(y[,-1], weight = ssFC$weight,
gsTopology = gsTopology,
testScore = ssPertScore)
expect_equal(length(temp[[1]]), (ncol(y) -1)*(ncol(y) -2))
# If the required NB is bigger than the maxmimum number of permutations
# possible, exhuast permutation choice
temp <- generate_permuted_scores(y,  NB = 200,
weight = ssFC$weight,
gsTopology = gsTopology,
testScore = ssPertScore)
expect_equal(length(temp[[1]]), ncol(y)*(ncol(y) -1))
# test that the drop parameter works
expect_equal(names(temp), "kegg.Chemokine signaling pathway")
})
report()
report()
report()
library(sSNAPPY)
library(tidyverse)
library(magrittr)
library(ggplot2)
library(cowplot)
library(DT)
library(htmltools)
library(patchwork)
logCPM <- read_tsv(here::here("data/logCPM.tsv"))
logCPM <- read_tsv(here::here("data/logCPM_vignette.tsv"))
logCPM <- read_tsv(here::here("data/logCPM_vignette.tsv"))
readr::local_edition(1)
logCPM <- read_tsv(here::here("data/logCPM_vignette.tsv"))
logCPM
save(logCPM, "data/logCPM.rda")
save(logCPM, file = "data/logCPM.rda")
sample_meta <- read_tsv(here::here("data/sample_vignette.tsv"), col_types = "cfccncnc")
save(sample_meta, file = "data/sample_meta.rda")
load_all()
data(logCPM)
logCPM
library(tidyverse)
library(magrittr)
library(ggplot2)
library(cowplot)
library(DT)
library(htmltools)
library(patchwork)
data(logCPM)
logCPM <- logCPM %>%
column_to_rownames("entrezid")
data(sample_meta)
head(sample_meta)
weightedFC <- weight_ss_fc(
as.matrix(logCPM), metadata = sample_meta,
sampleColumn = "sample", groupBy = "patient_id", treatColumn = "treatment"
)
glimpse(weightedFC)
logCPM %>%
mutate(
sd = apply(., 1, sd),
mean = apply(., 1, mean)
) %>%
ggplot(
aes(mean, sd)
) +
geom_point() +
geom_smooth(
method = "loess") +
labs(
x = expression(Gene-wise~average~expression~(bar(mu[g]))),
y = expression(Gene-wise~standard~deviation~(sigma[g]))
) +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title = element_text(size = 14)
)
set.seed(123)
random_pathways <- permutedScore %>%
keep(~all(. != 0)) %>%
length()
permutedScore <- readRDS(here::here("extdata/permutedScore_vignette.rds"))
permutedScore <- readRDS(here::here("inst/extdata/permutedScore_vignette.rds"))
gsTopology <- readRDS(here::here("inst/extdata/gsTopology_reactome.rds"))
genePertScore <- raw_gene_pert(weightedFC$weighted_logFC, gsTopology)
ssPertScore <- pathway_pert(genePertScore, weightedFC$weighted_logFC)
ssPertScore %>%
split(f = .$gs_name) %>%
keep(~all(. != 0)) %>%
length()
head(ssPertScore)
set.seed(123)
random_pathways <- permutedScore %>%
keep(~all(. != 0)) %>%
length()
.[sample(seq_along(.), 6)] %>%
as.data.frame() %>%
pivot_longer(
cols = everything(), names_to = "gs_name", values_to = "score"
) %>%
mutate(
gs_name = str_replace_all(gs_name, "\\.", " "),
gs_name = str_remove_all(gs_name, "reactome ")
)
library(sSNAPPY)
library(tidyverse)
library(magrittr)
library(ggplot2)
library(cowplot)
library(DT)
library(htmltools)
logCPM_example %>%
mutate(
sd = apply(., 1, sd),
mean = apply(., 1, mean)
) %>%
ggplot(
aes(mean, sd)
) +
geom_point() +
geom_smooth(
method = "loess") +
labs(
x = expression(Gene-wise~average~expression~(bar(mu[g]))),
y = expression(Gene-wise~standard~deviation~(sigma[g]))
) +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title = element_text(size = 14)
)
logCPM_example
logCPM_example %>%
as.data.frame() %>%
mutate(
sd = apply(., 1, sd),
mean = apply(., 1, mean)
) %>%
ggplot(
aes(mean, sd)
) +
geom_point() +
geom_smooth(
method = "loess") +
labs(
x = expression(Gene-wise~average~expression~(bar(mu[g]))),
y = expression(Gene-wise~standard~deviation~(sigma[g]))
) +
theme_bw() +
theme(
panel.grid = element_blank(),
axis.title = element_text(size = 14)
)
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05) %>%
left_join(metadata_example) %>%
mutate_at(vars(c("sample", "gs_name")), as.factor) %>%
mutate_if(is.numeric, sprintf, fmt = '%#.4f') %>%
mutate(Direction = ifelse(robustZ < 0, "Inhibited", "Activation")) %>%
dplyr::select(
sample, patient, Treatment = treatment,
`Perturbation Score` = robustZ, Direction,
`Gene-set name` = gs_name,
`P-value` = pvalue,
FDR = adjPvalue
) %>%
datatable(
filter = "top",
options = list(
columnDefs = list(list(targets = "Direction", visible = FALSE))
),
caption = htmltools::tags$caption(
htmltools::em(
"Pathways that were significant perturbed within individual samples.")
)
) %>%
formatStyle(
'Perturbation Score', 'Direction',
color = styleEqual(c("Inhibited", "Activation"), c("blue", "red"))
)
load(system.file("extdata", "normalisedScores.rda", package = "sSNAPPY"))
normalisedScores %>%
dplyr::filter(adjPvalue < 0.05) %>%
left_join(metadata_example) %>%
mutate_at(vars(c("sample", "gs_name")), as.factor) %>%
mutate_if(is.numeric, sprintf, fmt = '%#.4f') %>%
mutate(Direction = ifelse(robustZ < 0, "Inhibited", "Activation")) %>%
dplyr::select(
sample, patient, Treatment = treatment,
`Perturbation Score` = robustZ, Direction,
`Gene-set name` = gs_name,
`P-value` = pvalue,
FDR = adjPvalue
) %>%
datatable(
filter = "top",
options = list(
columnDefs = list(list(targets = "Direction", visible = FALSE))
),
caption = htmltools::tags$caption(
htmltools::em(
"Pathways that were significant perturbed within individual samples.")
)
) %>%
formatStyle(
'Perturbation Score', 'Direction',
color = styleEqual(c("Inhibited", "Activation"), c("blue", "red"))
)
