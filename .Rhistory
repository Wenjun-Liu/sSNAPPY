treatedSample <- metadata %>%
dplyr::filter(
treatment != control,
!!sym(factor) ==x
) %>%
pull(sample)
logCPM[, treatedSample] - logCPM[, contrSample] %>%
head()
}, simplify = FALSE) %>%
Reduce(., cbind)
sapply(pairs, function(x){
contrSample <- metadata %>%
dplyr::filter(
treatment == control,
!!sym(factor) == x
) %>%
pull(sample)
treatedSample <- metadata %>%
dplyr::filter(
treatment != control,
!!sym(factor) ==x
) %>%
pull(sample)
logCPM[, treatedSample] - logCPM[, contrSample] %>%
head()
}, simplify = FALSE) %>%
do.call(cbind,.)
model.matrix
install_github("steveped/spBioUtils")
library(spBioUtils)
?make_gs_network
devtools::load_all()
devtools::load_all()
compute_ssFC(logCPM, metadata, "patient", "Vehicle")
setequal(metadata[,"sample"], colnames(logCPM))
setequal(metadata[,"sample"], colnames(logCPM))
devtools::load_all()
compute_ssFC(logCPM, metadata, "patient", "Vehicle")
use_pipe()
warning()
warnings()
?use_package
use_package("dplyr")
?use_roxygen_md
devtools::install()
library(SSPT)
?devtools::document
devtools::document()
devtools::install()
library(SSPT)
devtools::check()
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
?glm.fit
devtools::install()
library(SSPT)
?SSPT::compute_ssFC
SSPT::compute_ssFC(logCPM, metadata, "patient", "Vehicle")
devtools::document()
devtools::install()
library(SSPT)
?SSPT::compute_ssFC
use_package("tidyverse")
check()
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools()
getOption("buildtools.check", NULL)
getOption("buildtools.check", NULL)("Building R package from source")
devtools::test()
library(devtools)
library(usethis)
library(testthat)
check()
install.packages('covr')
library(covr)
use_test(
"test_ssFC"
)
use_test(
"ssFC"
)
sd <- 0.3*sqrt(4/rchisq(100,df=3))
y <- matrix(rnorm(100*6,sd=sd),100,6)
rownames(y) <- paste("Gene",1:100)
y
LOGc
logCPM <- readRDS(here::here("data/logCPM.rds"))
logCPM[1:5, 1:20]
BiocManager::install("SPIA")
library(edgeR)
?cpm
y <- matrix(rnbinom(20,size=1,mu=10),5,4)
cpm(y)
y <- cpm(y)
y
sd <- 0.3*sqrt(4/rchisq(100,df=3))
y <- matrix(rnorm(100*6,sd=sd),100,6)
rownames(y) <- paste("Gene",1:100)
y <- cpm(y)
y <- matrix(rnbinom(20,size=1,mu=10),100,6)
rownames(y) <- paste("Gene",1:100)
y <- cpm(y)
y
?rnbinom
y <- matrix(rnbinom(20,size=1,mu=10),100,6)
rownames(y) <- paste("Gene",1:100)
y
matrix(rnbinom(20,size=1,mu=10),5,4)
y <- matrix(rnbinom(600,size=1,mu=10),100,6)
rownames(y) <- paste("Gene",1:100)
y <- cpm(y)
y
data(vbetaFA)
y <- matrix(rnbinom(60,size=1,mu=10),10,6)
y <- cpm(y)
rownames(y) <- paste("Gene",1:10)
colnames(y) <- c("patient1_control", "patient1_treat1", "patient1_treat2", "patient2_control", "patient2_treat1", "patient2_treat2")
y
colnames(y) %>%
as.data.frame(col.name = "sample")
?as.data.frame
colnames(y) %>%
as.data.frame(col.names = "sample")
colnames(y) %>%
as.data.frame() %>%
set_colnames("sample")
library(tidyverse)
colnames(y) %>%
as.data.frame() %>%
set_colnames("sample")
library(magrittr)
colnames(y) %>%
as.data.frame() %>%
set_colnames("sample")
colnames(y) %>%
as.data.frame(col.names = "sample")
use_package("stringr")
str_split(x, "_")[[1]][1]
sample <- colnames(y) %>%
as.data.frame() %>%
set_colnames("sample") %>%
mutate(
treatment = vapply(.$sample, function(x){
str_split(x, "_")[[1]][2]
}, character(1)),
patient = vapply(.$sample, function(x){
str_split(x, "_")[[1]][1]
}, character(1)))
sample
rnbinom(60,size=1,mu=10)
c(1:5, 2:6, 3:7)
c(1:5, 2:6, 3:7)+ 0.2
y <- matrix(c(c(1:5, 2:6, 3:7), c(1:5, 2:6, 3:7)+ 0.2), 5, 6)
y
rownames(y) <- paste("Gene",1:5)
colnames(y) <- c("patient1_control", "patient1_treat1", "patient1_treat2", "patient2_control", "patient2_treat1", "patient2_treat2")
sample <- colnames(y) %>%
as.data.frame() %>%
set_colnames("sample") %>%
mutate(
treatment = vapply(.$sample, function(x){
str_split(x, "_")[[1]][2]
}, character(1)),
patient = vapply(.$sample, function(x){
str_split(x, "_")[[1]][1]
}, character(1)))
y
samples
sample
?context
test_file()
test_file(here::here("tests/testthat/test_compute_ssFC.R"))
test_file(here::here("tests/testthat/test_compute_ssFC.R"))
test_file(here::here("tests/testthat/test_compute_ssFC.R"))
?expect_output
rep(c(1, 2, 1,2), each = 4)
y
logFC <- matrix(rep(c(1, 2, 1,2), each = 5), 5, 4)
logFC
structure(
c(`chr1:10` = 1L, `chr1:30` = 2L, `chr1:40` = 1L), .Dim = 3L,
.Dimnames = structure(list(c("chr1:10", "chr1:30", "chr1:40")), .Names = ""),
class = "table"
)
?expect_identical
expect_equal(ssFC, logFC)
ssFC <- compute_ssFC(y, sample, factor = "patient", control = "control")
expect_equal(ssFC, logFC)
logFC
rownames(logFC) <- paste("Gene",1:5)
colnames(logFC) <- c("patient1_treat1", "patient1_treat2",  "patient2_treat1", "patient2_treat2")
ssFC
logFC
expect_equal(ssFC, logFC)
test_file(here::here("tests/testthat/test_compute_ssFC.R"))
file_coverage("R/compute_ssFC.R", "tests/testthat/test_compute_ssFC.R")
covr <- file_coverage("R/compute_ssFC.R", "tests/testthat/test_compute_ssFC.R")
report(covr)
sample_nofactor <- colnames(y) %>%
as.data.frame() %>%
set_colnames("sample") %>%
mutate(
treatment = vapply(.$sample, function(x){
str_split(x, "_")[[1]][2]
}, character(1)))
sample_notreat <- colnames(y) %>%
as.data.frame() %>%
set_colnames("sample") %>%
mutate(
patient = vapply(.$sample, function(x){
str_split(x, "_")[[1]][1]
}, character(1)))
sample_noCont <- sample %>%
mutate(treatment = ifelse(treatment == "control", "treatment1", treatment))
sample_wrongDim <- sample[,1:5]
sample %>%
mutate(treatment = "control")
compute_ssFC(NULL, NULL, "patient", "control")
?expect_error
sample_noTreat <- sample %>%
mutate(treatment = "control")
compute_ssFC(y, sample_wrongDim, factor = "patient", control = "control")
sample_wrongDim <- sample[,1:5]
compute_ssFC(y, sample_wrongDim, factor = "patient", control = "control")
sample[, 1:5]
sample[, c(1:5)]
sample
sample_wrongDim <- sample[1:5,]
compute_ssFC(y, sample_wrongDim, factor = "patient", control = "control")
expect_error(compute_ssFC(y, sample_wrongDim, factor = "patient", control = "control"), "Sample metadata does not match with logCPM")
compute_ssFC(y, sample_nofactor, factor = "patient", control = "control")
sample_onlyContr <- sample %>%
mutate(treatment = "control")
compute_ssFC(y, sample_notreat, factor = "patient", control = "control")
compute_ssFC(y, sample_noCont, factor = "patient", control = "control")
compute_ssFC(y, onlyContr, factor = "patient", control = "control")
compute_ssFC(y, sample_onlyContr, factor = "patient", control = "control")
test_file(here::here("tests/testthat/test_compute_ssFC.R"))
devtools::build()
library(SSPT)
test_file(here::here("tests/testthat/test_compute_ssFC.R"))
library(AnnotationHub)
library(magrittr)
library(devtools)
library(stringr)
library(testthat)
library(microbenchmark)
check()
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
library(graphite)
?pathways
pathwayDatabases()
use_package("graphite")
?convertIdentifiers
>prepareSPIA()
?prepareSPIA
?tempdir
?tempfile
library(AnnotationHub)
library(magrittr)
library(devtools)
library(stringr)
library(testthat)
library(microbenchmark)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
check()
tempfile(c("ab", "a b c"))
tempdir()
?prepareSPIA
# prepare the topologies for SPIA algorithm
outputDir <- tempdir()
paste(outputDir, "/pathway")
tempfile()
species <- "hsapiens"
database <- "reactome"
pys <- pathways(species, database)
library(grpahite)
library(graphite)
pys <- pathways(species, database)
edges(pys[[1]])
# always convert pathway nodes identifier to entrez ID
pys <- convertIdentifiers(pys, "ENTREZID")
# always convert pathway nodes identifier to entrez ID
pys <- suppressMessages(convertIdentifiers(pys, "ENTREZID"))
length(pys)
pys <- pys[1:10]
# always convert pathway nodes identifier to entrez ID
pys <- suppressMessages(convertIdentifiers(pys, "ENTREZID"))
edges(pys[[1]])
# prepare the topologies for SPIA algorithm
outputDir <- tempfile()
prepareSPIA(pys, outputDir)
outputDir
paste(outputDir, ".RData", sep = "")
load(paste(outputDir, ".RData", sep = ""))
load(paste(outputDir, "SPIA.RData", sep = ""))
ls()[ls() != "fileName"]
ls()
load_all()
names(pys)
pathways()
?pathways
pathwayDatabases()
supportedDatabse <- graphite::pathwayDatabase()
pathwayDatabases()
supportedDatabse <- graphite::pathwayDatabases()
pathwayName <- names(pys[1,3])
pathwayName
pathwayName <- names(pys[1:3])
pathwayName
pathwayName <- C(pathwayName, "random")
pathwayName <- c(pathwayName, "random")
any(pathwayName %in% names(pys))
pathwayName <- c(pathwayName[1], "random")
pathwayName
any(pathwayName %in% names(pys))
load_all()
?pathwayDatabases
pathwayDatabases()
# # retrieve pathway info using `graphite`s
system.time(weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "data/BminsI(test).rds"))
!species %in% supportedDatabse$species
!species %in% supportedDatabse$species | !database %in% supportedDatabse$database
load_all()
system.time(ssPertScore <- perturbationScore(weightedFC$logFC, here::here("data/BminsI.rds"))
)
# # retrieve pathway info using `graphite`s
system.time(weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "data/BminsI(test).rds"))
?all
all(c(!species %in% supportedDatabse$species,!database %in% supportedDatabse$database))
any(c(!species %in% supportedDatabse$species,!database %in% supportedDatabse$database))
species
database
database <- "test"
any(c(!species %in% supportedDatabse$species,!database %in% supportedDatabse$database))
species < - "doggo"
species <- "doggo"
any(c(!species %in% supportedDatabse$species,!database %in% supportedDatabse$database))
database <- "kegg"
any(c(!species %in% supportedDatabse$species,!database %in% supportedDatabse$database))
load_all()
# # retrieve pathway info using `graphite`s
system.time(weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "data/BminsI(test).rds"))
supportedDatabase <- graphite::pathwayDatabases()
supportedDatabase$species
supportedDatabase$database
load_all()
# # retrieve pathway info using `graphite`s
system.time(weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "data/BminsI(test).rds"))
pathwayName = NULL
is.null(pathwayName)
!is.null(pathwayName)
.retrieveTopology(species = "hsapiens", database = "kegg")
?get
rm(path.info)
rm(pys)
rm(supportedDatabse)
system.time(.retrieveTopology(species = "hsapiens", database = "kegg"))
load(
/var/folders/h4/tjtz05_x709d1pk_r84xgrq00000gn/T//RtmpknrpBa/file93640a90d10SPIA.RData
)
load(
"/var/folders/h4/tjtz05_x709d1pk_r84xgrq00000gn/T//RtmpknrpBa/file93640a90d10SPIA.RData"
)
rm(path.info)
load_all()
system.time(.retrieveTopology(species = "hsapiens", database = "kegg"))
load_all()
system.time(.retrieveTopology(species = "hsapiens", database = "kegg"))
species = "hsapiens", database = "kegg"
species = "hsapiens"
database = "kegg"
ls()
ls()[ls() != paste(outputDir, "SPIA.RData", sep = "")]
load_all()
system.time(.retrieveTopology(species = "hsapiens", database = "kegg"))
check()
check()
library(devtolls)
library(devtools)
check()
library(devtolls)
library(AnnotationHub)
library(magrittr)
library(devtools)
library(stringr)
library(testthat)
library(microbenchmark)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
system.time(weightedFC <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", "Vehicle"))
# # retrieve pathway info using `graphite`s
system.time(weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "data/BminsI(test).rds"))
# this now takes 108 seconds to run
system.time(ssPertScore <- perturbationScore(weightedFC$logFC, here::here("data/BminsI.rds")))
load_all()
load_all()
load_all()
load_all()
.ssPertScore <- function(BminsI, weightedFC){
sapply(names(BminsI), function(x){
#' Title
#'
#' @param BminsI
#' @param weightedFC
#'
#' @return
.ssPertScore <- function(BminsI, weightedFC){
sapply(names(BminsI), function(x){
if (abs(det(BminsI[[x]])) > 1e-7){
sapply(colnames(weightedFC), function(y){
delE  <- weightedFC[,y]
delE  <- delE[rownames(BminsI[[x]])]
# If any of the pathway gene was not expressed, set the ssLogFC to 0
delE  <- replace(delE, is.na(delE), 0)
PF <- solve(BminsI[[x]], -delE)
x <- sum(PF - delE)
})
} else {
# if determinant of the pathway topology is not positive, the equation does not have a unique solution
x <- NULL
}
}, simplify = FALSE)
}
}
)
}
load_all()
use_rcpp_eigen()
load_all()
load_all()
Rcpp::evalCpp("1+1")
library(devtools)
load_all()
load_all()
load_all()
load_all()
library(devtools)
load_all()
load_all()
Rcpp::evalCpp("1+1")
unlink("~/.R/Makevars")
unlink("~/.Renviron")
Rcpp::evalCpp("1+1")
library(Rcpp)
Rcpp::evalCpp("1+1")
Rcpp::evalCpp("1+1")
library(Rcpp)
Rcpp::evalCpp("1+1")
library(devtools)
load_all()
load_all()
library(devtools)
load_all()
load_all()
library(devtools)
load_all()
set(CMAKE_OSX_SYSROOT "")
load_all()
load_all()
library(AnnotationHub)
library(magrittr)
library(devtools)
library(stringr)
library(testthat)
library(Rcpp)
library(microbenchmark)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
system.time(weightedFC <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", "Vehicle"))
load_all()
getwd()
library(devtools)
load_all()
library(devtools)
load_all()
