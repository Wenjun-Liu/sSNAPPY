logCPM <- logCPM[!is.na(rownames(logCPM)),]
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
library(graphite)
?pathways
pathwayDatabases()
use_package("graphite")
?convertIdentifiers
>prepareSPIA()
?prepareSPIA
?tempdir
?tempfile
library(AnnotationHub)
library(magrittr)
library(devtools)
library(stringr)
library(testthat)
library(microbenchmark)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
check()
tempfile(c("ab", "a b c"))
tempdir()
?prepareSPIA
# prepare the topologies for SPIA algorithm
outputDir <- tempdir()
paste(outputDir, "/pathway")
tempfile()
species <- "hsapiens"
database <- "reactome"
pys <- pathways(species, database)
library(grpahite)
library(graphite)
pys <- pathways(species, database)
edges(pys[[1]])
# always convert pathway nodes identifier to entrez ID
pys <- convertIdentifiers(pys, "ENTREZID")
# always convert pathway nodes identifier to entrez ID
pys <- suppressMessages(convertIdentifiers(pys, "ENTREZID"))
length(pys)
pys <- pys[1:10]
# always convert pathway nodes identifier to entrez ID
pys <- suppressMessages(convertIdentifiers(pys, "ENTREZID"))
edges(pys[[1]])
# prepare the topologies for SPIA algorithm
outputDir <- tempfile()
prepareSPIA(pys, outputDir)
outputDir
paste(outputDir, ".RData", sep = "")
load(paste(outputDir, ".RData", sep = ""))
load(paste(outputDir, "SPIA.RData", sep = ""))
ls()[ls() != "fileName"]
ls()
load_all()
names(pys)
pathways()
?pathways
pathwayDatabases()
supportedDatabse <- graphite::pathwayDatabase()
pathwayDatabases()
supportedDatabse <- graphite::pathwayDatabases()
pathwayName <- names(pys[1,3])
pathwayName
pathwayName <- names(pys[1:3])
pathwayName
pathwayName <- C(pathwayName, "random")
pathwayName <- c(pathwayName, "random")
any(pathwayName %in% names(pys))
pathwayName <- c(pathwayName[1], "random")
pathwayName
any(pathwayName %in% names(pys))
load_all()
?pathwayDatabases
pathwayDatabases()
# # retrieve pathway info using `graphite`s
system.time(weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "data/BminsI(test).rds"))
!species %in% supportedDatabse$species
!species %in% supportedDatabse$species | !database %in% supportedDatabse$database
load_all()
system.time(ssPertScore <- perturbationScore(weightedFC$logFC, here::here("data/BminsI.rds"))
)
# # retrieve pathway info using `graphite`s
system.time(weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "data/BminsI(test).rds"))
?all
all(c(!species %in% supportedDatabse$species,!database %in% supportedDatabse$database))
any(c(!species %in% supportedDatabse$species,!database %in% supportedDatabse$database))
species
database
database <- "test"
any(c(!species %in% supportedDatabse$species,!database %in% supportedDatabse$database))
species < - "doggo"
species <- "doggo"
any(c(!species %in% supportedDatabse$species,!database %in% supportedDatabse$database))
database <- "kegg"
any(c(!species %in% supportedDatabse$species,!database %in% supportedDatabse$database))
load_all()
# # retrieve pathway info using `graphite`s
system.time(weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "data/BminsI(test).rds"))
supportedDatabase <- graphite::pathwayDatabases()
supportedDatabase$species
supportedDatabase$database
load_all()
# # retrieve pathway info using `graphite`s
system.time(weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "data/BminsI(test).rds"))
pathwayName = NULL
is.null(pathwayName)
!is.null(pathwayName)
.retrieveTopology(species = "hsapiens", database = "kegg")
?get
rm(path.info)
rm(pys)
rm(supportedDatabse)
system.time(.retrieveTopology(species = "hsapiens", database = "kegg"))
load(
/var/folders/h4/tjtz05_x709d1pk_r84xgrq00000gn/T//RtmpknrpBa/file93640a90d10SPIA.RData
)
load(
"/var/folders/h4/tjtz05_x709d1pk_r84xgrq00000gn/T//RtmpknrpBa/file93640a90d10SPIA.RData"
)
rm(path.info)
load_all()
system.time(.retrieveTopology(species = "hsapiens", database = "kegg"))
load_all()
system.time(.retrieveTopology(species = "hsapiens", database = "kegg"))
species = "hsapiens", database = "kegg"
species = "hsapiens"
database = "kegg"
ls()
ls()[ls() != paste(outputDir, "SPIA.RData", sep = "")]
load_all()
system.time(.retrieveTopology(species = "hsapiens", database = "kegg"))
check()
check()
library(devtolls)
library(devtools)
check()
library(devtolls)
library(AnnotationHub)
library(magrittr)
library(devtools)
library(stringr)
library(testthat)
library(microbenchmark)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
system.time(weightedFC <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", "Vehicle"))
# # retrieve pathway info using `graphite`s
system.time(weightedAdjMatrix(species = "hsapiens", database = "kegg", outputDir = "data/BminsI(test).rds"))
# this now takes 108 seconds to run
system.time(ssPertScore <- perturbationScore(weightedFC$logFC, here::here("data/BminsI.rds")))
load_all()
load_all()
load_all()
load_all()
.ssPertScore <- function(BminsI, weightedFC){
sapply(names(BminsI), function(x){
#' Title
#'
#' @param BminsI
#' @param weightedFC
#'
#' @return
.ssPertScore <- function(BminsI, weightedFC){
sapply(names(BminsI), function(x){
if (abs(det(BminsI[[x]])) > 1e-7){
sapply(colnames(weightedFC), function(y){
delE  <- weightedFC[,y]
delE  <- delE[rownames(BminsI[[x]])]
# If any of the pathway gene was not expressed, set the ssLogFC to 0
delE  <- replace(delE, is.na(delE), 0)
PF <- solve(BminsI[[x]], -delE)
x <- sum(PF - delE)
})
} else {
# if determinant of the pathway topology is not positive, the equation does not have a unique solution
x <- NULL
}
}, simplify = FALSE)
}
}
)
}
load_all()
use_rcpp_eigen()
load_all()
load_all()
Rcpp::evalCpp("1+1")
library(devtools)
load_all()
load_all()
load_all()
load_all()
library(devtools)
load_all()
load_all()
Rcpp::evalCpp("1+1")
unlink("~/.R/Makevars")
unlink("~/.Renviron")
Rcpp::evalCpp("1+1")
library(Rcpp)
Rcpp::evalCpp("1+1")
Rcpp::evalCpp("1+1")
library(Rcpp)
Rcpp::evalCpp("1+1")
library(devtools)
load_all()
load_all()
library(devtools)
load_all()
load_all()
library(devtools)
load_all()
set(CMAKE_OSX_SYSROOT "")
load_all()
load_all()
library(AnnotationHub)
library(magrittr)
library(devtools)
library(stringr)
library(testthat)
library(Rcpp)
library(microbenchmark)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
system.time(weightedFC <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", "Vehicle"))
load_all()
getwd()
library(devtools)
load_all()
library(devtools)
load_all()
library(devtools)
load_all()
install.packages("RInside")
session_info()
library(Rcpp)
sourceCpp("src/ssPertScore.cpp")
library(AnnotationHub)
library(magrittr)
library(devtools)
library(stringr)
library(testthat)
library(Rcpp)
library(microbenchmark)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
system.time(weightedFC <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", "Vehicle"))
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
system.time(weightedFC <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", "Vehicle"))
test <- ssPertScore_RCPP(BminsI[1:5], as.matrix(weightedFC$logFC))
BminsI <- readRDS("data/BminsI.rds")
test <- ssPertScore_RCPP(BminsI[1:5], as.matrix(weightedFC$logFC))
sourceCpp("src/ssPertScore.cpp")
test <- ssPertScore_RCPP(BminsI[1:5], as.matrix(weightedFC$logFC))
test
sourceCpp("src/ssPertScore.cpp")
test <- ssPertScore_RCPP(BminsI[1:5], as.matrix(weightedFC$logFC))
test
sourceCpp("src/ssPertScore.cpp")
test <- ssPertScore_RCPP(BminsI[1:5], as.matrix(weightedFC$logFC))
test
test[[1]]
x <- 1
weightedFC <- weightedFC$logFC
sapply(colnames(weightedFC), function(y){
delE  <- weightedFC[,y]
delE  <- delE[rownames(BminsI[[x]])]
# If any of the pathway gene was not expressed, set the ssLogFC to 0
delE  <- replace(delE, is.na(delE), 0)
PF <- solve(BminsI[[x]], -delE)
# x <- sum(PF - delE)
})
test[[1]][[1]][1:20]
test2 <- sapply(colnames(weightedFC), function(y){
delE  <- weightedFC[,y]
delE  <- delE[rownames(BminsI[[x]])]
# If any of the pathway gene was not expressed, set the ssLogFC to 0
delE  <- replace(delE, is.na(delE), 0)
PF <- solve(BminsI[[x]], -delE)
# x <- sum(PF - delE)
})
test2[1:20,1]
test[[1]][[35]][1:20]
test2[1:20,35]
system.time(weightedFC <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", "Vehicle"))
sourceCpp("src/ssPertScore.cpp")
test <- ssPertScore_RCPP(BminsI[1:5], as.matrix(weightedFC$logFC))
test[[1]]
sourceCpp("src/ssPertScore.cpp")
test_v1 <- ssPertScore_RCPP(BminsI[1:5], as.matrix(weightedFC$logFC))
test_v1[[1]][1]
sourceCpp("src/ssPertScore.cpp")
test_pf <- ssPertScore_RCPP(BminsI[1:5], as.matrix(weightedFC$logFC))
test_pf[[1]][1]
test_v1[[1]][1]
weightedFC <- weightedFC$logFC
test <- sapply(colnames(weightedFC), function(y){
delE  <- weightedFC[,y]
delE  <- delE[rownames(BminsI[[x]])]
# If any of the pathway gene was not expressed, set the ssLogFC to 0
delE  <- replace(delE, is.na(delE), 0)
solve(BminsI[[x]], -delE)
# x <- sum(PF - delE)
})
head(test)
test2 <- sapply(colnames(weightedFC), function(y){
delE  <- weightedFC[,y]
delE  <- delE[rownames(BminsI[[x]])]
# If any of the pathway gene was not expressed, set the ssLogFC to 0
replace(delE, is.na(delE), 0)
})
head(test2)
test <-  sapply(colnames(weightedFC), function(y){
delE  <- weightedFC[,y]
delE  <- delE[rownames(BminsI[[x]])]
# If any of the pathway gene was not expressed, set the ssLogFC to 0
delE  <- replace(delE, is.na(delE), 0)
PF <- solve(BminsI[[x]], -delE)
sum(PF - delE)
})
head(test)
# this now takes 90 seconds to run
system.time(ssPertScore <- perturbationScore(weightedFC$logFC, here::here("data/BminsI.rds")))
system.time(weightedFC <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", "Vehicle"))
# this now takes 90 seconds to run
system.time(ssPertScore <- perturbationScore(weightedFC$logFC, here::here("data/BminsI.rds")))
ssPertScore
sourceCpp("src/ssPertScore.cpp")
test <- ssPertScore_RCPP(BminsI[1:5], as.matrix(weightedFC$logFC))
test
sourceCpp("src/ssPertScore.cpp")
test <- ssPertScore_RCPP(BminsI[1:5], as.matrix(weightedFC$logFC))
test
test <- ssPertScore_RCPP(BminsI, as.matrix(weightedFC$logFC))
system.time(test <- ssPertScore_RCPP(BminsI, as.matrix(weightedFC$logFC)))
test
# this now takes 90 seconds to run
system.time(ssPertScore <- perturbationScore(weightedFC$logFC, here::here("data/BminsI.rds")))
system.time(test <- ssPertScore_RCPP(BminsI, as.matrix(weightedFC$logFC)))
sourceCpp("src/ssPertScore.cpp")
system.time(test <- ssPertScore_RCPP(BminsI, as.matrix(weightedFC$logFC)))
sourceCpp("src/ssPertScore.cpp")
system.time(.ssPertScore( BminsI, weightedFC$logFC))
system.time(test <- .ssPertScore( BminsI, weightedFC$logFC))
test$`Glycolysis / Gluconeogenesis`
is.null(test)
PF[sapply(PF, is.null)]
test[sapply(test, is.null)]
logCPM
logCPM <- as.matrix(logCPM)
rownames(logCPM) <- paste("ENTREZID:", rownames(logCPM), sep = "")
metadata <- as.data.frame(metadata)
factor <-
"patient"
pairs <- unique(metadata[,factor])
control <- "Vehicle"
sampleInpairs <- sapply(pairs, function(x){
contrSample <- dplyr::filter(metadata, treatment == control, !!sym(factor) == x)
contrSample <- pull(contrSample, sample)
treatedSample <- dplyr::filter(metadata, treatment != control, !!sym(factor) == x)
treatedSample <- pull(treatedSample, sample)
list(contrSample = contrSample, treatedSample = treatedSample)
}, simplify = FALSE)
sampleInpairs
#at the moment this step take 70 secs
system.time(nomarlizedScore <- normaliseByPermutation(logCPM, metadata, factor = "patient",
control = "Vehicle", scores = ssPertScore,
weight = weightedFC$weight, NB = 100,
filePath = here::here("data/BminsI.rds")))
load_all()
library(devtools)
load_all()
library(devtools)
load_all()
library(Rcpp)
sourceCpp("src/ssPertScore.cpp")
load_all()
set(CMAKE_OSX_SYSROOT /sdk/path)
sourceCpp("src/ssPertScore.cpp")
load_all()
library(AnnotationHub)
library(magrittr)
library(devtools)
library(stringr)
library(testthat)
library(Rcpp)
library(microbenchmark)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
system.time(weightedFC <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", "Vehicle"))
# this now takes 90 seconds to run
system.time(ssPertScore <- perturbationScore(weightedFC$logFC, here::here("data/BminsI.rds")))
BminsI <- readRDS(here::here("data/BminsI.rds"))
system.time(ssPertScore_RCPP(BminsI, weightedFC$logFC))
load_all()
system.time(ssPertScore.RCPP(BminsI, weightedFC$logFC))
use_rcpp()
document()
system.time(ssPertScore.RCPP(BminsI, weightedFC$logFC))
sourceCpp("src/ssPer")
sourceCpp("src/ssPertScore.cpp")
system.time(ssPertScore_RCPP(BminsI, weightedFC$logFC))
install.packages("RcppClock")
library(AnnotationHub)
library(magrittr)
library(devtools)
library(stringr)
library(testthat)
library(Rcpp)
library(microbenchmark)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
load_all()
document()
load_all()
system.time(weightedFC <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", "Vehicle"))
# this now takes 56 seconds to run
system.time(ssPertScore <- perturbationScore(weightedFC$logFC, here::here("data/BminsI.rds")))
head(ssPertScore)
#at the moment this step take 70 secs
system.time(nomarlizedScore <- normaliseByPermutation(logCPM, metadata, factor = "patient",
control = "Vehicle", scores = ssPertScore,
weight = weightedFC$weight, NB = 100,
filePath = here::here("data/BminsI.rds")))
#at the moment this step take 70 secs
system.time(nomarlizedScore <- normaliseByPermutation(logCPM, metadata, factor = "patient",
control = "Vehicle", scores = ssPertScore,
weight = weightedFC$weight, NB = 5,
filePath = here::here("data/BminsI.rds")))
use_rcpp("permutation")
.rs.setClangDiagnostics(2)
sourceCpp("src/ssPertScore.cpp")
system.time(test <- ssPertScore_RCPP(BminsI, weightedFC$logFC))
BminsI <- readRDS("data/BminsI.rds")
system.time(test <- ssPertScore_RCPP(BminsI, weightedFC$logFC))
sourceCpp("src/ssPertScore.cpp")
system.time(test <- ssPertScore_RCPP(BminsI, weightedFC$logFC))
library(devtools)
load_all()
library(AnnotationHub)
library(magrittr)
library(devtools)
library(stringr)
library(testthat)
library(Rcpp)
library(microbenchmark)
ah <- AnnotationHub() %>%
subset(rdataclass == "EnsDb") %>%
subset(str_detect(description, as.character("101"))) %>%
subset(genome == "GRCh38")
ensDb <- ah[[1]]
# convert gene ids to entrez ids
logCPM <- readRDS(here::here("data/logCPM.rds"))
rownames(logCPM) <- mapIds(ensDb, rownames(logCPM), "ENTREZID", keytype = "GENEID")
logCPM <- logCPM[!is.na(rownames(logCPM)),]
metadata <- readRDS(here::here("data/mergedSamples.rds")) %>%
dplyr::rename(sample = name)
system.time(weightedFC <- weight_ssFC(logCPM, metadata = metadata, factor = "patient", control = "Vehicle"))
# this now takes ~60 seconds to run
system.time(ssPertScore <- perturbationScore(weightedFC$logFC, here::here("data/BminsI.rds")))
warnings()
