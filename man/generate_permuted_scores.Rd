% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/normaliseByPermutation.R
\name{generate_permuted_scores}
\alias{generate_permuted_scores}
\alias{generate_permuted_scores,matrix-method}
\alias{generate_permuted_scores,data.frame-method}
\alias{generate_permuted_scores,DGEList-method}
\alias{generate_permuted_scores,SummarizedExperiment-method}
\title{Permute sample labels to simulate null distribution of perturbation scores}
\usage{
generate_permuted_scores(
  expreMatrix,
  numOfTreat,
  NB = 1000,
  testScore = NULL,
  gsTopology,
  weight,
  BPPARAM = BiocParallel::bpparam()
)

\S4method{generate_permuted_scores}{matrix}(
  expreMatrix,
  numOfTreat,
  NB = 1000,
  testScore = NULL,
  gsTopology,
  weight,
  BPPARAM = BiocParallel::bpparam()
)

\S4method{generate_permuted_scores}{data.frame}(
  expreMatrix,
  numOfTreat,
  NB = 1000,
  testScore = NULL,
  gsTopology,
  weight,
  BPPARAM = BiocParallel::bpparam()
)

\S4method{generate_permuted_scores}{DGEList}(
  expreMatrix,
  numOfTreat,
  NB = 1000,
  testScore = NULL,
  gsTopology,
  weight,
  BPPARAM = BiocParallel::bpparam()
)

\S4method{generate_permuted_scores}{SummarizedExperiment}(
  expreMatrix,
  numOfTreat,
  NB = 1000,
  testScore = NULL,
  gsTopology,
  weight,
  BPPARAM = BiocParallel::bpparam()
)
}
\arguments{
\item{expreMatrix}{\code{matrix} and \code{data.frame} of logCPM, or \code{DGEList}/\code{SummarizedExperiment}
storing gene expression counts. Feature names need to be in entrez IDs}

\item{numOfTreat}{Number of treatments (including control)}

\item{NB}{Number of permutations to perform}

\item{testScore}{Optional. Users can provide the test perturbation score
\code{data.frame} (ie. output of \code{pathwayPertScore}) to restrict the permutatio
step only to pathways with non-zero test scores in at least one sample.}

\item{gsTopology}{List of pathway topology matrices generated using function \code{retrieve_topology}}

\item{weight}{A vector of gene-wise weights derived from function \code{weight_ss_fc}}

\item{BPPARAM}{The parallel back-end to uses, if not specified, it is defaulted to the one returned by \code{BiocParallel::bpparam()}.}
}
\value{
A list where each element is a vector of perturbation scores for a pathway.
}
\description{
Simulate null distributions of perturbation scores for each pathway through sample permutation.
}
\details{
This \code{generate_permuted_scores} function is a generic function that can deal with
multiple types of inputs. It firstly randomly permute sample labels \code{NB} times to generate
permuted logFCs, which are then used to compute permuted perturbation scores for each pathway.

The function outputs a list that is of the same length as the list storing pathway topology
matrices. Each element of the output list is for a pathway and contains a vector of permuted
perturbation score of length. The permuted perturbation scores will be used to estimate the
null distributions of perturbation scores.

If the input is S4 object of \code{DGEList or SummarizedExperiment}, gene expression matrix will
be extracted and converted to a logCPM matrix.

The default number of permutation (\code{NB}) is set to 1000. If the requested \code{NB} is larger than the
maximum number of permutations possible, \code{NB} will be set to the largest number of permutations
possible instead.
}
\examples{
#compute weighted single sample logFCs
data(metadata_example)
data(logCPM_example)
metadata_example <- dplyr::mutate(metadata_example, treatment = factor(
   treatment, levels = c("Vehicle", "E2+R5020", "R5020")))
ls <- weight_ss_fc(logCPM_example, metadata = metadata_example,
 groupBy = "patient", treatColumn = "treatment", sampleColumn = "sample")
\dontrun{
load(system.file("extdata", "gsTopology.rda", package = "sSNAPPY"))

# simulate the null distribution of scores through sample permutation
permutedScore <- generate_permuted_scores(logCPM_example, numOfTreat = 3,
 NB = 10, gsTopology = gsTopology, weight = ls$weight)

# To see what other parallel back-end can be used:
 BiocParallel::registered()
 }
}
